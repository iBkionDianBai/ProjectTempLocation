import {
  CircleNode,
  CircleNodeModel,
  DiamondNode,
  DiamondNodeModel,
  EllipseNode,
  EllipseNodeModel,
  EventType,
  HtmlNode,
  HtmlNodeModel,
  ModelType,
  Polygon,
  PolygonNode,
  PolygonNodeModel,
  PolylineEdge,
  PolylineEdgeModel,
  Rect,
  RectNode,
  RectNodeModel,
  _,
  b,
  formatAnchorConnectValidateData,
  u,
  util_exports
} from "./chunk-6HXJDPSH.js";
import {
  cloneDeep_default,
  forEach_default,
  get_default,
  has_default,
  lodash_default_default
} from "./chunk-U5KY4VDL.js";
import {
  __export
} from "./chunk-PR4QN5HX.js";

// node_modules/@logicflow/extension/es/bpmn/constant.js
var StartEventConfig = {
  width: 40,
  height: 40
};
var EndEventConfig = {
  width: 40,
  height: 40
};
var ExclusiveGatewayConfig = {
  width: 40,
  height: 40
};
var ServiceTaskConfig = {
  width: 100,
  height: 80
};
var UserTaskConfig = {
  width: 100,
  height: 80
};
var theme = {
  rect: {
    radius: 5,
    stroke: "rgb(24, 125, 255)"
  },
  circle: {
    r: 18,
    stroke: "rgb(24, 125, 255)"
  },
  polygon: {
    stroke: "rgb(24, 125, 255)"
  },
  polyline: {
    stroke: "rgb(24, 125, 255)",
    hoverStroke: "rgb(24, 125, 255)",
    selectedStroke: "rgb(24, 125, 255)"
  },
  edgeText: {
    textWidth: 100,
    overflowMode: "default",
    fontSize: 12,
    background: {
      fill: "white",
      height: 14,
      stroke: "transparent",
      radius: 3
    }
  }
};

// node_modules/@logicflow/extension/es/bpmn/getBpmnId.js
var IDS = (
  /** @class */
  function() {
    function IDS2() {
      globalThis._ids = this;
      this._ids = /* @__PURE__ */ new Set();
    }
    IDS2.prototype.generateId = function() {
      return "xxxxxxx".replace(/[x]/g, function(c) {
        var r = Math.random() * 16 | 0;
        var v = c === "x" ? r : r & 3 | 8;
        return v.toString(16);
      });
    };
    IDS2.prototype.next = function() {
      var id = this.generateId();
      while (this._ids.has(id)) {
        id = this.generateId();
      }
      this._ids.add(id);
      return id;
    };
    return IDS2;
  }()
);
var ids = (globalThis === null || globalThis === void 0 ? void 0 : globalThis._ids) || new IDS();
function getBpmnId() {
  return ids.next();
}

// node_modules/@logicflow/extension/es/bpmn/events/StartEvent.js
var __extends = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var StartEventModel = (
  /** @class */
  function(_super) {
    __extends(StartEventModel2, _super);
    function StartEventModel2(data, graphModel) {
      if (!data.id) {
        data.id = "Event_".concat(getBpmnId());
      }
      if (!data.text) {
        data.text = "";
      }
      if (data.text && typeof data.text === "string") {
        data.text = {
          value: data.text,
          x: data.x,
          y: data.y + 40
        };
      }
      return _super.call(this, data, graphModel) || this;
    }
    StartEventModel2.prototype.setAttributes = function() {
      this.r = 18;
    };
    StartEventModel2.prototype.getConnectedTargetRules = function() {
      var rules = _super.prototype.getConnectedTargetRules.call(this);
      var notAsTarget = {
        message: "起始节点不能作为边的终点",
        validate: function() {
          return false;
        }
      };
      rules.push(notAsTarget);
      return rules;
    };
    StartEventModel2.extendKey = "StartEventModel";
    return StartEventModel2;
  }(CircleNodeModel)
);
var StartEventView = (
  /** @class */
  function(_super) {
    __extends(StartEventView2, _super);
    function StartEventView2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    StartEventView2.extendKey = "StartEventNode";
    return StartEventView2;
  }(CircleNode)
);
var StartEvent = {
  type: "bpmn:startEvent",
  view: StartEventView,
  model: StartEventModel
};

// node_modules/@logicflow/extension/es/bpmn/events/EndEvent.js
var __extends2 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var EndEventModel = (
  /** @class */
  function(_super) {
    __extends2(EndEventModel2, _super);
    function EndEventModel2(data, graphModel) {
      if (!data.id) {
        data.id = "Event_".concat(getBpmnId());
      }
      if (!data.text) {
        data.text = "";
      }
      if (data.text && typeof data.text === "string") {
        data.text = {
          value: data.text,
          x: data.x,
          y: data.y + 40
        };
      }
      return _super.call(this, data, graphModel) || this;
    }
    EndEventModel2.prototype.setAttributes = function() {
      this.r = 18;
    };
    EndEventModel2.prototype.getConnectedSourceRules = function() {
      var rules = _super.prototype.getConnectedSourceRules.call(this);
      var notAsSource = {
        message: "结束节点不能作为边的起点",
        validate: function() {
          return false;
        }
      };
      rules.push(notAsSource);
      return rules;
    };
    EndEventModel2.extendKey = "EndEventModel";
    return EndEventModel2;
  }(CircleNodeModel)
);
var EndEventView = (
  /** @class */
  function(_super) {
    __extends2(EndEventView2, _super);
    function EndEventView2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    EndEventView2.prototype.getAnchorStyle = function() {
      return {
        visibility: "hidden"
      };
    };
    EndEventView2.prototype.getShape = function() {
      var model = this.props.model;
      var style2 = model.getNodeStyle();
      var _a = model, x = _a.x, y = _a.y, r = _a.r;
      var outCircle = _super.prototype.getShape.call(this);
      return _("g", {}, outCircle, _("circle", __assign(__assign({}, style2), { cx: x, cy: y, r: r - 5 })));
    };
    EndEventView2.extendKey = "EndEventView";
    return EndEventView2;
  }(CircleNode)
);
var EndEvent = {
  type: "bpmn:endEvent",
  view: EndEventView,
  model: EndEventModel
};

// node_modules/@logicflow/extension/es/bpmn/flow/SequenceFlow.js
var __extends3 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var SequenceFlowModel = (
  /** @class */
  function(_super) {
    __extends3(SequenceFlowModel2, _super);
    function SequenceFlowModel2(data, graphModel) {
      if (!data.id) {
        data.id = "Flow_".concat(getBpmnId());
      }
      return _super.call(this, data, graphModel) || this;
    }
    SequenceFlowModel2.extendKey = "SequenceFlowModel";
    return SequenceFlowModel2;
  }(PolylineEdgeModel)
);
var SequenceFlowView = (
  /** @class */
  function(_super) {
    __extends3(SequenceFlowView2, _super);
    function SequenceFlowView2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    SequenceFlowView2.extendKey = "SequenceFlowEdge";
    return SequenceFlowView2;
  }(PolylineEdge)
);
var SequenceFlow = {
  type: "bpmn:sequenceFlow",
  view: SequenceFlowView,
  model: SequenceFlowModel
};

// node_modules/@logicflow/extension/es/bpmn/gateways/ExclusiveGateway.js
var __extends4 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var ExclusiveGatewayModel = (
  /** @class */
  function(_super) {
    __extends4(ExclusiveGatewayModel2, _super);
    function ExclusiveGatewayModel2(data, graphModel) {
      var _this = this;
      if (!data.id) {
        data.id = "Gateway_".concat(getBpmnId());
      }
      if (!data.text) {
        data.text = "";
      }
      if (data.text && typeof data.text === "string") {
        data.text = {
          value: data.text,
          x: data.x,
          y: data.y + 40
        };
      }
      _this = _super.call(this, data, graphModel) || this;
      _this.points = [
        [25, 0],
        [50, 25],
        [25, 50],
        [0, 25]
      ];
      return _this;
    }
    ExclusiveGatewayModel2.extendKey = "ExclusiveGatewayModel";
    return ExclusiveGatewayModel2;
  }(PolygonNodeModel)
);
var ExclusiveGatewayView = (
  /** @class */
  function(_super) {
    __extends4(ExclusiveGatewayView2, _super);
    function ExclusiveGatewayView2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ExclusiveGatewayView2.prototype.getShape = function() {
      var model = this.props.model;
      var _a = model, x = _a.x, y = _a.y, width = _a.width, height = _a.height, points = _a.points;
      var style2 = model.getNodeStyle();
      return _(
        "g",
        {
          transform: "matrix(1 0 0 1 ".concat(x - width / 2, " ").concat(y - height / 2, ")")
        },
        // @ts-ignore TODO: 确认 h('polygon') 报错的问题
        _("polygon", __assign2(__assign2({}, style2), { x, y, points })),
        _("path", __assign2({ d: "m 16,15 7.42857142857143,9.714285714285715 -7.42857142857143,9.714285714285715 3.428571428571429,0 5.714285714285715,-7.464228571428572 5.714285714285715,7.464228571428572 3.428571428571429,0 -7.42857142857143,-9.714285714285715 7.42857142857143,-9.714285714285715 -3.428571428571429,0 -5.714285714285715,7.464228571428572 -5.714285714285715,-7.464228571428572 -3.428571428571429,0 z" }, style2))
      );
    };
    ExclusiveGatewayView2.extendKey = "ExclusiveGatewayNode";
    return ExclusiveGatewayView2;
  }(PolygonNode)
);
var ExclusiveGateway = {
  type: "bpmn:exclusiveGateway",
  view: ExclusiveGatewayView,
  model: ExclusiveGatewayModel
};

// node_modules/@logicflow/extension/es/bpmn/tasks/ServiceTask.js
var __extends5 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var ServiceTaskModel = (
  /** @class */
  function(_super) {
    __extends5(ServiceTaskModel2, _super);
    function ServiceTaskModel2(data, graphModel) {
      if (!data.id) {
        data.id = "Activity_".concat(getBpmnId());
      }
      return _super.call(this, data, graphModel) || this;
    }
    ServiceTaskModel2.extendKey = "ServiceTaskModel";
    return ServiceTaskModel2;
  }(RectNodeModel)
);
var ServiceTaskView = (
  /** @class */
  function(_super) {
    __extends5(ServiceTaskView2, _super);
    function ServiceTaskView2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ServiceTaskView2.prototype.getLabelShape = function() {
      var model = this.props.model;
      var x = model.x, y = model.y, width = model.width, height = model.height;
      var style2 = model.getNodeStyle();
      return _("svg", {
        x: x - width / 2 + 5,
        y: y - height / 2 + 5,
        width: 30,
        height: 30,
        viewBox: "0 0 1274 1024"
      }, _("path", {
        fill: style2.stroke,
        d: "M882.527918 434.149934c-2.234901-5.303796-7.311523-8.853645-13.059434-9.138124l-61.390185-3.009544c-6.635117-20.973684-15.521508-41.175795-26.513864-60.282968l42.051745-47.743374c4.308119-4.889357 4.955872-12.004405 1.602498-17.59268-46.384423-77.30362-103.969956-101.422947-106.400309-102.410438-5.332449-2.170432-11.432377-1.090844-15.693424 2.77009L654.674467 240.664222c-17.004279-8.654101-35.092239-15.756869-53.995775-21.210068l-3.26537-66.490344c-0.280386-5.747911-3.833305-10.824533-9.134031-13.059434-1.683339-0.709151-30.193673-12.391215-76.866668-12.051477-46.672996-0.339738-75.18333 11.342326-76.866668 12.051477-5.300726 2.234901-8.853645 7.311523-9.134031 13.059434l-3.26537 66.490344c-18.903535 5.453199-36.991496 12.555967-53.995775 21.210068l-48.450479-43.922349c-4.261047-3.860934-10.360975-4.940522-15.693424-2.77009-2.430352 0.98749-60.015885 25.106818-106.400309 102.410438-3.353374 5.588275-2.705622 12.703323 1.602498 17.59268l42.051745 47.743374c-10.992355 19.107173-19.878746 39.309284-26.513864 60.282968l-61.390185 3.009544c-5.747911 0.284479-10.824533 3.834328-13.059434 9.138124-1.01512 2.415003-24.687262 60.190871-2.822278 147.651828 1.583055 6.324032 7.072069 10.893094 13.57518 11.308557 5.892197 0.37146 11.751648 0.523933 17.419741 0.667196 14.498202 0.372483 28.193109 0.723477 40.908712 4.63353 4.212952 1.294482 6.435573 8.270361 9.349949 18.763342 1.287319 4.640694 2.617617 9.43693 4.484128 14.010085 1.794879 4.393054 3.75758 8.570189 5.66093 12.607132 1.302669 2.765997 2.529613 5.380544 3.689019 8.018627 2.986007 6.803963 2.682086 9.773598 2.578732 10.349719-3.061732 3.672646-6.391571 7.238868-9.91379 11.015891-1.810229 1.943258-3.680832 3.949962-5.523807 5.980201l-22.560832 24.8909c-3.865028 4.261047-4.940522 10.365068-2.774183 15.693424 0.991584 2.426259 25.102724 60.011792 102.414531 106.400309 5.588275 3.353374 12.703323 2.701528 17.591657-1.603521l23.476691-20.682042c2.346441-2.061962 4.64888-4.336772 6.875594-6.534833 9.05319-8.93858 14.018272-12.95608 17.73185-11.576663 3.305279 1.222851 6.907317 3.166109 10.720156 5.228071 3.325745 1.794879 6.764054 3.650133 10.465352 5.288446 6.016017 2.662643 12.120039 4.688789 18.019399 6.65149 6.827499 2.266623 13.279445 4.409426 18.819624 7.275707 1.518586 0.782829 1.926886 0.994654 2.358721 7.830339 0.726547 11.496845 1.25048 23.276123 1.753947 34.672684 0.264013 5.900384 0.528026 11.803837 0.815575 17.700127 0.284479 5.743818 3.833305 10.82044 9.138124 13.05534 1.654686 0.698918 29.371958 12.063757 74.869175 12.063757 0.328481 0 3.65832 0 3.986801 0 45.497217 0 73.214489-11.364839 74.869175-12.063757 5.304819-2.234901 8.853645-7.311523 9.138124-13.05534 0.287549-5.89629 0.551562-11.799744 0.815575-17.700127 0.503467-11.396561 1.027399-23.175839 1.753947-34.672684 0.431835-6.835685 0.840134-7.04751 2.358721-7.830339 5.54018-2.866281 11.992125-5.009084 18.819624-7.275707 5.89936-1.962701 12.003382-3.988848 18.019399-6.65149 3.701299-1.638313 7.139607-3.493567 10.465352-5.288446 3.812839-2.061962 7.414877-4.00522 10.720156-5.228071 3.713578-1.379417 8.67866 2.638083 17.73185 11.576663 2.226714 2.198062 4.529153 4.472871 6.875594 6.534833l23.476691 20.682042c4.888334 4.305049 12.003382 4.956895 17.591657 1.603521 77.311807-46.388517 101.422947-103.97405 102.414531-106.400309 2.166339-5.328355 1.090844-11.432377-2.774183-15.693424l-22.560832-24.8909c-1.842974-2.030239-3.713578-4.036943-5.523807-5.980201-3.52222-3.777023-6.852058-7.343245-9.91379-11.015891-0.103354-0.576121-0.407276-3.545756 2.578732-10.349719 1.159406-2.638083 2.38635-5.252631 3.689019-8.018627 1.90335-4.036943 3.866051-8.214079 5.66093-12.607132 1.866511-4.573155 3.196809-9.369392 4.484128-14.010085 2.914376-10.492982 5.136997-17.46886 9.349949-18.763342 12.715603-3.910053 26.41051-4.261047 40.908712-4.63353 5.668093-0.143263 11.527544-0.295735 17.419741-0.667196 6.503111-0.415462 11.992125-4.984524 13.57518-11.308557C907.21518 494.340805 883.543038 436.564937 882.527918 434.149934zM643.49894 643.761929c-35.280528 35.280528-82.191954 54.711066-132.086317 54.711066s-96.806813-19.430538-132.086317-54.711066c-35.280528-35.279504-54.711066-82.191954-54.711066-132.086317 0-49.894364 19.430538-96.80272 54.711066-132.082224 35.283598-35.284621 82.191954-54.711066 132.086317-54.711066s96.80579 19.426445 132.086317 54.711066c35.279504 35.279504 54.711066 82.187861 54.711066 132.082224C698.210006 561.569976 678.782537 608.482425 643.49894 643.761929z"
      }));
    };
    ServiceTaskView2.prototype.getShape = function() {
      var model = this.props.model;
      var x = model.x, y = model.y, width = model.width, height = model.height, radius = model.radius;
      var style2 = model.getNodeStyle();
      return _("g", {}, [
        _("rect", __assign3({ x: x - width / 2, y: y - height / 2, rx: radius, ry: radius, width, height }, style2)),
        this.getLabelShape()
      ]);
    };
    ServiceTaskView2.extendKey = "ServiceTaskNode";
    return ServiceTaskView2;
  }(RectNode)
);
var ServiceTask = {
  type: "bpmn:serviceTask",
  view: ServiceTaskView,
  model: ServiceTaskModel
};

// node_modules/@logicflow/extension/es/bpmn/tasks/UserTask.js
var __extends6 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign4 = function() {
  __assign4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
var UserTaskModel = (
  /** @class */
  function(_super) {
    __extends6(UserTaskModel2, _super);
    function UserTaskModel2(data, graphModel) {
      if (!data.id) {
        data.id = "Activity_".concat(getBpmnId());
      }
      return _super.call(this, data, graphModel) || this;
    }
    UserTaskModel2.extendKey = "UserTaskModel";
    return UserTaskModel2;
  }(RectNodeModel)
);
var UserTaskView = (
  /** @class */
  function(_super) {
    __extends6(UserTaskView2, _super);
    function UserTaskView2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    UserTaskView2.prototype.getLabelShape = function() {
      var model = this.props.model;
      var x = model.x, y = model.y, width = model.width, height = model.height;
      var style2 = model.getNodeStyle();
      return _("svg", {
        x: x - width / 2 + 5,
        y: y - height / 2 + 5,
        width: 25,
        height: 25,
        viewBox: "0 0 1274 1024"
      }, _("path", {
        fill: style2.stroke,
        d: "M655.807326 287.35973m-223.989415 0a218.879 218.879 0 1 0 447.978829 0 218.879 218.879 0 1 0-447.978829 0ZM1039.955839 895.482975c-0.490184-212.177424-172.287821-384.030443-384.148513-384.030443-211.862739 0-383.660376 171.85302-384.15056 384.030443L1039.955839 895.482975z"
      }));
    };
    UserTaskView2.prototype.getShape = function() {
      var model = this.props.model;
      var x = model.x, y = model.y, width = model.width, height = model.height, radius = model.radius;
      var style2 = model.getNodeStyle();
      return _("g", {}, [
        _("rect", __assign4(__assign4({}, style2), { x: x - width / 2, y: y - height / 2, rx: radius, ry: radius, width, height })),
        this.getLabelShape()
      ]);
    };
    UserTaskView2.extendKey = "UserTaskNode";
    return UserTaskView2;
  }(RectNode)
);
var UserTask = {
  type: "bpmn:userTask",
  view: UserTaskView,
  model: UserTaskModel
};

// node_modules/@logicflow/extension/es/bpmn/index.js
var BpmnElement = {
  pluginName: "bpmnElement",
  install: function(lf) {
    lf.setTheme(theme);
    lf.register(StartEvent);
    lf.register(EndEvent);
    lf.register(ExclusiveGateway);
    lf.register(UserTask);
    lf.register(ServiceTask);
    if (!lf.options.customBpmnEdge) {
      lf.register(SequenceFlow);
      lf.setDefaultEdgeType("bpmn:sequenceFlow");
    }
  }
};

// node_modules/@logicflow/extension/es/bpmn-adapter/bpmnIds.js
var IDs = (
  /** @class */
  function() {
    function IDs3() {
      globalThis._ids = this;
      this._ids = /* @__PURE__ */ new Set();
    }
    IDs3.prototype.generateId = function() {
      return "xxxxxxx".replace(/[x]/g, function(c) {
        var r = Math.random() * 16 | 0;
        var v = c === "x" ? r : r & 3 | 8;
        return v.toString(16);
      });
    };
    IDs3.prototype.next = function() {
      var id = this.generateId();
      while (this._ids.has(id)) {
        id = this.generateId();
      }
      this._ids.add(id);
      return id;
    };
    return IDs3;
  }()
);
var ids2 = (globalThis === null || globalThis === void 0 ? void 0 : globalThis._ids) || new IDs();
function getBpmnId2() {
  return ids2.next();
}

// node_modules/@logicflow/extension/es/bpmn-adapter/json2xml.js
function type(obj) {
  return Object.prototype.toString.call(obj);
}
function addSpace(depth) {
  return "  ".repeat(depth);
}
function handleAttributes(o) {
  var t = o;
  if (type(o) === "[object Object]") {
    t = {};
    Object.keys(o).forEach(function(k) {
      var tk = k;
      if (k.charAt(0) === "-") {
        tk = k.substring(1);
      }
      t[tk] = handleAttributes(o[k]);
    });
  } else if (Array.isArray(o)) {
    t = [];
    o.forEach(function(item, index) {
      t[index] = handleAttributes(item);
    });
  }
  return t;
}
function getAttributes(obj) {
  var tmp = obj;
  try {
    if (typeof tmp !== "string") {
      tmp = JSON.parse(obj);
    }
  } catch (error) {
    tmp = JSON.stringify(handleAttributes(obj)).replace(/"/g, "'");
  }
  return tmp;
}
var tn = "	\n";
function toXml(obj, name, depth) {
  var frontSpace = addSpace(depth);
  var str = "";
  if (name === "#text") {
    return tn + frontSpace + obj;
  } else if (name === "#cdata-section") {
    return tn + frontSpace + "<![CDATA[" + obj + "]]>";
  } else if (name === "#comment") {
    return tn + frontSpace + "<!--" + obj + "-->";
  }
  if ("".concat(name).charAt(0) === "-") {
    return " " + name.substring(1) + '="' + getAttributes(obj) + '"';
  } else {
    if (Array.isArray(obj)) {
      obj.forEach(function(item) {
        str += toXml(item, name, depth + 1);
      });
    } else if (type(obj) === "[object Object]") {
      var keys = Object.keys(obj);
      var attributes_1 = "";
      var children_1 = "";
      str += (depth === 0 ? "" : tn + frontSpace) + "<" + name;
      keys.forEach(function(k) {
        k.charAt(0) === "-" ? attributes_1 += toXml(obj[k], k, depth + 1) : children_1 += toXml(obj[k], k, depth + 1);
      });
      str += attributes_1 + (children_1 !== "" ? ">".concat(children_1).concat(tn + frontSpace, "</").concat(name, ">") : " />");
    } else {
      str += tn + frontSpace + "<".concat(name, ">").concat(obj.toString(), "</").concat(name, ">");
    }
  }
  return str;
}
function lfJson2Xml(o) {
  var xmlStr = "";
  for (var m in o) {
    xmlStr += toXml(o[m], m, 0);
  }
  return xmlStr;
}

// node_modules/@logicflow/extension/es/bpmn-adapter/xml2json.js
var XML = function() {
};
XML.ObjTree = function() {
  return this;
};
XML.ObjTree.VERSION = "0.23";
XML.ObjTree.prototype.xmlDecl = '<?xml version="1.0" encoding="UTF-8" ?>\n';
XML.ObjTree.prototype.attr_prefix = "-";
XML.ObjTree.prototype.parseXML = function(xml) {
  var root;
  if (window.DOMParser) {
    var xmldom = new DOMParser();
    var dom = xmldom.parseFromString(xml, "application/xml");
    if (!dom)
      return;
    root = dom.documentElement;
  } else if (window.ActiveXObject) {
    xmldom = new ActiveXObject("Microsoft.XMLDOM");
    xmldom.async = false;
    xmldom.loadXML(xml);
    root = xmldom.documentElement;
  }
  if (!root)
    return;
  return this.parseDOM(root);
};
XML.ObjTree.prototype.parseHTTP = function(url, options, callback) {
  var myOpt = {};
  for (var key in options) {
    myOpt[key] = options[key];
  }
  if (!myOpt.method) {
    if (typeof myOpt.postBody == "undefined" && typeof myOpt.postbody == "undefined" && typeof myOpt.parameters == "undefined") {
      myOpt.method = "get";
    } else {
      myOpt.method = "post";
    }
  }
  if (callback) {
    myOpt.asynchronous = true;
    var __this = this;
    var __func = callback;
    var __save = myOpt.onComplete;
    myOpt.onComplete = function(trans2) {
      var tree;
      if (trans2 && trans2.responseXML && trans2.responseXML.documentElement) {
        tree = __this.parseDOM(trans2.responseXML.documentElement);
      }
      __func(tree, trans2);
      if (__save)
        __save(trans2);
    };
  } else {
    myOpt.asynchronous = false;
  }
  var trans;
  if (typeof HTTP != "undefined" && HTTP.Request) {
    myOpt.uri = url;
    var req = new HTTP.Request(myOpt);
    if (req)
      trans = req.transport;
  } else if (typeof Ajax != "undefined" && Ajax.Request) {
    var req = new Ajax.Request(url, myOpt);
    if (req)
      trans = req.transport;
  }
  if (callback)
    return trans;
  if (trans && trans.responseXML && trans.responseXML.documentElement) {
    return this.parseDOM(trans.responseXML.documentElement);
  }
};
XML.ObjTree.prototype.parseDOM = function(root) {
  if (!root)
    return;
  this.__force_array = {};
  if (this.force_array) {
    for (var i = 0; i < this.force_array.length; i++) {
      this.__force_array[this.force_array[i]] = 1;
    }
  }
  var json = this.parseElement(root);
  if (this.__force_array[root.nodeName]) {
    json = [json];
  }
  if (root.nodeType != 11) {
    var tmp = {};
    tmp[root.nodeName] = json;
    json = tmp;
  }
  return json;
};
XML.ObjTree.prototype.parseElement = function(elem) {
  if (elem.nodeType == 7) {
    return;
  }
  if (elem.nodeType == 3 || elem.nodeType == 4 || elem.nodeType == 8) {
    var bool = elem.nodeValue.match(/[^\x00-\x20]/);
    if (bool == null)
      return;
    return elem.nodeValue;
  }
  var retVal = null;
  var cnt = {};
  if (elem.attributes && elem.attributes.length) {
    retVal = {};
    for (var i = 0; i < elem.attributes.length; i++) {
      var key = elem.attributes[i].nodeName;
      if (typeof key != "string")
        continue;
      var val = elem.attributes[i].nodeValue;
      try {
        val = JSON.parse(elem.attributes[i].nodeValue.replace(/'/g, '"'));
      } catch (error) {
        val = elem.attributes[i].nodeValue;
      }
      if (!val)
        continue;
      key = this.attr_prefix + key;
      if (typeof cnt[key] == "undefined")
        cnt[key] = 0;
      cnt[key]++;
      this.addNode(retVal, key, cnt[key], val);
    }
  }
  if (elem.childNodes && elem.childNodes.length) {
    var textOnly = true;
    if (retVal)
      textOnly = false;
    for (var i = 0; i < elem.childNodes.length && textOnly; i++) {
      var nType = elem.childNodes[i].nodeType;
      if (nType == 3 || nType == 4 || nType == 8)
        continue;
      textOnly = false;
    }
    if (textOnly) {
      if (!retVal)
        retVal = "";
      for (var i = 0; i < elem.childNodes.length; i++) {
        retVal += elem.childNodes[i].nodeValue;
      }
    } else {
      if (!retVal)
        retVal = {};
      for (var i = 0; i < elem.childNodes.length; i++) {
        var key = elem.childNodes[i].nodeName;
        if (typeof key != "string")
          continue;
        var val = this.parseElement(elem.childNodes[i]);
        if (!val)
          continue;
        if (typeof cnt[key] == "undefined")
          cnt[key] = 0;
        cnt[key]++;
        this.addNode(retVal, key, cnt[key], val);
      }
    }
  } else {
    retVal === null && (retVal = {});
  }
  return retVal;
};
XML.ObjTree.prototype.addNode = function(hash, key, counts, val) {
  if (this.__force_array[key]) {
    if (counts == 1)
      hash[key] = [];
    hash[key][hash[key].length] = val;
  } else if (counts == 1) {
    hash[key] = val;
  } else if (counts == 2) {
    hash[key] = [hash[key], val];
  } else {
    hash[key][hash[key].length] = val;
  }
};
XML.ObjTree.prototype.writeXML = function(tree) {
  var xml = this.hash_to_xml(null, tree);
  return this.xmlDecl + xml;
};
XML.ObjTree.prototype.hash_to_xml = function(name, tree) {
  var elem = [];
  var attr = [];
  for (var key in tree) {
    if (!tree.hasOwnProperty(key))
      continue;
    var val = tree[key];
    if (key.charAt(0) != this.attr_prefix) {
      if (typeof val == "undefined" || val == null) {
        elem[elem.length] = "<" + key + " />";
      } else if (typeof val == "object" && val.constructor == Array) {
        elem[elem.length] = this.array_to_xml(key, val);
      } else if (typeof val == "object") {
        elem[elem.length] = this.hash_to_xml(key, val);
      } else {
        elem[elem.length] = this.scalar_to_xml(key, val);
      }
    } else {
      attr[attr.length] = " " + key.substring(1) + '="' + this.xml_escape(val) + '"';
    }
  }
  var jattr = attr.join("");
  var jelem = elem.join("");
  if (typeof name == "undefined" || name == null) {
  } else if (elem.length > 0) {
    if (jelem.match(/\n/)) {
      jelem = "<" + name + jattr + ">\n" + jelem + "</" + name + ">\n";
    } else {
      jelem = "<" + name + jattr + ">" + jelem + "</" + name + ">\n";
    }
  } else {
    jelem = "<" + name + jattr + " />\n";
  }
  return jelem;
};
XML.ObjTree.prototype.array_to_xml = function(name, array) {
  var out = [];
  for (var i = 0; i < array.length; i++) {
    var val = array[i];
    if (typeof val == "undefined" || val == null) {
      out[out.length] = "<" + name + " />";
    } else if (typeof val == "object" && val.constructor == Array) {
      out[out.length] = this.array_to_xml(name, val);
    } else if (typeof val == "object") {
      out[out.length] = this.hash_to_xml(name, val);
    } else {
      out[out.length] = this.scalar_to_xml(name, val);
    }
  }
  return out.join("");
};
XML.ObjTree.prototype.scalar_to_xml = function(name, text) {
  if (name == "#text") {
    return this.xml_escape(text);
  } else {
    return "<" + name + ">" + this.xml_escape(text) + "</" + name + ">\n";
  }
};
XML.ObjTree.prototype.xml_escape = function(text) {
  return text.replace(/&/g, "&").replace(/</g, "<").replace(/>/g, ">").replace(/"/g, '"');
};
var lfXml2Json = function(xmlData) {
  return new XML.ObjTree().parseXML(xmlData);
};

// node_modules/@logicflow/extension/es/bpmn-adapter/index.js
var __extends7 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign5 = function() {
  __assign5 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
var __read = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var BpmnElements;
(function(BpmnElements3) {
  BpmnElements3["START"] = "bpmn:startEvent";
  BpmnElements3["END"] = "bpmn:endEvent";
  BpmnElements3["GATEWAY"] = "bpmn:exclusiveGateway";
  BpmnElements3["USER"] = "bpmn:userTask";
  BpmnElements3["SYSTEM"] = "bpmn:serviceTask";
  BpmnElements3["FLOW"] = "bpmn:sequenceFlow";
})(BpmnElements || (BpmnElements = {}));
var defaultAttrs = [
  "-name",
  "-id",
  "bpmn:incoming",
  "bpmn:outgoing",
  "-sourceRef",
  "-targetRef"
];
var defaultRetainedFields = [
  "properties",
  "startPoint",
  "endPoint",
  "pointsList"
];
function toXmlJson(retainedFields) {
  var fields = retainedFields ? defaultRetainedFields.concat(retainedFields) : defaultRetainedFields;
  return function(json) {
    function ToXmlJson(obj) {
      var xmlJson = {};
      if (typeof obj === "string") {
        return obj;
      }
      if (Array.isArray(obj)) {
        return obj.map(function(j) {
          return ToXmlJson(j);
        });
      }
      Object.entries(obj).forEach(function(_a) {
        var _b = __read(_a, 2), key = _b[0], value = _b[1];
        if (typeof value !== "object") {
          if (key.indexOf("-") === 0 || ["#text", "#cdata-section", "#comment"].includes(key)) {
            xmlJson[key] = value;
          } else {
            xmlJson["-".concat(key)] = value;
          }
        } else if (fields.includes(key)) {
          xmlJson["-".concat(key)] = ToXmlJson(value);
        } else {
          xmlJson[key] = ToXmlJson(value);
        }
      });
      return xmlJson;
    }
    return ToXmlJson(json);
  };
}
function toNormalJson(xmlJson) {
  var json = {};
  Object.entries(xmlJson).forEach(function(_a) {
    var _b = __read(_a, 2), key = _b[0], value = _b[1];
    if (key.indexOf("-") === 0) {
      json[key.substring(1)] = handleAttributes(value);
    } else if (typeof value === "string") {
      json[key] = value;
    } else if (Object.prototype.toString.call(value) === "[object Object]") {
      json[key] = toNormalJson(value);
    } else if (Array.isArray(value)) {
      json[key] = value.map(function(v) {
        return toNormalJson(v);
      });
    } else {
      json[key] = value;
    }
  });
  return json;
}
function convertLf2ProcessData(bpmnProcessData, data, retainedFields) {
  var nodeMap = /* @__PURE__ */ new Map();
  data.nodes.forEach(function(node) {
    var _a;
    var processNode = {
      "-id": node.id
      // 如果是xml的属性，json中属性用'-'开头
    };
    if ((_a = node.text) === null || _a === void 0 ? void 0 : _a.value) {
      processNode["-name"] = node.text.value;
    }
    if (node.properties) {
      var properties = toXmlJson(retainedFields)(node.properties);
      Object.assign(processNode, properties);
    }
    nodeMap.set(node.id, processNode);
    if (!bpmnProcessData[node.type]) {
      bpmnProcessData[node.type] = processNode;
    } else if (Array.isArray(bpmnProcessData[node.type])) {
      bpmnProcessData[node.type].push(processNode);
    } else {
      bpmnProcessData[node.type] = [bpmnProcessData[node.type], processNode];
    }
  });
  var sequenceFlow = data.edges.map(function(edge) {
    var _a, _b;
    var targetNode = nodeMap.get(edge.targetNodeId);
    if (!targetNode["bpmn:incoming"]) {
      targetNode["bpmn:incoming"] = edge.id;
    } else if (Array.isArray(targetNode["bpmn:incoming"])) {
      targetNode["bpmn:incoming"].push(edge.id);
    } else {
      targetNode["bpmn:incoming"] = [targetNode["bpmn:incoming"], edge.id];
    }
    var edgeConfig = {
      "-id": edge.id,
      "-sourceRef": edge.sourceNodeId,
      "-targetRef": edge.targetNodeId
    };
    if ((_a = edge.text) === null || _a === void 0 ? void 0 : _a.value) {
      edgeConfig["-name"] = (_b = edge.text) === null || _b === void 0 ? void 0 : _b.value;
    }
    if (edge.properties) {
      var properties = toXmlJson(retainedFields)(edge.properties);
      Object.assign(edgeConfig, properties);
    }
    return edgeConfig;
  });
  data.edges.forEach(function(edge) {
    var sourceNode = nodeMap.get(edge.sourceNodeId);
    if (!sourceNode["bpmn:outgoing"]) {
      sourceNode["bpmn:outgoing"] = edge.id;
    } else if (Array.isArray(sourceNode["bpmn:outgoing"])) {
      sourceNode["bpmn:outgoing"].push(edge.id);
    } else {
      sourceNode["bpmn:outgoing"] = [sourceNode["bpmn:outgoing"], edge.id];
    }
  });
  bpmnProcessData[BpmnElements.FLOW] = sequenceFlow;
}
function convertLf2DiagramData(bpmnDiagramData, data) {
  bpmnDiagramData["bpmndi:BPMNEdge"] = data.edges.map(function(edge) {
    var _a;
    var edgeId = edge.id;
    var pointsList = edge.pointsList.map(function(_a2) {
      var x = _a2.x, y = _a2.y;
      return {
        "-x": x,
        "-y": y
      };
    });
    var diagramData = {
      "-id": "".concat(edgeId, "_di"),
      "-bpmnElement": edgeId,
      "di:waypoint": pointsList
    };
    if ((_a = edge.text) === null || _a === void 0 ? void 0 : _a.value) {
      diagramData["bpmndi:BPMNLabel"] = {
        "dc:Bounds": {
          "-x": edge.text.x - edge.text.value.length * 10 / 2,
          "-y": edge.text.y - 7,
          "-width": edge.text.value.length * 10,
          "-height": 14
        }
      };
    }
    return diagramData;
  });
  bpmnDiagramData["bpmndi:BPMNShape"] = data.nodes.map(function(node) {
    var _a;
    var nodeId = node.id;
    var width = 100;
    var height = 80;
    var x = node.x, y = node.y;
    var shapeConfig = BpmnAdapter.shapeConfigMap.get(node.type);
    if (shapeConfig) {
      width = shapeConfig.width;
      height = shapeConfig.height;
    }
    x -= width / 2;
    y -= height / 2;
    var diagramData = {
      "-id": "".concat(nodeId, "_di"),
      "-bpmnElement": nodeId,
      "dc:Bounds": {
        "-x": x,
        "-y": y,
        "-width": width,
        "-height": height
      }
    };
    if ((_a = node.text) === null || _a === void 0 ? void 0 : _a.value) {
      diagramData["bpmndi:BPMNLabel"] = {
        "dc:Bounds": {
          "-x": node.text.x - node.text.value.length * 10 / 2,
          "-y": node.text.y - 7,
          "-width": node.text.value.length * 10,
          "-height": 14
        }
      };
    }
    return diagramData;
  });
}
function convertBpmn2LfData(bpmnData) {
  var nodes = [];
  var edges = [];
  var definitions = bpmnData["bpmn:definitions"];
  if (definitions) {
    var process_1 = definitions["bpmn:process"];
    Object.keys(process_1).forEach(function(key) {
      if (key.indexOf("bpmn:") === 0) {
        var value = process_1[key];
        if (key === BpmnElements.FLOW) {
          var bpmnEdges = definitions["bpmndi:BPMNDiagram"]["bpmndi:BPMNPlane"]["bpmndi:BPMNEdge"];
          edges = getLfEdges(value, bpmnEdges);
        } else {
          var shapes = definitions["bpmndi:BPMNDiagram"]["bpmndi:BPMNPlane"]["bpmndi:BPMNShape"];
          nodes = nodes.concat(getLfNodes(value, shapes, key));
        }
      }
    });
  }
  return {
    nodes,
    edges
  };
}
function getLfNodes(value, shapes, key) {
  var nodes = [];
  if (Array.isArray(value)) {
    value.forEach(function(val) {
      var shapeValue2;
      if (Array.isArray(shapes)) {
        shapeValue2 = shapes.find(function(shape) {
          return shape["-bpmnElement"] === val["-id"];
        });
      } else {
        shapeValue2 = shapes;
      }
      var node2 = getNodeConfig(shapeValue2, key, val);
      nodes.push(node2);
    });
  } else {
    var shapeValue = void 0;
    if (Array.isArray(shapes)) {
      shapeValue = shapes.find(function(shape) {
        return shape["-bpmnElement"] === value["-id"];
      });
    } else {
      shapeValue = shapes;
    }
    var node = getNodeConfig(shapeValue, key, value);
    nodes.push(node);
  }
  return nodes;
}
function getNodeConfig(shapeValue, type3, processValue) {
  var x = Number(shapeValue["dc:Bounds"]["-x"]);
  var y = Number(shapeValue["dc:Bounds"]["-y"]);
  var name = processValue["-name"];
  var shapeConfig = BpmnAdapter.shapeConfigMap.get(type3);
  if (shapeConfig) {
    x += shapeConfig.width / 2;
    y += shapeConfig.height / 2;
  }
  var properties;
  Object.entries(processValue).forEach(function(_a) {
    var _b = __read(_a, 2), key = _b[0], value = _b[1];
    if (defaultAttrs.indexOf(key) === -1) {
      if (!properties)
        properties = {};
      properties[key] = value;
    }
  });
  if (properties) {
    properties = toNormalJson(properties);
  }
  var text;
  if (name) {
    text = {
      x,
      y,
      value: name
    };
    if (shapeValue["bpmndi:BPMNLabel"] && shapeValue["bpmndi:BPMNLabel"]["dc:Bounds"]) {
      var textBounds = shapeValue["bpmndi:BPMNLabel"]["dc:Bounds"];
      text.x = Number(textBounds["-x"]) + Number(textBounds["-width"]) / 2;
      text.y = Number(textBounds["-y"]) + Number(textBounds["-height"]) / 2;
    }
  }
  var nodeConfig = {
    id: shapeValue["-bpmnElement"],
    type: type3,
    x,
    y,
    properties
  };
  if (text) {
    nodeConfig.text = text;
  }
  return nodeConfig;
}
function getLfEdges(value, bpmnEdges) {
  var edges = [];
  if (Array.isArray(value)) {
    value.forEach(function(val) {
      var edgeValue2;
      if (Array.isArray(bpmnEdges)) {
        edgeValue2 = bpmnEdges.find(function(edge) {
          return edge["-bpmnElement"] === val["-id"];
        });
      } else {
        edgeValue2 = bpmnEdges;
      }
      edges.push(getEdgeConfig(edgeValue2, val));
    });
  } else {
    var edgeValue = void 0;
    if (Array.isArray(bpmnEdges)) {
      edgeValue = bpmnEdges.find(function(edge) {
        return edge["-bpmnElement"] === value["-id"];
      });
    } else {
      edgeValue = bpmnEdges;
    }
    edges.push(getEdgeConfig(edgeValue, value));
  }
  return edges;
}
function getEdgeConfig(edgeValue, processValue) {
  var text;
  var textVal = processValue["-name"];
  if (textVal) {
    var textBounds = edgeValue["bpmndi:BPMNLabel"]["dc:Bounds"];
    var textLength_1 = 0;
    textVal.split("\n").forEach(function(textSpan) {
      if (textLength_1 < textSpan.length) {
        textLength_1 = textSpan.length;
      }
    });
    text = {
      value: textVal,
      x: Number(textBounds["-x"]) + textLength_1 * 10 / 2,
      y: Number(textBounds["-y"]) + 7
    };
  }
  var properties;
  Object.entries(processValue).forEach(function(_a) {
    var _b = __read(_a, 2), key = _b[0], value = _b[1];
    if (defaultAttrs.indexOf(key) === -1) {
      if (!properties)
        properties = {};
      properties[key] = value;
    }
  });
  if (properties) {
    properties = toNormalJson(properties);
  }
  var edge = {
    id: processValue["-id"],
    type: BpmnElements.FLOW,
    pointsList: edgeValue["di:waypoint"].map(function(point) {
      return {
        x: Number(point["-x"]),
        y: Number(point["-y"])
      };
    }),
    sourceNodeId: processValue["-sourceRef"],
    targetNodeId: processValue["-targetRef"],
    properties
  };
  if (text) {
    edge.text = text;
  }
  return edge;
}
var BpmnAdapter = (
  /** @class */
  function() {
    function BpmnAdapter2(_a) {
      var lf = _a.lf;
      var _this = this;
      this.adapterOut = function(data, retainedFields) {
        var bpmnProcessData = __assign5({}, _this.processAttributes);
        convertLf2ProcessData(bpmnProcessData, data, retainedFields);
        var bpmnDiagramData = {
          "-id": "BPMNPlane_1",
          "-bpmnElement": bpmnProcessData["-id"]
        };
        convertLf2DiagramData(bpmnDiagramData, data);
        var definitions = _this.definitionAttributes;
        definitions["bpmn:process"] = bpmnProcessData;
        definitions["bpmndi:BPMNDiagram"] = {
          "-id": "BPMNDiagram_1",
          "bpmndi:BPMNPlane": bpmnDiagramData
        };
        var bpmnData = {
          "bpmn:definitions": definitions
        };
        return bpmnData;
      };
      this.adapterIn = function(bpmnData) {
        if (bpmnData) {
          return convertBpmn2LfData(bpmnData);
        }
      };
      lf.adapterIn = function(data) {
        return _this.adapterIn(data);
      };
      lf.adapterOut = function(data, retainedFields) {
        return _this.adapterOut(data, retainedFields);
      };
      this.processAttributes = {
        "-isExecutable": "true",
        "-id": "Process_".concat(getBpmnId2())
      };
      this.definitionAttributes = {
        "-id": "Definitions_".concat(getBpmnId2()),
        "-xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance",
        "-xmlns:bpmn": "http://www.omg.org/spec/BPMN/20100524/MODEL",
        "-xmlns:bpmndi": "http://www.omg.org/spec/BPMN/20100524/DI",
        "-xmlns:dc": "http://www.omg.org/spec/DD/20100524/DC",
        "-xmlns:di": "http://www.omg.org/spec/DD/20100524/DI",
        "-targetNamespace": "http://logic-flow.org",
        "-exporter": "logicflow",
        "-exporterVersion": "1.2.0"
      };
    }
    BpmnAdapter2.prototype.setCustomShape = function(key, val) {
      BpmnAdapter2.shapeConfigMap.set(key, val);
    };
    BpmnAdapter2.pluginName = "bpmn-adapter";
    BpmnAdapter2.shapeConfigMap = /* @__PURE__ */ new Map();
    return BpmnAdapter2;
  }()
);
BpmnAdapter.shapeConfigMap.set(BpmnElements.START, {
  width: StartEventConfig.width,
  height: StartEventConfig.height
});
BpmnAdapter.shapeConfigMap.set(BpmnElements.END, {
  width: EndEventConfig.width,
  height: EndEventConfig.height
});
BpmnAdapter.shapeConfigMap.set(BpmnElements.GATEWAY, {
  width: ExclusiveGatewayConfig.width,
  height: ExclusiveGatewayConfig.height
});
BpmnAdapter.shapeConfigMap.set(BpmnElements.SYSTEM, {
  width: ServiceTaskConfig.width,
  height: ServiceTaskConfig.height
});
BpmnAdapter.shapeConfigMap.set(BpmnElements.USER, {
  width: UserTaskConfig.width,
  height: UserTaskConfig.height
});
var BpmnXmlAdapter = (
  /** @class */
  function(_super) {
    __extends7(BpmnXmlAdapter2, _super);
    function BpmnXmlAdapter2(data) {
      var _this = _super.call(this, data) || this;
      _this.adapterXmlIn = function(bpmnData) {
        var json = lfXml2Json(bpmnData);
        return _this.adapterIn(json);
      };
      _this.adapterXmlOut = function(data2, retainedFields) {
        var outData = _this.adapterOut(data2, retainedFields);
        return lfJson2Xml(outData);
      };
      var lf = data.lf;
      lf.adapterIn = _this.adapterXmlIn;
      lf.adapterOut = _this.adapterXmlOut;
      return _this;
    }
    BpmnXmlAdapter2.pluginName = "bpmnXmlAdapter";
    return BpmnXmlAdapter2;
  }(BpmnAdapter)
);

// node_modules/@logicflow/extension/es/bpmn-elements/utils.js
var utils_exports = {};
__export(utils_exports, {
  genBpmnId: () => genBpmnId,
  groupRule: () => groupRule
});
function groupRule() {
  var rule = {
    message: "分组外的节点不允许连接分组内的",
    validate: function(_sourceNode, _targetNode) {
      var isSourceNodeInsideTheGroup = !!_sourceNode.properties.parent;
      var isTargetNodeInsideTheGroup = !!_targetNode.properties.parent;
      return !(!isSourceNodeInsideTheGroup && isTargetNodeInsideTheGroup);
    }
  };
  this.targetRules.push(rule);
}
var IDs2 = (
  /** @class */
  function() {
    function IDs3() {
      globalThis._ids = this;
      this._ids = /* @__PURE__ */ new Set();
    }
    IDs3.prototype.generateId = function() {
      var id = "xxxxxxx".replace(/[x]/g, function(c) {
        var r = Math.random() * 16 | 0;
        var v = c === "x" ? r : r & 3 | 8;
        return v.toString(16);
      });
      return id;
    };
    IDs3.prototype.next = function() {
      var id = this.generateId();
      while (this._ids.has(id)) {
        id = this.generateId();
      }
      this._ids.add(id);
      return id;
    };
    return IDs3;
  }()
);
var ids3 = (globalThis === null || globalThis === void 0 ? void 0 : globalThis._ids) || new IDs2();
function genBpmnId() {
  return ids3.next();
}

// node_modules/@logicflow/extension/es/bpmn-elements/presets/Event/EndEventFactory.js
var __extends8 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign6 = function() {
  __assign6 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign6.apply(this, arguments);
};
var __read2 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
function EndEventFactory(lf) {
  var _a = __read2(lf.useDefinition(), 1), definition = _a[0];
  var view = (
    /** @class */
    function(_super) {
      __extends8(view2, _super);
      function view2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      view2.prototype.getAnchorStyle = function() {
        return {
          visibility: "hidden"
        };
      };
      view2.prototype.getShape = function() {
        var _a2;
        var model2 = this.props.model;
        var style2 = model2.getNodeStyle();
        var _b = model2, x = _b.x, y = _b.y, r = _b.r, width = _b.width, height = _b.height, properties = _b.properties;
        var outCircle = _super.prototype.getShape.call(this);
        var definitionType = properties.definitionType;
        var icon = (((_a2 = definition.endEvent) === null || _a2 === void 0 ? void 0 : _a2.get(definitionType)) || {}).icon;
        var i = Array.isArray(icon) ? _.apply(void 0, __spreadArray([
          "g",
          {
            transform: "matrix(1 0 0 1 ".concat(x - width / 2, " ").concat(y - height / 2, ")")
          }
        ], __read2(icon), false)) : _("path", {
          transform: "matrix(1 0 0 1 ".concat(x - width / 2, " ").concat(y - height / 2, ")"),
          d: icon,
          style: "fill: black; stroke-linecap: round; stroke-linejoin: round; stroke: white; stroke-width: 1px;"
        });
        return _("g", {}, outCircle, _("circle", __assign6(__assign6({}, style2), { strokeWidth: 2, cx: x, cy: y, r: r - 2 })), i);
      };
      return view2;
    }(CircleNode)
  );
  var model = (
    /** @class */
    function(_super) {
      __extends8(model2, _super);
      function model2(data, graphModel) {
        var _this = this;
        var _a2, _b, _c;
        if (!data.id) {
          data.id = "Event_".concat(genBpmnId());
        }
        if (!data.text) {
          data.text = "";
        }
        if (data.text && typeof data.text === "string") {
          data.text = {
            value: data.text,
            x: data.x,
            y: data.y + 40
          };
        }
        var _d = (((_a2 = definition.endEvent) === null || _a2 === void 0 ? void 0 : _a2.get((_b = data.properties) === null || _b === void 0 ? void 0 : _b.definitionType)) || {}).properties, properties = _d === void 0 ? {} : _d;
        data.properties = __assign6(__assign6({}, properties), data.properties);
        ((_c = data.properties) === null || _c === void 0 ? void 0 : _c.definitionType) && (data.properties.definitionId = "Definition_".concat(genBpmnId()));
        _this = _super.call(this, data, graphModel) || this;
        groupRule.call(_this);
        return _this;
      }
      model2.prototype.setAttributes = function() {
        this.r = 18;
      };
      model2.prototype.getConnectedSourceRules = function() {
        var _this = this;
        var rules = _super.prototype.getConnectedSourceRules.call(this);
        var notAsSource = {
          message: "结束节点不能作为边的起点",
          validate: function(source, _target) {
            console.log("_target", _target);
            return source !== _this;
          }
        };
        rules.push(notAsSource);
        return rules;
      };
      return model2;
    }(CircleNodeModel)
  );
  return {
    type: "bpmn:endEvent",
    view,
    model
  };
}

// node_modules/@logicflow/extension/es/bpmn-elements/presets/Event/IntermediateCatchEvent.js
var __extends9 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign7 = function() {
  __assign7 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign7.apply(this, arguments);
};
var __read3 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray2 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
function IntermediateCatchEventFactory(lf) {
  var _a = __read3(lf.useDefinition(), 1), definition = _a[0];
  var view = (
    /** @class */
    function(_super) {
      __extends9(view2, _super);
      function view2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      view2.prototype.getAnchorStyle = function() {
        return {
          visibility: "hidden"
        };
      };
      view2.prototype.getShape = function() {
        var _a2;
        var model2 = this.props.model;
        var style2 = model2.getNodeStyle();
        var _b = model2, x = _b.x, y = _b.y, r = _b.r, width = _b.width, height = _b.height, properties = _b.properties;
        var definitionType = properties.definitionType;
        var icon = (((_a2 = definition.intermediateCatchEvent) === null || _a2 === void 0 ? void 0 : _a2.get(definitionType)) || {}).icon;
        var i = Array.isArray(icon) ? _.apply(void 0, __spreadArray2([
          "g",
          {
            transform: "matrix(1 0 0 1 ".concat(x - width / 2, " ").concat(y - height / 2, ")")
          }
        ], __read3(icon), false)) : _("path", {
          transform: "matrix(1 0 0 1 ".concat(x - width / 2, " ").concat(y - height / 2, ")"),
          d: icon
        });
        return _("g", {}, _("circle", __assign7(__assign7({}, style2), { cx: x, cy: y, r, strokeWidth: 1.5 })), _("circle", __assign7(__assign7({}, style2), { cx: x, cy: y, r: r - 3, strokeWidth: 1.5 })), i);
      };
      return view2;
    }(CircleNode)
  );
  var model = (
    /** @class */
    function(_super) {
      __extends9(model2, _super);
      function model2(data, graphModel) {
        var _this = this;
        var _a2, _b, _c;
        if (!data.id) {
          data.id = "Event_".concat(genBpmnId());
        }
        if (!data.text) {
          data.text = "";
        }
        if (data.text && typeof data.text === "string") {
          data.text = {
            value: data.text,
            x: data.x,
            y: data.y + 40
          };
        }
        var _d = (((_a2 = definition.intermediateCatchEvent) === null || _a2 === void 0 ? void 0 : _a2.get((_b = data.properties) === null || _b === void 0 ? void 0 : _b.definitionType)) || {}).properties, properties = _d === void 0 ? {} : _d;
        data.properties = __assign7(__assign7({}, properties), data.properties);
        ((_c = data.properties) === null || _c === void 0 ? void 0 : _c.definitionType) && (data.properties.definitionId = "Definition_".concat(genBpmnId()));
        _this = _super.call(this, data, graphModel) || this;
        groupRule.call(_this);
        return _this;
      }
      model2.prototype.setAttributes = function() {
        this.r = 18;
      };
      return model2;
    }(CircleNodeModel)
  );
  return {
    type: "bpmn:intermediateCatchEvent",
    view,
    model
  };
}

// node_modules/@logicflow/extension/es/bpmn-elements/presets/Event/StartEventFactory.js
var __extends10 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign8 = function() {
  __assign8 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign8.apply(this, arguments);
};
var __read4 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray3 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
function StartEventFactory(lf) {
  var _a = __read4(lf.useDefinition(), 1), definition = _a[0];
  var view = (
    /** @class */
    function(_super) {
      __extends10(view2, _super);
      function view2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      view2.prototype.getAnchorStyle = function() {
        return {
          visibility: "hidden"
        };
      };
      view2.prototype.getShape = function() {
        var _a2;
        var model2 = this.props.model;
        var style2 = model2.getNodeStyle();
        var _b = model2, x = _b.x, y = _b.y, r = _b.r, width = _b.width, height = _b.height, properties = _b.properties;
        var definitionType = properties.definitionType, isInterrupting = properties.isInterrupting;
        var icon = (((_a2 = definition.startEvent) === null || _a2 === void 0 ? void 0 : _a2.get(definitionType)) || {}).icon;
        var i = Array.isArray(icon) ? _.apply(void 0, __spreadArray3([
          "g",
          {
            transform: "matrix(1 0 0 1 ".concat(x - width / 2, " ").concat(y - height / 2, ")")
          }
        ], __read4(icon), false)) : _("path", {
          transform: "matrix(1 0 0 1 ".concat(x - width / 2, " ").concat(y - height / 2, ")"),
          d: icon,
          style: "fill: white; stroke-linecap: round; stroke-linejoin: round; stroke: rgb(34, 36, 42); stroke-width: 1px;"
        });
        return _("g", {}, _("circle", __assign8(__assign8({}, style2), { cx: x, cy: y, r, strokeDasharray: isInterrupting ? "5,5" : "", strokeWidth: 2 })), i);
      };
      return view2;
    }(CircleNode)
  );
  var model = (
    /** @class */
    function(_super) {
      __extends10(model2, _super);
      function model2(data, graphModel) {
        var _a2, _b, _c;
        if (!data.id) {
          data.id = "Event_".concat(genBpmnId());
        }
        if (!data.text) {
          data.text = "";
        }
        if (data.text && typeof data.text === "string") {
          data.text = {
            value: data.text,
            x: data.x,
            y: data.y + 40
          };
        }
        var _d = (((_a2 = definition.startEvent) === null || _a2 === void 0 ? void 0 : _a2.get((_b = data.properties) === null || _b === void 0 ? void 0 : _b.definitionType)) || {}).properties, properties = _d === void 0 ? {} : _d;
        data.properties = __assign8(__assign8({}, properties), data.properties);
        ((_c = data.properties) === null || _c === void 0 ? void 0 : _c.definitionType) && (data.properties.definitionId = "Definition_".concat(genBpmnId()));
        return _super.call(this, data, graphModel) || this;
      }
      model2.prototype.setAttributes = function() {
        this.r = 18;
      };
      model2.prototype.getConnectedTargetRules = function() {
        var _this = this;
        var rules = _super.prototype.getConnectedTargetRules.call(this);
        var notAsSource = {
          message: "起始节点不能作为边的终点",
          validate: function(_source, target) {
            if (target === _this) {
              return false;
            }
            return true;
          }
        };
        rules.push(notAsSource);
        return rules;
      };
      return model2;
    }(CircleNodeModel)
  );
  return {
    type: "bpmn:startEvent",
    view,
    model
  };
}

// node_modules/@logicflow/extension/es/bpmn-elements/presets/Event/boundaryEventFactory.js
var __extends11 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign9 = function() {
  __assign9 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign9.apply(this, arguments);
};
var __read5 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray4 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
function BoundaryEventFactory(lf) {
  var _a = __read5(lf.useDefinition(), 1), definition = _a[0];
  var view = (
    /** @class */
    function(_super) {
      __extends11(view2, _super);
      function view2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      view2.prototype.getAnchorStyle = function() {
        return {
          visibility: "hidden"
        };
      };
      view2.prototype.getShape = function() {
        var _a2;
        var model2 = this.props.model;
        var style2 = model2.getNodeStyle();
        var _b = model2, x = _b.x, y = _b.y, r = _b.r, width = _b.width, height = _b.height, properties = _b.properties;
        var definitionType = properties.definitionType, cancelActivity = properties.cancelActivity;
        var icon = (((_a2 = definition.boundaryEvent) === null || _a2 === void 0 ? void 0 : _a2.get(definitionType)) || {}).icon;
        var i = Array.isArray(icon) ? _.apply(void 0, __spreadArray4([
          "g",
          {
            transform: "matrix(1 0 0 1 ".concat(x - width / 2, " ").concat(y - height / 2, ")")
          }
        ], __read5(icon), false)) : _("path", {
          transform: "matrix(1 0 0 1 ".concat(x - width / 2, " ").concat(y - height / 2, ")"),
          d: icon
        });
        return _("g", {}, _("circle", __assign9(__assign9({}, style2), { cx: x, cy: y, r, strokeDasharray: cancelActivity ? "" : "5,5", strokeWidth: 1.5 })), _("circle", __assign9(__assign9({}, style2), { cx: x, cy: y, r: r - 3, strokeDasharray: cancelActivity ? "" : "5,5", strokeWidth: 1.5 })), i);
      };
      return view2;
    }(CircleNode)
  );
  var model = (
    /** @class */
    function(_super) {
      __extends11(model2, _super);
      function model2(data, graphModel) {
        var _this = this;
        var _a2, _b, _c;
        if (!data.id) {
          data.id = "Event_".concat(genBpmnId());
        }
        if (!data.text) {
          data.text = "";
        }
        if (data.text && typeof data.text === "string") {
          data.text = {
            value: data.text,
            x: data.x,
            y: data.y + 40
          };
        }
        var _d = (((_a2 = definition.boundaryEvent) === null || _a2 === void 0 ? void 0 : _a2.get((_b = data.properties) === null || _b === void 0 ? void 0 : _b.definitionType)) || {}).properties, properties = _d === void 0 ? {} : _d;
        data.properties = __assign9(__assign9({ attachedToRef: "", cancelActivity: true }, properties), data.properties);
        ((_c = data.properties) === null || _c === void 0 ? void 0 : _c.definitionType) && (data.properties.definitionId = "Definition_".concat(genBpmnId()));
        _this = _super.call(this, data, graphModel) || this;
        groupRule.call(_this);
        return _this;
      }
      model2.prototype.initNodeData = function(data) {
        _super.prototype.initNodeData.call(this, data);
        this.r = 20;
        this.autoToFront = false;
        this.zIndex = 99999;
      };
      model2.prototype.setAttributes = function() {
        this.r = 18;
      };
      return model2;
    }(CircleNodeModel)
  );
  return {
    type: "bpmn:boundaryEvent",
    view,
    model
  };
}

// node_modules/@logicflow/extension/es/bpmn-elements/presets/Event/IntermediateThrowEvent.js
var __extends12 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign10 = function() {
  __assign10 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign10.apply(this, arguments);
};
var __read6 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray5 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
function IntermediateThrowEventFactory(lf) {
  var _a = __read6(lf.useDefinition(), 1), definition = _a[0];
  var view = (
    /** @class */
    function(_super) {
      __extends12(view2, _super);
      function view2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      view2.prototype.getAnchorStyle = function() {
        return {
          visibility: "hidden"
        };
      };
      view2.prototype.getShape = function() {
        var _a2;
        var model2 = this.props.model;
        var style2 = model2.getNodeStyle();
        var _b = model2, x = _b.x, y = _b.y, r = _b.r, width = _b.width, height = _b.height, properties = _b.properties;
        var definitionType = properties.definitionType;
        var icon = (((_a2 = definition.intermediateThrowEvent) === null || _a2 === void 0 ? void 0 : _a2.get(definitionType)) || {}).icon;
        var i = Array.isArray(icon) ? _.apply(void 0, __spreadArray5([
          "g",
          {
            transform: "matrix(1 0 0 1 ".concat(x - width / 2, " ").concat(y - height / 2, ")")
          }
        ], __read6(icon), false)) : _("path", {
          transform: "matrix(1 0 0 1 ".concat(x - width / 2, " ").concat(y - height / 2, ")"),
          d: icon,
          style: "fill: black"
        });
        return _("g", {}, _("circle", __assign10(__assign10({}, style2), { cx: x, cy: y, r, strokeWidth: 1.5 })), _("circle", __assign10(__assign10({}, style2), { cx: x, cy: y, r: r - 3, strokeWidth: 1.5 })), i);
      };
      return view2;
    }(CircleNode)
  );
  var model = (
    /** @class */
    function(_super) {
      __extends12(model2, _super);
      function model2(data, graphModel) {
        var _this = this;
        var _a2, _b, _c;
        if (!data.id) {
          data.id = "Event_".concat(genBpmnId());
        }
        if (!data.text) {
          data.text = "";
        }
        if (data.text && typeof data.text === "string") {
          data.text = {
            value: data.text,
            x: data.x,
            y: data.y + 40
          };
        }
        var _d = (((_a2 = definition.intermediateThrowEvent) === null || _a2 === void 0 ? void 0 : _a2.get((_b = data.properties) === null || _b === void 0 ? void 0 : _b.definitionType)) || {}).properties, properties = _d === void 0 ? {} : _d;
        data.properties = __assign10(__assign10({}, properties), data.properties);
        ((_c = data.properties) === null || _c === void 0 ? void 0 : _c.definitionType) && (data.properties.definitionId = "Definition_".concat(genBpmnId()));
        _this = _super.call(this, data, graphModel) || this;
        groupRule.call(_this);
        return _this;
      }
      model2.prototype.setAttributes = function() {
        this.r = 18;
      };
      return model2;
    }(CircleNodeModel)
  );
  return {
    type: "bpmn:intermediateThrowEvent",
    view,
    model
  };
}

// node_modules/@logicflow/extension/es/bpmn-elements/presets/Event/index.js
function registerEventNodes(lf) {
  lf.register(StartEventFactory(lf));
  lf.register(EndEventFactory(lf));
  lf.register(IntermediateCatchEventFactory(lf));
  lf.register(IntermediateThrowEventFactory(lf));
  lf.register(BoundaryEventFactory(lf));
}

// node_modules/@logicflow/extension/es/bpmn-elements/presets/icons.js
var icons_exports = {};
__export(icons_exports, {
  compensationIcon: () => compensationIcon,
  conditionalIcon: () => conditionalIcon,
  errorIcon: () => errorIcon,
  escalationIcon: () => escalationIcon,
  exclusiveIcon: () => exclusiveIcon,
  inclusiveIcon: () => inclusiveIcon,
  linkIcon: () => linkIcon,
  loopMarker: () => loopMarker,
  manualTaskIcon: () => manualTaskIcon,
  messageIcon: () => messageIcon,
  parallelIcon: () => parallelIcon,
  parallelMarker: () => parallelMarker,
  scriptTaskIcon: () => scriptTaskIcon,
  sequentialMarker: () => sequentialMarker,
  serviceTaskIcon: () => serviceTaskIcon,
  signalIcon: () => signalIcon,
  style: () => style,
  terminateIcon: () => terminateIcon,
  timerIcon: () => timerIcon,
  userTaskIcon: () => userTaskIcon
});
var messageIcon = "m 8.459999999999999,11.34 l 0,12.6 l 18.900000000000002,0 l 0,-12.6 z l 9.450000000000001,5.4 l 9.450000000000001,-5.4";
var timerIcon = [
  _("circle", {
    cx: 18,
    cy: 18,
    r: 11,
    style: "stroke-linecap: round;stroke-linejoin: round;stroke: rgb(34, 36, 42);stroke-width: 2px;fill: white"
  }),
  _("path", {
    d: "M 18,18 l 2.25,-7.5 m -2.25,7.5 l 5.25,1.5",
    style: "fill: none; stroke-linecap: round; stroke-linejoin: round; stroke: rgb(34, 36, 42); stroke-width: 2px;"
  }),
  _("path", {
    d: "M 18,18 m 0,7.5 l -0,2.25",
    transform: "rotate(0,18,18)",
    style: "fill: none; stroke-linecap: round; stroke-linejoin: round; stroke: rgb(34, 36, 42); stroke-width: 1px;"
  }),
  _("path", {
    d: "M 18,18 m 0,7.5 l -0,2.25",
    transform: "rotate(30,18,18)",
    style: "fill: none; stroke-linecap: round; stroke-linejoin: round; stroke: rgb(34, 36, 42); stroke-width: 1px;"
  }),
  _("path", {
    d: "M 18,18 m 0,7.5 l -0,2.25",
    transform: "rotate(60,18,18)",
    style: "fill: none; stroke-linecap: round; stroke-linejoin: round; stroke: rgb(34, 36, 42); stroke-width: 1px;"
  }),
  _("path", {
    d: "M 18,18 m 0,7.5 l -0,2.25",
    transform: "rotate(90,18,18)",
    style: "fill: none; stroke-linecap: round; stroke-linejoin: round; stroke: rgb(34, 36, 42); stroke-width: 1px;"
  }),
  _("path", {
    d: "M 18,18 m 0,7.5 l -0,2.25",
    transform: "rotate(120,18,18)",
    style: "fill: none; stroke-linecap: round; stroke-linejoin: round; stroke: rgb(34, 36, 42); stroke-width: 1px;"
  }),
  _("path", {
    d: "M 18,18 m 0,7.5 l -0,2.25",
    transform: "rotate(150,18,18)",
    style: "fill: none; stroke-linecap: round; stroke-linejoin: round; stroke: rgb(34, 36, 42); stroke-width: 1px;"
  }),
  _("path", {
    d: "M 18,18 m 0,7.5 l -0,2.25",
    transform: "rotate(180,18,18)",
    style: "fill: none; stroke-linecap: round; stroke-linejoin: round; stroke: rgb(34, 36, 42); stroke-width: 1px;"
  }),
  _("path", {
    d: "M 18,18 m 0,7.5 l -0,2.25",
    transform: "rotate(210,18,18)",
    style: "fill: none; stroke-linecap: round; stroke-linejoin: round; stroke: rgb(34, 36, 42); stroke-width: 1px;"
  }),
  _("path", {
    d: "M 18,18 m 0,7.5 l -0,2.25",
    transform: "rotate(240,18,18)",
    style: "fill: none; stroke-linecap: round; stroke-linejoin: round; stroke: rgb(34, 36, 42); stroke-width: 1px;"
  }),
  _("path", {
    d: "M 18,18 m 0,7.5 l -0,2.25",
    transform: "rotate(270,18,18)",
    style: "fill: none; stroke-linecap: round; stroke-linejoin: round; stroke: rgb(34, 36, 42); stroke-width: 1px;"
  }),
  _("path", {
    d: "M 18,18 m 0,7.5 l -0,2.25",
    transform: "rotate(300,18,18)",
    style: "fill: none; stroke-linecap: round; stroke-linejoin: round; stroke: rgb(34, 36, 42); stroke-width: 1px;"
  }),
  _("path", {
    d: "M 18,18 m 0,7.5 l -0,2.25",
    transform: "rotate(330,18,18)",
    style: "fill: none; stroke-linecap: round; stroke-linejoin: round; stroke: rgb(34, 36, 42); stroke-width: 1px;"
  })
];
var errorIcon = "m 7.2,25.991999999999997 0.09350000000000001,-0.025300000000000003 7.3392,-9.610700000000001 7.667000000000001,8.9661 4.7003,-18.2204 -5.8707,11.6501 -7.299600000000001,-9.585400000000002 z";
var escalationIcon = "M 18,7.2 l 8,20 l -8,-7 l -8,7 Z";
var compensationIcon = "m 7.92,18 9,-6.5 0,13 z m 9.3,-0.4 8.7,-6.1 0,13 -8.7,-6.1 z";
var conditionalIcon = "M 10.5,8.5 l 14.5,0 l 0,18 l -14.5,0 Z M 12.5,11.5 l 10.5,0 M 12.5,14.5 l 10.5,0 M 12.5,17.5 l 10.5,0 M 12.5,20.5 l 10.5,0 M 12.5,23.5 l 10.5,0 M 12.5,26.5 l 10.5,0 ";
var linkIcon = "m 20.52,9.468 0,4.4375 -13.5,0 0,6.75 13.5,0 0,4.4375 9.84375,-7.8125 -9.84375,-7.8125 z";
var signalIcon = "M 18,7.2 l 9,16.2 l -18,0 Z";
var terminateIcon = [
  _("circle", {
    cx: 18,
    cy: 18,
    r: 10,
    style: "stroke-linecap: round; stroke-linejoin: round; stroke: rgb(34, 36, 42); stroke-width: 4px; fill: rgb(34, 36, 42);"
  })
];
var exclusiveIcon = "m 16,15 7.42857142857143,9.714285714285715 -7.42857142857143,9.714285714285715 3.428571428571429,0 5.714285714285715,-7.464228571428572 5.714285714285715,7.464228571428572 3.428571428571429,0 -7.42857142857143,-9.714285714285715 7.42857142857143,-9.714285714285715 -3.428571428571429,0 -5.714285714285715,7.464228571428572 -5.714285714285715,-7.464228571428572 -3.428571428571429,0 z";
var parallelIcon = "m 23,10 0,12.5 -12.5,0 0,5 12.5,0 0,12.5 5,0 0,-12.5 12.5,0 0,-5 -12.5,0 0,-12.5 -5,0 z";
var inclusiveIcon = _("circle", {
  cx: 25,
  cy: 25,
  r: 13,
  style: "stroke-linecap: round; stroke-linejoin: round; stroke: rgb(34, 36, 42); stroke-width: 2.5px; fill: white;"
});
var serviceTaskIcon = "M882.527918 434.149934c-2.234901-5.303796-7.311523-8.853645-13.059434-9.138124l-61.390185-3.009544c-6.635117-20.973684-15.521508-41.175795-26.513864-60.282968l42.051745-47.743374c4.308119-4.889357 4.955872-12.004405 1.602498-17.59268-46.384423-77.30362-103.969956-101.422947-106.400309-102.410438-5.332449-2.170432-11.432377-1.090844-15.693424 2.77009L654.674467 240.664222c-17.004279-8.654101-35.092239-15.756869-53.995775-21.210068l-3.26537-66.490344c-0.280386-5.747911-3.833305-10.824533-9.134031-13.059434-1.683339-0.709151-30.193673-12.391215-76.866668-12.051477-46.672996-0.339738-75.18333 11.342326-76.866668 12.051477-5.300726 2.234901-8.853645 7.311523-9.134031 13.059434l-3.26537 66.490344c-18.903535 5.453199-36.991496 12.555967-53.995775 21.210068l-48.450479-43.922349c-4.261047-3.860934-10.360975-4.940522-15.693424-2.77009-2.430352 0.98749-60.015885 25.106818-106.400309 102.410438-3.353374 5.588275-2.705622 12.703323 1.602498 17.59268l42.051745 47.743374c-10.992355 19.107173-19.878746 39.309284-26.513864 60.282968l-61.390185 3.009544c-5.747911 0.284479-10.824533 3.834328-13.059434 9.138124-1.01512 2.415003-24.687262 60.190871-2.822278 147.651828 1.583055 6.324032 7.072069 10.893094 13.57518 11.308557 5.892197 0.37146 11.751648 0.523933 17.419741 0.667196 14.498202 0.372483 28.193109 0.723477 40.908712 4.63353 4.212952 1.294482 6.435573 8.270361 9.349949 18.763342 1.287319 4.640694 2.617617 9.43693 4.484128 14.010085 1.794879 4.393054 3.75758 8.570189 5.66093 12.607132 1.302669 2.765997 2.529613 5.380544 3.689019 8.018627 2.986007 6.803963 2.682086 9.773598 2.578732 10.349719-3.061732 3.672646-6.391571 7.238868-9.91379 11.015891-1.810229 1.943258-3.680832 3.949962-5.523807 5.980201l-22.560832 24.8909c-3.865028 4.261047-4.940522 10.365068-2.774183 15.693424 0.991584 2.426259 25.102724 60.011792 102.414531 106.400309 5.588275 3.353374 12.703323 2.701528 17.591657-1.603521l23.476691-20.682042c2.346441-2.061962 4.64888-4.336772 6.875594-6.534833 9.05319-8.93858 14.018272-12.95608 17.73185-11.576663 3.305279 1.222851 6.907317 3.166109 10.720156 5.228071 3.325745 1.794879 6.764054 3.650133 10.465352 5.288446 6.016017 2.662643 12.120039 4.688789 18.019399 6.65149 6.827499 2.266623 13.279445 4.409426 18.819624 7.275707 1.518586 0.782829 1.926886 0.994654 2.358721 7.830339 0.726547 11.496845 1.25048 23.276123 1.753947 34.672684 0.264013 5.900384 0.528026 11.803837 0.815575 17.700127 0.284479 5.743818 3.833305 10.82044 9.138124 13.05534 1.654686 0.698918 29.371958 12.063757 74.869175 12.063757 0.328481 0 3.65832 0 3.986801 0 45.497217 0 73.214489-11.364839 74.869175-12.063757 5.304819-2.234901 8.853645-7.311523 9.138124-13.05534 0.287549-5.89629 0.551562-11.799744 0.815575-17.700127 0.503467-11.396561 1.027399-23.175839 1.753947-34.672684 0.431835-6.835685 0.840134-7.04751 2.358721-7.830339 5.54018-2.866281 11.992125-5.009084 18.819624-7.275707 5.89936-1.962701 12.003382-3.988848 18.019399-6.65149 3.701299-1.638313 7.139607-3.493567 10.465352-5.288446 3.812839-2.061962 7.414877-4.00522 10.720156-5.228071 3.713578-1.379417 8.67866 2.638083 17.73185 11.576663 2.226714 2.198062 4.529153 4.472871 6.875594 6.534833l23.476691 20.682042c4.888334 4.305049 12.003382 4.956895 17.591657 1.603521 77.311807-46.388517 101.422947-103.97405 102.414531-106.400309 2.166339-5.328355 1.090844-11.432377-2.774183-15.693424l-22.560832-24.8909c-1.842974-2.030239-3.713578-4.036943-5.523807-5.980201-3.52222-3.777023-6.852058-7.343245-9.91379-11.015891-0.103354-0.576121-0.407276-3.545756 2.578732-10.349719 1.159406-2.638083 2.38635-5.252631 3.689019-8.018627 1.90335-4.036943 3.866051-8.214079 5.66093-12.607132 1.866511-4.573155 3.196809-9.369392 4.484128-14.010085 2.914376-10.492982 5.136997-17.46886 9.349949-18.763342 12.715603-3.910053 26.41051-4.261047 40.908712-4.63353 5.668093-0.143263 11.527544-0.295735 17.419741-0.667196 6.503111-0.415462 11.992125-4.984524 13.57518-11.308557C907.21518 494.340805 883.543038 436.564937 882.527918 434.149934zM643.49894 643.761929c-35.280528 35.280528-82.191954 54.711066-132.086317 54.711066s-96.806813-19.430538-132.086317-54.711066c-35.280528-35.279504-54.711066-82.191954-54.711066-132.086317 0-49.894364 19.430538-96.80272 54.711066-132.082224 35.283598-35.284621 82.191954-54.711066 132.086317-54.711066s96.80579 19.426445 132.086317 54.711066c35.279504 35.279504 54.711066 82.187861 54.711066 132.082224C698.210006 561.569976 678.782537 608.482425 643.49894 643.761929z";
var userTaskIcon = "M655.807326 287.35973m-223.989415 0a218.879 218.879 0 1 0 447.978829 0 218.879 218.879 0 1 0-447.978829 0ZM1039.955839 895.482975c-0.490184-212.177424-172.287821-384.030443-384.148513-384.030443-211.862739 0-383.660376 171.85302-384.15056 384.030443L1039.955839 895.482975z";
var scriptTaskIcon = "M6.402,0.5H20.902C20.902,0.5,15.069,3.333,15.069,6.083S19.486,12.083,19.486,15.25S15.319,20.333,15.319,20.333H0.235C0.235,20.333,5.235,17.665999999999997,5.235,15.332999999999998S0.6520000000000001,8.582999999999998,0.6520000000000001,6.082999999999998S6.402,0.5,6.402,0.5ZM3.5,4.5L13.5,4.5M3.8,8.5L13.8,8.5M6.3,12.5L16.3,12.5M6.5,16.5L16.5,16.5";
var manualTaskIcon = "M0.5,3.751L4.583,0.5009999999999999C4.583,0.5009999999999999,15.749,0.5839999999999999,16.666,0.5839999999999999S14.249,3.5009999999999994,15.166,3.5009999999999994S26.833,3.5009999999999994,27.75,3.5009999999999994C28.916,5.209,27.582,6.667999999999999,26.916,7.167999999999999S27.791,9.084999999999999,25.916,11.584999999999999C25.166,11.834999999999999,26.666,13.459999999999999,24.583000000000002,14.918C23.416,15.501,25.166,16.46,23.333000000000002,17.750999999999998C22.166,17.750999999999998,2.5000000000000036,17.833999999999996,2.5000000000000036,17.833999999999996L0.5000000000000036,16.500999999999998V3.751ZM13.5,7L27,7M13.5,11L26,11M14,14.5L25,14.5M8.2,3.1L15,3.1";
var style = {
  throw: "fill: rgb(34, 36, 42); stroke-linecap: round; stroke-linejoin: round; stroke: white; stroke-width: 1px;",
  catch: "fill: white; stroke-linecap: round; stroke-linejoin: round; stroke: rgb(34, 36, 42); stroke-width: 1px;",
  nonIntermediate: "stroke-width: 1.5; stroke-dash-array: 6",
  intermediate: "stroke-width: 1.5"
};
var parallelMarker = "m44,60 m 3,2 l 0,10 m 3,-10 l 0,10 m 3,-10 l 0,10";
var sequentialMarker = "m47,61 m 0,3 l 10,0 m -10,3 l 10,0 m -10,3 l 10,0";
var loopMarker = "m 50,73 c 3.526979,0 6.386161,-2.829858 6.386161,-6.320661 0,-3.490806 -2.859182,-6.320661 -6.386161,-6.320661 -3.526978,0 -6.38616,2.829855 -6.38616,6.320661 0,1.745402 0.714797,3.325567 1.870463,4.469381 0.577834,0.571908 1.265885,1.034728 2.029916,1.35457 l -0.718163,-3.909793 m 0.718163,3.909793 -3.885211,0.802902";

// node_modules/@logicflow/extension/es/bpmn-elements/presets/Gateway/gateway.js
var __extends13 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign11 = function() {
  __assign11 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign11.apply(this, arguments);
};
var gateway = {
  exclusive: 0,
  inclusive: 1,
  parallel: 2
};
var gatewayComposable = [
  [1, 1, 0],
  [0, 0, 1],
  [0, 1, 1]
];
function GatewayNodeFactory(type3, icon, props) {
  var view = (
    /** @class */
    function(_super) {
      __extends13(view2, _super);
      function view2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      view2.prototype.getShape = function() {
        var model2 = this.props.model;
        var _a = model2, x = _a.x, y = _a.y, width = _a.width, height = _a.height, points = _a.points;
        var style2 = model2.getNodeStyle();
        return _("g", {
          transform: "matrix(1 0 0 1 ".concat(x - width / 2, " ").concat(y - height / 2, ")")
        }, _(Polygon, __assign11(__assign11({}, style2), { x, y, points })), typeof icon === "string" ? _("path", __assign11(__assign11({ d: icon }, style2), { fill: "rgb(34, 36, 42)", strokeWidth: 1 })) : icon);
      };
      return view2;
    }(PolygonNode)
  );
  var model = (
    /** @class */
    function(_super) {
      __extends13(model2, _super);
      function model2(data, graphModel) {
        var _this = this;
        if (!data.id) {
          data.id = "Gateway_".concat(genBpmnId());
        }
        if (!data.text) {
          data.text = "";
        }
        if (data.text && typeof data.text === "string") {
          data.text = {
            value: data.text,
            x: data.x,
            y: data.y + 40
          };
        }
        data.properties = __assign11(__assign11({}, props || {}), data.properties);
        _this = _super.call(this, data, graphModel) || this;
        _this.points = [
          [25, 0],
          [50, 25],
          [25, 50],
          [0, 25]
        ];
        groupRule.call(_this);
        return _this;
      }
      return model2;
    }(PolygonNodeModel)
  );
  return {
    type: type3,
    view,
    model
  };
}

// node_modules/@logicflow/extension/es/bpmn-elements/presets/Gateway/index.js
function registerGatewayNodes(lf) {
  var ExclusiveGateway2 = GatewayNodeFactory("bpmn:exclusiveGateway", exclusiveIcon);
  var ParallelGateway = GatewayNodeFactory("bpmn:parallelGateway", parallelIcon);
  var InclusiveGateway = GatewayNodeFactory("bpmn:inclusiveGateway", inclusiveIcon);
  lf.register(ExclusiveGateway2);
  lf.register(InclusiveGateway);
  lf.register(ParallelGateway);
}

// node_modules/@logicflow/extension/es/bpmn-elements/presets/Task/task.js
var __extends14 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign12 = function() {
  __assign12 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign12.apply(this, arguments);
};
var __read7 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray6 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var multiInstanceIcon = {
  parallel: parallelMarker,
  sequential: sequentialMarker,
  loop: loopMarker
};
function TaskNodeFactory(type3, icon, props) {
  var view = (
    /** @class */
    function(_super) {
      __extends14(view2, _super);
      function view2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      view2.prototype.getLabelShape = function() {
        var model2 = this.props.model;
        var x = model2.x, y = model2.y, width = model2.width, height = model2.height;
        var style2 = model2.getNodeStyle();
        var i = Array.isArray(icon) ? _.apply(void 0, __spreadArray6([
          "g",
          {
            transform: "matrix(1 0 0 1 ".concat(x - width / 2, " ").concat(y - height / 2, ")")
          }
        ], __read7(icon), false)) : _("path", {
          fill: style2.stroke,
          d: icon
        });
        return _("svg", {
          x: x - width / 2 + 5,
          y: y - height / 2 + 5,
          width: 25,
          height: 25,
          viewBox: "0 0 1274 1024"
        }, i);
      };
      view2.prototype.getShape = function() {
        var model2 = this.props.model;
        var x = model2.x, y = model2.y, width = model2.width, height = model2.height, radius = model2.radius, properties = model2.properties;
        var style2 = model2.getNodeStyle();
        return _("g", {}, [
          _("rect", __assign12(__assign12({}, style2), { x: x - width / 2, y: y - height / 2, rx: radius, ry: radius, width, height, opacity: 0.95 })),
          this.getLabelShape(),
          _("g", {
            transform: "matrix(1 0 0 1 ".concat(x - width / 2, " ").concat(y - height / 2, ")")
          }, _("path", {
            fill: "white",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            stroke: "rgb(34, 36, 42)",
            strokeWidth: "2",
            d: multiInstanceIcon[properties.multiInstanceType] || ""
            // TODO: 确认 properties.multiInstanceType 的类型
          }))
        ]);
      };
      return view2;
    }(RectNode)
  );
  var model = (
    /** @class */
    function(_super) {
      __extends14(model2, _super);
      function model2(data, graphModel) {
        var _this = this;
        var _a;
        if (!data.id) {
          data.id = "Activity_".concat(genBpmnId());
        }
        var properties = __assign12(__assign12({}, props || {}), data.properties);
        data.properties = properties;
        _this = _super.call(this, data, graphModel) || this;
        (_a = properties === null || properties === void 0 ? void 0 : properties.boundaryEvents) === null || _a === void 0 ? void 0 : _a.forEach(function(id) {
          _this.addBoundaryEvent(id);
        });
        _this.deleteProperty("boundaryEvents");
        groupRule.call(_this);
        return _this;
      }
      model2.prototype.initNodeData = function(data) {
        _super.prototype.initNodeData.call(this, data);
        this.isTaskNode = true;
        this.boundaryEvents = [];
      };
      model2.prototype.getNodeStyle = function() {
        var style2 = _super.prototype.getNodeStyle.call(this);
        var isBoundaryEventTouchingTask = this.properties.isBoundaryEventTouchingTask;
        if (isBoundaryEventTouchingTask) {
          style2.stroke = "#00acff";
          style2.strokeWidth = 2;
        }
        return style2;
      };
      model2.prototype.getOutlineStyle = function() {
        var style2 = _super.prototype.getOutlineStyle.call(this);
        style2.stroke = "transparent";
        !style2.hover && (style2.hover = {});
        style2.hover.stroke = "transparent";
        return style2;
      };
      model2.prototype.setTouching = function(flag) {
        this.setProperty("isBoundaryEventTouchingTask", flag);
      };
      model2.prototype.addBoundaryEvent = function(nodeId) {
        this.setTouching(false);
        if (this.boundaryEvents.find(function(item) {
          return item === nodeId;
        })) {
          return false;
        }
        var boundaryEvent2 = this.graphModel.getNodeModelById(nodeId);
        boundaryEvent2 === null || boundaryEvent2 === void 0 ? void 0 : boundaryEvent2.setProperties({
          attachedToRef: this.id
        });
        this.boundaryEvents.push(nodeId);
        return true;
      };
      model2.prototype.deleteBoundaryEvent = function(nodeId) {
        this.boundaryEvents = this.boundaryEvents.filter(function(item) {
          return item !== nodeId;
        });
      };
      return model2;
    }(RectNodeModel)
  );
  return {
    type: type3,
    view,
    model
  };
}

// node_modules/@logicflow/extension/es/NodeResize/control/Control.js
var __extends15 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign13 = function() {
  __assign13 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign13.apply(this, arguments);
};
var __read8 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var StepDrag = util_exports.StepDrag;
var Control = (
  /** @class */
  function(_super) {
    __extends15(Control3, _super);
    function Control3(props) {
      var _this = _super.call(this) || this;
      _this.updatePosition = function(_a) {
        var deltaX = _a.deltaX, deltaY = _a.deltaY;
        var _b = _this.nodeModel, x = _b.x, y = _b.y;
        _this.nodeModel.x = x + deltaX / 2;
        _this.nodeModel.y = y + deltaY / 2;
        _this.nodeModel.moveText(deltaX / 2, deltaY / 2);
      };
      _this.getResize = function(_a) {
        var index = _a.index, deltaX = _a.deltaX, deltaY = _a.deltaY, width = _a.width, height = _a.height, PCTResizeInfo = _a.PCTResizeInfo, _b = _a.pct, pct = _b === void 0 ? 1 : _b, _c = _a.freezeWidth, freezeWidth = _c === void 0 ? false : _c, _d = _a.freezeHeight, freezeHeight = _d === void 0 ? false : _d;
        var resize = {
          width,
          height,
          deltaX,
          deltaY
        };
        if (PCTResizeInfo) {
          var sensitivity = 4;
          var deltaScale = 0;
          var combineDelta = 0;
          switch (index) {
            case 0:
              combineDelta = (deltaX * -1 - deltaY) / sensitivity;
              break;
            case 1:
              combineDelta = (deltaX - deltaY) / sensitivity;
              break;
            case 2:
              combineDelta = (deltaX + deltaY) / sensitivity;
              break;
            case 3:
              combineDelta = (deltaX * -1 + deltaY) / sensitivity;
              break;
            default:
              break;
          }
          if (combineDelta !== 0) {
            deltaScale = Math.round(combineDelta / PCTResizeInfo.ResizeBasis.basisHeight * 1e5) / 1e3;
          }
          PCTResizeInfo.ResizePCT.widthPCT = Math.max(Math.min(PCTResizeInfo.ResizePCT.widthPCT + deltaScale, PCTResizeInfo.ScaleLimit.maxScaleLimit), PCTResizeInfo.ScaleLimit.minScaleLimit);
          PCTResizeInfo.ResizePCT.heightPCT = Math.max(Math.min(PCTResizeInfo.ResizePCT.heightPCT + deltaScale, PCTResizeInfo.ScaleLimit.maxScaleLimit), PCTResizeInfo.ScaleLimit.minScaleLimit);
          var spcWidth = Math.round(PCTResizeInfo.ResizePCT.widthPCT * PCTResizeInfo.ResizeBasis.basisWidth / 100);
          var spcHeight = Math.round(PCTResizeInfo.ResizePCT.heightPCT * PCTResizeInfo.ResizeBasis.basisHeight / 100);
          switch (index) {
            case 0:
              deltaX = width - spcWidth;
              deltaY = height - spcHeight;
              break;
            case 1:
              deltaX = spcWidth - width;
              deltaY = height - spcHeight;
              break;
            case 2:
              deltaX = spcWidth - width;
              deltaY = spcHeight - height;
              break;
            case 3:
              deltaX = width - spcWidth;
              deltaY = spcHeight - height;
              break;
            default:
              break;
          }
          resize.width = spcWidth;
          resize.height = spcHeight;
          resize.deltaX = deltaX / pct;
          resize.deltaY = deltaY / pct;
          return resize;
        }
        switch (index) {
          case 0:
            resize.width = freezeWidth ? width : width - deltaX * pct;
            resize.height = freezeHeight ? height : height - deltaY * pct;
            break;
          case 1:
            resize.width = freezeWidth ? width : width + deltaX * pct;
            resize.height = freezeHeight ? height : height - deltaY * pct;
            break;
          case 2:
            resize.width = freezeWidth ? width : width + deltaX * pct;
            resize.height = freezeHeight ? height : height + deltaY * pct;
            break;
          case 3:
            resize.width = freezeWidth ? width : width - deltaX * pct;
            resize.height = freezeHeight ? height : height + deltaY * pct;
            break;
          default:
            break;
        }
        return resize;
      };
      _this.updateEdgePointByAnchors = function() {
        var _a = _this.nodeModel, id = _a.id, anchors = _a.anchors;
        var edges = _this.getNodeEdges(id);
        edges.sourceEdges.forEach(function(item) {
          var anchorItem = anchors.find(function(anchor) {
            return anchor.id === item.sourceAnchorId;
          });
          if (anchorItem) {
            item.updateStartPoint({
              x: anchorItem.x,
              y: anchorItem.y
            });
          }
        });
        edges.targetEdges.forEach(function(item) {
          var anchorItem = anchors.find(function(anchor) {
            return anchor.id === item.targetAnchorId;
          });
          if (anchorItem) {
            item.updateEndPoint({
              x: anchorItem.x,
              y: anchorItem.y
            });
          }
        });
      };
      _this.updateRect = function(_a) {
        var deltaX = _a.deltaX, deltaY = _a.deltaY;
        var _b = _this.nodeModel, x = _b.x, y = _b.y, width = _b.width, height = _b.height, radius = _b.radius, PCTResizeInfo = _b.PCTResizeInfo;
        var _c = _this.nodeModel, minWidth = _c.minWidth, minHeight = _c.minHeight, maxWidth = _c.maxWidth, maxHeight = _c.maxHeight;
        var index = _this.index;
        var freezeWidth = minWidth === maxWidth;
        var freezeHeight = minHeight === maxHeight;
        var size = _this.getResize({
          index,
          deltaX,
          deltaY,
          width,
          height,
          PCTResizeInfo,
          pct: 1,
          freezeWidth,
          freezeHeight
        });
        if (size.width < minWidth || size.width > maxWidth || size.height < minHeight || size.height > maxHeight) {
          _this.dragHandler.cancelDrag();
          return;
        }
        _this.updatePosition({
          deltaX: freezeWidth ? 0 : size.deltaX,
          deltaY: freezeHeight ? 0 : size.deltaY
        });
        _this.nodeModel.width = size.width;
        _this.nodeModel.height = size.height;
        _this.nodeModel.setProperties({
          nodeSize: {
            width: size.width,
            height: size.height
          }
        });
        var beforeNode = {
          x,
          y,
          width,
          height,
          radius
        };
        var afterNode = {
          x: _this.nodeModel.x,
          y: _this.nodeModel.y,
          width: _this.nodeModel.width,
          height: _this.nodeModel.height,
          radius
        };
        _this.updateEdgePointByAnchors();
        _this.eventEmit({
          beforeNode,
          afterNode
        });
      };
      _this.updateEllipse = function(_a) {
        var deltaX = _a.deltaX, deltaY = _a.deltaY;
        var _b = _this.nodeModel, rx = _b.rx, ry = _b.ry, x = _b.x, y = _b.y, PCTResizeInfo = _b.PCTResizeInfo;
        var index = _this.index;
        var _c = _this.nodeModel, minWidth = _c.minWidth, minHeight = _c.minHeight, maxWidth = _c.maxWidth, maxHeight = _c.maxHeight;
        var freezeWidth = minWidth === maxWidth;
        var freezeHeight = minHeight === maxHeight;
        var width = rx;
        var height = ry;
        var size = _this.getResize({
          index,
          deltaX,
          deltaY,
          width,
          height,
          PCTResizeInfo,
          pct: 1 / 2,
          freezeWidth,
          freezeHeight
        });
        if (size.width < minWidth / 2 || size.width > maxWidth / 2 || size.height < minHeight / 2 || size.height > maxHeight / 2) {
          _this.dragHandler.cancelDrag();
          return;
        }
        _this.updatePosition({
          deltaX: freezeWidth ? 0 : size.deltaX,
          deltaY: freezeHeight ? 0 : size.deltaY
        });
        _this.nodeModel.rx = size.width;
        _this.nodeModel.ry = size.height;
        _this.nodeModel.setProperties({
          nodeSize: {
            rx: size.width,
            ry: size.height
          }
        });
        var beforeNode = {
          x,
          y
        };
        var afterNode = {
          rx: size.width,
          ry: size.height,
          x: _this.nodeModel.x,
          y: _this.nodeModel.y
        };
        _this.updateEdgePointByAnchors();
        _this.eventEmit({
          beforeNode: __assign13(__assign13({}, beforeNode), { rx, ry }),
          afterNode
        });
      };
      _this.updateDiamond = function(_a) {
        var deltaX = _a.deltaX, deltaY = _a.deltaY;
        var _b = _this.nodeModel, rx = _b.rx, ry = _b.ry, x = _b.x, y = _b.y, PCTResizeInfo = _b.PCTResizeInfo;
        var index = _this.index;
        var _c = _this.nodeModel, minWidth = _c.minWidth, minHeight = _c.minHeight, maxWidth = _c.maxWidth, maxHeight = _c.maxHeight;
        var freezeWidth = minWidth === maxWidth;
        var freezeHeight = minHeight === maxHeight;
        var width = rx;
        var height = ry;
        var size = _this.getResize({
          index,
          deltaX,
          deltaY,
          width,
          height,
          PCTResizeInfo,
          pct: 1 / 2,
          freezeWidth,
          freezeHeight
        });
        if (size.width < minWidth / 2 || size.width > maxWidth / 2 || size.height < minHeight / 2 || size.height > maxHeight / 2) {
          _this.dragHandler.cancelDrag();
          return;
        }
        _this.updatePosition({
          deltaX: freezeWidth ? 0 : size.deltaX,
          deltaY: freezeHeight ? 0 : size.deltaY
        });
        _this.nodeModel.rx = size.width;
        _this.nodeModel.ry = size.height;
        _this.nodeModel.setProperties({
          nodeSize: {
            rx: size.width,
            ry: size.height
          }
        });
        var beforeNode = {
          x,
          y,
          rx,
          ry
        };
        var afterNode = {
          rx: size.width,
          ry: size.height,
          x: _this.nodeModel.x,
          y: _this.nodeModel.y
        };
        _this.updateEdgePointByAnchors();
        _this.eventEmit({
          beforeNode,
          afterNode
        });
      };
      _this.eventEmit = function(_a) {
        var beforeNode = _a.beforeNode, afterNode = _a.afterNode;
        var _b = _this.nodeModel, id = _b.id, modelType = _b.modelType, type3 = _b.type;
        var oldNodeSize = __assign13({ id, modelType, type: type3 }, beforeNode);
        var newNodeSize = __assign13({ id, modelType, type: type3 }, afterNode);
        _this.graphModel.eventCenter.emit("node:resize", {
          oldNodeSize,
          newNodeSize
        });
      };
      _this.onDragging = function(_a) {
        var _b;
        var deltaX = _a.deltaX, deltaY = _a.deltaY;
        var transformModel = _this.graphModel.transformModel;
        var modelType = _this.nodeModel.modelType;
        _b = __read8(transformModel.fixDeltaXY(deltaX, deltaY), 2), deltaX = _b[0], deltaY = _b[1];
        if (modelType === ModelType.RECT_NODE || modelType === ModelType.HTML_NODE) {
          _this.updateRect({
            deltaX,
            deltaY
          });
        } else if (modelType === ModelType.ELLIPSE_NODE) {
          _this.updateEllipse({
            deltaX,
            deltaY
          });
        } else if (modelType === ModelType.DIAMOND_NODE) {
          _this.updateDiamond({
            deltaX,
            deltaY
          });
        }
      };
      _this.onDragEnd = function() {
        var _a = _this.graphModel.gridSize, gridSize = _a === void 0 ? 1 : _a;
        var x = gridSize * Math.round(_this.nodeModel.x / gridSize);
        var y = gridSize * Math.round(_this.nodeModel.y / gridSize);
        _this.nodeModel.moveTo(x, y);
        _this.updateEdgePointByAnchors();
      };
      _this.index = props.index;
      _this.nodeModel = props.model;
      _this.graphModel = props.graphModel;
      _this.dragHandler = new StepDrag({
        onDragging: _this.onDragging,
        onDragEnd: _this.onDragEnd,
        step: 1
      });
      return _this;
    }
    Control3.prototype.getNodeEdges = function(nodeId) {
      var graphModel = this.graphModel;
      var edges = graphModel.edges;
      var sourceEdges = [];
      var targetEdges = [];
      for (var i = 0; i < edges.length; i++) {
        var edgeModel = edges[i];
        if (edgeModel.sourceNodeId === nodeId) {
          sourceEdges.push(edgeModel);
        } else if (edges[i].targetNodeId === nodeId) {
          targetEdges.push(edgeModel);
        }
      }
      return {
        sourceEdges,
        targetEdges
      };
    };
    Control3.prototype.render = function() {
      var _a = this.props, x = _a.x, y = _a.y, index = _a.index, model = _a.model;
      var style2 = model.getControlPointStyle();
      return u("g", { className: "lf-resize-control-".concat(index), children: u(Rect, __assign13({ className: "lf-node-control", x, y }, style2, { onMouseDown: this.dragHandler.handleMouseDown })) });
    };
    return Control3;
  }(b)
);
var Control_default = Control;

// node_modules/@logicflow/extension/es/NodeResize/control/ControlGroup.js
var __extends16 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign14 = function() {
  __assign14 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign14.apply(this, arguments);
};
var ControlGroup = (
  /** @class */
  function(_super) {
    __extends16(ControlGroup2, _super);
    function ControlGroup2() {
      var _this = _super.call(this) || this;
      _this.state = {};
      return _this;
    }
    ControlGroup2.prototype.getResizeControl = function() {
      var _a = this.props, model = _a.model, graphModel = _a.graphModel;
      var x = model.x, y = model.y, width = model.width, height = model.height;
      var box = {
        minX: x - width / 2,
        minY: y - height / 2,
        maxX: x + width / 2,
        maxY: y + height / 2
      };
      var minX = box.minX, minY = box.minY, maxX = box.maxX, maxY = box.maxY;
      var controlList = [
        // 左上角
        {
          x: minX,
          y: minY
        },
        // 右上角
        {
          x: maxX,
          y: minY
        },
        // 右下角
        {
          x: maxX,
          y: maxY
        },
        // 左下角
        {
          x: minX,
          y: maxY
        }
      ];
      return controlList.map(function(control, index) {
        return u(Control_default, __assign14({ index }, control, { model, graphModel }));
      });
    };
    ControlGroup2.prototype.getGroupSolid = function() {
      var model = this.props.model;
      var x = model.x, y = model.y, width = model.width, height = model.height;
      var style2 = model.getResizeOutlineStyle();
      return u(Rect, __assign14({}, style2, { x, y, width, height }));
    };
    ControlGroup2.prototype.render = function() {
      return u("g", { className: "lf-resize-control", children: [this.getGroupSolid(), this.getResizeControl()] });
    };
    return ControlGroup2;
  }(b)
);
var ControlGroup_default = ControlGroup;

// node_modules/@logicflow/extension/es/NodeResize/node/EllipseResize.js
var __extends17 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var EllipseResizeModel = (
  /** @class */
  function(_super) {
    __extends17(EllipseResizeModel2, _super);
    function EllipseResizeModel2(data, graphModel) {
      var _this = _super.call(this, data, graphModel) || this;
      var nodeSize = data.properties.nodeSize;
      if (nodeSize) {
        _this.rx = nodeSize.rx;
        _this.ry = nodeSize.ry;
      }
      return _this;
    }
    EllipseResizeModel2.prototype.initNodeData = function(data) {
      _super.prototype.initNodeData.call(this, data);
      this.minWidth = 30;
      this.minHeight = 30;
      this.maxWidth = 2e3;
      this.maxHeight = 2e3;
    };
    EllipseResizeModel2.prototype.getOutlineStyle = function() {
      var style2 = _super.prototype.getOutlineStyle.call(this);
      var isSilentMode = this.graphModel.editConfigModel.isSilentMode;
      if (isSilentMode)
        return style2;
      style2.stroke = "none";
      if (style2.hover) {
        style2.hover.stroke = "none";
      }
      return style2;
    };
    EllipseResizeModel2.prototype.getResizeOutlineStyle = function() {
      return {
        fill: "none",
        stroke: "transparent",
        strokeWidth: 1,
        strokeDasharray: "3,3"
      };
    };
    EllipseResizeModel2.prototype.getControlPointStyle = function() {
      return {
        width: 7,
        height: 7,
        fill: "#FFFFFF",
        stroke: "#000000"
      };
    };
    EllipseResizeModel2.prototype.enableProportionResize = function(turnOn) {
      if (turnOn === void 0) {
        turnOn = true;
      }
      if (turnOn) {
        var ResizePCT = {
          widthPCT: 100,
          heightPCT: 100
        };
        var ResizeBasis = {
          basisWidth: this.rx,
          basisHeight: this.ry
        };
        var ScaleLimit = {
          maxScaleLimit: Math.min(this.maxWidth / (this.rx * 2) * 100, this.maxHeight / (this.ry * 2) * 100),
          minScaleLimit: Math.max(this.minWidth / (this.rx * 2) * 100, this.minHeight / (this.ry * 2) * 100)
        };
        this.PCTResizeInfo = {
          ResizePCT,
          ResizeBasis,
          ScaleLimit
        };
      } else {
        delete this.PCTResizeInfo;
      }
    };
    return EllipseResizeModel2;
  }(EllipseNodeModel)
);
var EllipseResizeView = (
  /** @class */
  function(_super) {
    __extends17(EllipseResizeView2, _super);
    function EllipseResizeView2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    EllipseResizeView2.prototype.getControlGroup = function() {
      var _a = this.props, model = _a.model, graphModel = _a.graphModel;
      return u(ControlGroup_default, { model, graphModel });
    };
    EllipseResizeView2.prototype.getResizeShape = function() {
      return _super.prototype.getShape.call(this);
    };
    EllipseResizeView2.prototype.getShape = function() {
      var _a = this.props, model = _a.model, isSilentMode = _a.graphModel.editConfigModel.isSilentMode;
      return u("g", { children: [this.getResizeShape(), model.isSelected && !isSilentMode ? this.getControlGroup() : ""] });
    };
    return EllipseResizeView2;
  }(EllipseNode)
);
var EllipseResize = {
  type: "ellipse",
  view: EllipseResizeView,
  model: EllipseResizeModel
};
var EllipseResize_default = EllipseResize;

// node_modules/@logicflow/extension/es/NodeResize/node/DiamondResize.js
var __extends18 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign15 = function() {
  __assign15 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign15.apply(this, arguments);
};
var DiamondResizeModel = (
  /** @class */
  function(_super) {
    __extends18(DiamondResizeModel2, _super);
    function DiamondResizeModel2(data, graphModel) {
      var _this = _super.call(this, data, graphModel) || this;
      var nodeSize = data.properties.nodeSize;
      if (nodeSize) {
        _this.rx = nodeSize.rx;
        _this.ry = nodeSize.ry;
      }
      return _this;
    }
    DiamondResizeModel2.prototype.initNodeData = function(data) {
      _super.prototype.initNodeData.call(this, data);
      this.minWidth = 30;
      this.minHeight = 30;
      this.maxWidth = 2e3;
      this.maxHeight = 2e3;
      this.gridSize = 1;
    };
    DiamondResizeModel2.prototype.getOutlineStyle = function() {
      var style2 = _super.prototype.getOutlineStyle.call(this);
      var isSilentMode = this.graphModel.editConfigModel.isSilentMode;
      if (isSilentMode)
        return style2;
      style2.stroke = "none";
      if (style2.hover) {
        style2.hover.stroke = "none";
      }
      return style2;
    };
    DiamondResizeModel2.prototype.getResizeOutlineStyle = function() {
      return {
        fill: "none",
        stroke: "transparent",
        strokeWidth: 1,
        strokeDasharray: "3,3"
      };
    };
    DiamondResizeModel2.prototype.getControlPointStyle = function() {
      return {
        width: 7,
        height: 7,
        fill: "#FFFFFF",
        stroke: "#000000"
      };
    };
    DiamondResizeModel2.prototype.enableProportionResize = function(turnOn) {
      if (turnOn === void 0) {
        turnOn = true;
      }
      if (turnOn) {
        var ResizePCT = {
          widthPCT: 100,
          heightPCT: 100
        };
        var ResizeBasis = {
          basisWidth: this.rx,
          basisHeight: this.ry
        };
        var ScaleLimit = {
          maxScaleLimit: Math.min(this.maxWidth / (this.rx * 2) * 100, this.maxHeight / (this.ry * 2) * 100),
          minScaleLimit: Math.max(this.minWidth / (this.rx * 2) * 100, this.minHeight / (this.ry * 2) * 100)
        };
        this.PCTResizeInfo = {
          ResizePCT,
          ResizeBasis,
          ScaleLimit
        };
      } else {
        delete this.PCTResizeInfo;
      }
    };
    return DiamondResizeModel2;
  }(DiamondNodeModel)
);
var DiamondResizeView = (
  /** @class */
  function(_super) {
    __extends18(DiamondResizeView2, _super);
    function DiamondResizeView2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    DiamondResizeView2.prototype.getControlGroup = function() {
      var _a = this.props, model = _a.model, graphModel = _a.graphModel;
      return u(ControlGroup_default, { model, graphModel });
    };
    DiamondResizeView2.prototype.getResizeShape = function() {
      var model = this.props.model;
      var points = model.points;
      var style2 = model.getNodeStyle();
      return u("g", { children: u(Polygon, __assign15({}, style2, { points })) });
    };
    DiamondResizeView2.prototype.getShape = function() {
      var _a = this.props, isSelected = _a.model.isSelected, isSilentMode = _a.graphModel.editConfigModel.isSilentMode;
      return u("g", { children: [this.getResizeShape(), isSelected && !isSilentMode ? this.getControlGroup() : ""] });
    };
    return DiamondResizeView2;
  }(DiamondNode)
);
var DiamondResize = {
  type: "diamond",
  view: DiamondResizeView,
  model: DiamondResizeModel
};
var DiamondResize_default = DiamondResize;

// node_modules/@logicflow/extension/es/NodeResize/node/HtmlResize.js
var __extends19 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var HtmlResizeModel = (
  /** @class */
  function(_super) {
    __extends19(HtmlResizeModel2, _super);
    function HtmlResizeModel2(data, graphModel) {
      var _this = _super.call(this, data, graphModel) || this;
      var nodeSize = data.properties.nodeSize;
      if (nodeSize) {
        _this.width = nodeSize.width;
        _this.height = nodeSize.height;
      }
      return _this;
    }
    HtmlResizeModel2.prototype.initNodeData = function(data) {
      _super.prototype.initNodeData.call(this, data);
      this.minWidth = 30;
      this.minHeight = 30;
      this.maxWidth = 2e3;
      this.maxHeight = 2e3;
    };
    HtmlResizeModel2.prototype.getOutlineStyle = function() {
      var style2 = _super.prototype.getOutlineStyle.call(this);
      var isSilentMode = this.graphModel.editConfigModel.isSilentMode;
      if (isSilentMode)
        return style2;
      style2.stroke = "none";
      if (style2.hover) {
        style2.hover.stroke = "none";
      }
      return style2;
    };
    HtmlResizeModel2.prototype.getResizeOutlineStyle = function() {
      return {
        fill: "none",
        stroke: "transparent",
        strokeWidth: 1,
        strokeDasharray: "3,3"
      };
    };
    HtmlResizeModel2.prototype.getControlPointStyle = function() {
      return {
        width: 7,
        height: 7,
        fill: "#FFFFFF",
        stroke: "#000000"
      };
    };
    HtmlResizeModel2.prototype.enableProportionResize = function(turnOn) {
      if (turnOn === void 0) {
        turnOn = true;
      }
      if (turnOn) {
        var ResizePCT = {
          widthPCT: 100,
          heightPCT: 100
        };
        var ResizeBasis = {
          basisWidth: this.width,
          basisHeight: this.height
        };
        var ScaleLimit = {
          maxScaleLimit: Math.min(this.maxWidth / this.width * 100, this.maxHeight / this.height * 100),
          minScaleLimit: Math.max(this.minWidth / this.width * 100, this.minHeight / this.height * 100)
        };
        this.PCTResizeInfo = {
          ResizePCT,
          ResizeBasis,
          ScaleLimit
        };
      } else {
        delete this.PCTResizeInfo;
      }
    };
    return HtmlResizeModel2;
  }(HtmlNodeModel)
);
var HtmlResizeView = (
  /** @class */
  function(_super) {
    __extends19(HtmlResizeView2, _super);
    function HtmlResizeView2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    HtmlResizeView2.prototype.getControlGroup = function() {
      var _a = this.props, model = _a.model, graphModel = _a.graphModel;
      return u(ControlGroup_default, { model, graphModel });
    };
    HtmlResizeView2.prototype.getResizeShape = function() {
      return _super.prototype.getShape.call(this);
    };
    HtmlResizeView2.prototype.getShape = function() {
      var _a = this.props, isSelected = _a.model.isSelected, isSilentMode = _a.graphModel.editConfigModel.isSilentMode;
      return u("g", { children: [this.getResizeShape(), isSelected && !isSilentMode ? this.getControlGroup() : ""] });
    };
    return HtmlResizeView2;
  }(HtmlNode)
);
var HtmlResize = {
  type: "html",
  view: HtmlResizeView,
  model: HtmlResizeModel
};
var HtmlResize_default = HtmlResize;

// node_modules/@logicflow/extension/es/NodeResize/node/RectResize.js
var __extends20 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var RectResizeModel = (
  /** @class */
  function(_super) {
    __extends20(RectResizeModel2, _super);
    function RectResizeModel2(data, graphModel) {
      var _this = _super.call(this, data, graphModel) || this;
      var nodeSize = data.properties.nodeSize;
      if (nodeSize) {
        _this.width = nodeSize.width;
        _this.height = nodeSize.height;
      }
      return _this;
    }
    RectResizeModel2.prototype.initNodeData = function(data) {
      _super.prototype.initNodeData.call(this, data);
      this.minWidth = 30;
      this.minHeight = 30;
      this.maxWidth = 2e3;
      this.maxHeight = 2e3;
    };
    RectResizeModel2.prototype.getOutlineStyle = function() {
      var style2 = _super.prototype.getOutlineStyle.call(this);
      var isSilentMode = this.graphModel.editConfigModel.isSilentMode;
      if (isSilentMode)
        return style2;
      style2.stroke = "none";
      if (style2.hover) {
        style2.hover.stroke = "none";
      }
      return style2;
    };
    RectResizeModel2.prototype.getResizeOutlineStyle = function() {
      return {
        fill: "none",
        stroke: "transparent",
        // 矩形默认不显示调整边框
        strokeWidth: 1,
        strokeDasharray: "3,3"
      };
    };
    RectResizeModel2.prototype.getControlPointStyle = function() {
      return {
        width: 7,
        height: 7,
        fill: "#FFFFFF",
        stroke: "#000000"
      };
    };
    RectResizeModel2.prototype.enableProportionResize = function(turnOn) {
      if (turnOn === void 0) {
        turnOn = true;
      }
      if (turnOn) {
        var ResizePCT = {
          widthPCT: 100,
          heightPCT: 100
        };
        var ResizeBasis = {
          basisWidth: this.width,
          basisHeight: this.height
        };
        var ScaleLimit = {
          maxScaleLimit: Math.min(this.maxWidth / this.width * 100, this.maxHeight / this.height * 100),
          minScaleLimit: Math.max(this.minWidth / this.width * 100, this.minHeight / this.height * 100)
        };
        this.PCTResizeInfo = {
          ResizePCT,
          ResizeBasis,
          ScaleLimit
        };
      } else {
        delete this.PCTResizeInfo;
      }
    };
    return RectResizeModel2;
  }(RectNodeModel)
);
var RectResizeView = (
  /** @class */
  function(_super) {
    __extends20(RectResizeView2, _super);
    function RectResizeView2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    RectResizeView2.prototype.getControlGroup = function() {
      var _a = this.props, model = _a.model, graphModel = _a.graphModel;
      return u(ControlGroup_default, { model, graphModel });
    };
    RectResizeView2.prototype.getResizeShape = function() {
      return _super.prototype.getShape.call(this);
    };
    RectResizeView2.prototype.getShape = function() {
      var _a = this.props, isSelected = _a.model.isSelected, isSilentMode = _a.graphModel.editConfigModel.isSilentMode;
      return u("g", { children: [this.getResizeShape(), isSelected && !isSilentMode ? this.getControlGroup() : ""] });
    };
    return RectResizeView2;
  }(RectNode)
);
var RectResize = {
  type: "rect",
  view: RectResizeView,
  model: RectResizeModel
};
var RectResize_default = RectResize;

// node_modules/@logicflow/extension/es/NodeResize/index.js
var NodeResize = {
  pluginName: "nodeResize",
  // 拖动step
  step: 0,
  install: function(lf) {
    lf.register(EllipseResize_default);
    lf.register(DiamondResize_default);
    lf.register(HtmlResize_default);
    lf.register(RectResize_default);
  }
};

// node_modules/@logicflow/extension/es/materials/group/GroupNode.js
var __extends21 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign16 = function() {
  __assign16 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign16.apply(this, arguments);
};
var __read9 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray7 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var defaultWidth = 500;
var defaultHeight = 300;
var DEFAULT_BOTTOM_Z_INDEX = -1e4;
var GroupNodeModel = (
  /** @class */
  function(_super) {
    __extends21(GroupNodeModel2, _super);
    function GroupNodeModel2() {
      var _this = _super.apply(this, __spreadArray7([], __read9(arguments), false)) || this;
      _this.isGroup = true;
      _this.isFolded = false;
      _this.unfoldedWidth = defaultWidth;
      _this.unfoldedHeight = defaultHeight;
      _this.childrenLastFoldStatus = {};
      return _this;
    }
    GroupNodeModel2.prototype.initNodeData = function(data) {
      var _this = this;
      _super.prototype.initNodeData.call(this, data);
      var children = [];
      if (Array.isArray(data.children)) {
        children = data.children;
      }
      this.children = new Set(children);
      this.width = defaultWidth;
      this.height = defaultHeight;
      this.foldedWidth = 80;
      this.foldedHeight = 60;
      this.zIndex = DEFAULT_BOTTOM_Z_INDEX;
      this.radius = 0;
      this.text.editable = false;
      this.text.draggable = false;
      this.isRestrict = false;
      this.resizable = false;
      this.autoToFront = false;
      this.foldable = false;
      if (this.properties.isFolded === void 0) {
        this.properties.isFolded = false;
      }
      this.isFolded = !!this.properties.isFolded;
      setTimeout(function() {
        _this.isFolded && _this.foldGroup(_this.isFolded);
      });
    };
    GroupNodeModel2.prototype.getResizeOutlineStyle = function() {
      var style2 = _super.prototype.getResizeOutlineStyle.call(this);
      style2.stroke = "none";
      return style2;
    };
    GroupNodeModel2.prototype.foldGroup = function(isFolded) {
      var _this = this;
      if (isFolded === this.isFolded) {
        return;
      }
      this.setProperty("isFolded", isFolded);
      this.isFolded = isFolded;
      if (isFolded) {
        this.x = this.x - this.width / 2 + this.foldedWidth / 2;
        this.y = this.y - this.height / 2 + this.foldedHeight / 2;
        this.unfoldedWidth = this.width;
        this.unfoldedHeight = this.height;
        this.width = this.foldedWidth;
        this.height = this.foldedHeight;
      } else {
        this.width = this.unfoldedWidth;
        this.height = this.unfoldedHeight;
        this.x = this.x + this.width / 2 - this.foldedWidth / 2;
        this.y = this.y + this.height / 2 - this.foldedHeight / 2;
      }
      var allEdges = __spreadArray7(__spreadArray7([], __read9(this.incoming.edges), false), __read9(this.outgoing.edges), false);
      this.children.forEach(function(elementId) {
        var nodeModel = _this.graphModel.getElement(elementId);
        if (nodeModel) {
          var foldStatus = nodeModel.isFolded;
          if (nodeModel.isGroup && !nodeModel.isFolded) {
            ;
            nodeModel.foldGroup(isFolded);
          }
          if (nodeModel.isGroup && !isFolded) {
            var lastFoldStatus = _this.childrenLastFoldStatus[elementId];
            if (lastFoldStatus !== void 0 && lastFoldStatus !== nodeModel.isFolded) {
              ;
              nodeModel.foldGroup(lastFoldStatus);
            }
          }
          _this.childrenLastFoldStatus[elementId] = !!foldStatus;
          nodeModel.visible = !isFolded;
          var incomingEdges = nodeModel.incoming.edges;
          var outgoingEdges = nodeModel.outgoing.edges;
          allEdges = __spreadArray7(__spreadArray7(__spreadArray7([], __read9(allEdges), false), __read9(incomingEdges), false), __read9(outgoingEdges), false);
        }
      });
      this.foldEdge(isFolded, allEdges);
    };
    GroupNodeModel2.prototype.getAnchorStyle = function(anchorInfo) {
      var style2 = _super.prototype.getAnchorStyle.call(this, anchorInfo);
      style2.stroke = "transparent";
      style2.fill = "transparent";
      style2.hover.fill = "transparent";
      style2.hover.stroke = "transparent";
      return style2;
    };
    GroupNodeModel2.prototype.foldEdge = function(isFolded, allEdges) {
      var _this = this;
      allEdges.forEach(function(edgeModel, index) {
        var id = edgeModel.id, sourceNodeId = edgeModel.sourceNodeId, targetNodeId = edgeModel.targetNodeId, startPoint = edgeModel.startPoint, endPoint = edgeModel.endPoint, type3 = edgeModel.type, text = edgeModel.text;
        var properties = edgeModel.getProperties();
        var data = {
          id: "".concat(id, "__").concat(index),
          sourceNodeId,
          targetNodeId,
          startPoint,
          endPoint,
          type: type3,
          properties,
          text: text === null || text === void 0 ? void 0 : text.value
        };
        if (edgeModel.virtual) {
          _this.graphModel.deleteEdgeById(edgeModel.id);
        }
        var targetNodeIdGroup = _this.graphModel.group.getNodeGroup(targetNodeId);
        if (!targetNodeIdGroup) {
          targetNodeIdGroup = _this.graphModel.getNodeModelById(targetNodeId);
        }
        var sourceNodeIdGroup = _this.graphModel.group.getNodeGroup(sourceNodeId);
        if (!sourceNodeIdGroup) {
          sourceNodeIdGroup = _this.graphModel.getNodeModelById(sourceNodeId);
        }
        if (isFolded && edgeModel.visible !== false) {
          if (_this.children.has(sourceNodeId) || _this.id === sourceNodeId) {
            data.startPoint = void 0;
            data.sourceNodeId = _this.id;
          } else {
            data.endPoint = void 0;
            data.targetNodeId = _this.id;
          }
          if (targetNodeIdGroup.id !== _this.id || sourceNodeIdGroup.id !== _this.id) {
            _this.createVirtualEdge(data);
          }
          edgeModel.visible = false;
        }
        if (!isFolded && edgeModel.visible === false) {
          if (targetNodeIdGroup && targetNodeIdGroup.isGroup && targetNodeIdGroup.isFolded) {
            data.targetNodeId = targetNodeIdGroup.id;
            data.endPoint = void 0;
            _this.createVirtualEdge(data);
          } else if (sourceNodeIdGroup && sourceNodeIdGroup.isGroup && sourceNodeIdGroup.isFolded) {
            data.sourceNodeId = sourceNodeIdGroup.id;
            data.startPoint = void 0;
            _this.createVirtualEdge(data);
          } else {
            edgeModel.visible = true;
          }
        }
      });
    };
    GroupNodeModel2.prototype.createVirtualEdge = function(edgeData) {
      edgeData.pointsList = void 0;
      var model = this.graphModel.addEdge(edgeData);
      model.virtual = true;
      model.text.editable = false;
      model.isFoldedEdge = true;
    };
    GroupNodeModel2.prototype.isInRange = function(_a) {
      var x1 = _a.x1, y1 = _a.y1, x2 = _a.x2, y2 = _a.y2;
      return x1 >= this.x - this.width / 2 && x2 <= this.x + this.width / 2 && y1 >= this.y - this.height / 2 && y2 <= this.y + this.height / 2;
    };
    GroupNodeModel2.prototype.isAllowMoveTo = function(_a) {
      var x1 = _a.x1, y1 = _a.y1, x2 = _a.x2, y2 = _a.y2;
      return {
        x: x1 >= this.x - this.width / 2 && x2 <= this.x + this.width / 2,
        y: y1 >= this.y - this.height / 2 && y2 <= this.y + this.height / 2
      };
    };
    GroupNodeModel2.prototype.setAllowAppendChild = function(isAllow) {
      this.setProperty("groupAddable", isAllow);
    };
    GroupNodeModel2.prototype.addChild = function(id) {
      this.children.add(id);
      this.graphModel.eventCenter.emit("group:add-node", { data: this.getData() });
    };
    GroupNodeModel2.prototype.removeChild = function(id) {
      this.children.delete(id);
      this.graphModel.eventCenter.emit("group:remove-node", {
        data: this.getData()
      });
    };
    GroupNodeModel2.prototype.getAddableOutlineStyle = function() {
      return {
        stroke: "#FEB663",
        strokeWidth: 2,
        strokeDasharray: "4 4",
        fill: "transparent"
      };
    };
    GroupNodeModel2.prototype.getData = function() {
      var _this = this;
      var data = _super.prototype.getData.call(this);
      data.children = [];
      this.children.forEach(function(childId) {
        var model = _this.graphModel.getNodeModelById(childId);
        if (model && !model.virtual) {
          ;
          data.children.push(childId);
        }
      });
      var properties = data.properties;
      properties === null || properties === void 0 ? true : delete properties.groupAddable;
      properties === null || properties === void 0 ? true : delete properties.isFolded;
      return data;
    };
    GroupNodeModel2.prototype.getHistoryData = function() {
      var data = _super.prototype.getData.call(this);
      data.children = __spreadArray7([], __read9(this.children), false);
      data.isGroup = true;
      var properties = data.properties;
      properties === null || properties === void 0 ? true : delete properties.groupAddable;
      if (properties === null || properties === void 0 ? void 0 : properties.isFolded) {
        data.x = data.x + this.unfoldedWidth / 2 - this.foldedWidth / 2;
        data.y = data.y + this.unfoldedHeight / 2 - this.foldedHeight / 2;
      }
      return data;
    };
    GroupNodeModel2.prototype.isAllowAppendIn = function(_nodeData) {
      console.info("_nodeData", _nodeData);
      return true;
    };
    GroupNodeModel2.prototype.toBack = function() {
      this.zIndex--;
    };
    return GroupNodeModel2;
  }(RectResizeModel)
);
var GroupNode = (
  /** @class */
  function(_super) {
    __extends21(GroupNode2, _super);
    function GroupNode2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    GroupNode2.prototype.getControlGroup = function() {
      var _a = this.props.model, resizable = _a.resizable, properties = _a.properties;
      return resizable && !properties.isFolded ? _super.prototype.getControlGroup.call(this) : null;
    };
    GroupNode2.prototype.getAddableShape = function() {
      var _a = this.props.model, width = _a.width, height = _a.height, x = _a.x, y = _a.y, radius = _a.radius, properties = _a.properties, getAddableOutlineStyle = _a.getAddableOutlineStyle;
      if (!properties.groupAddable)
        return null;
      var _b = this.props.model.getNodeStyle().strokeWidth, strokeWidth = _b === void 0 ? 0 : _b;
      var style2 = getAddableOutlineStyle();
      var newWidth = width + strokeWidth + 8;
      var newHeight = height + strokeWidth + 8;
      return _("rect", __assign16(__assign16({}, style2), { width: newWidth, height: newHeight, x: x - newWidth / 2, y: y - newHeight / 2, rx: radius, ry: radius }));
    };
    GroupNode2.prototype.getFoldIcon = function() {
      var model = this.props.model;
      var foldX = model.x - model.width / 2 + 5;
      var foldY = model.y - model.height / 2 + 5;
      if (!model.foldable)
        return null;
      var iconIcon = _("path", {
        fill: "none",
        stroke: "#818281",
        strokeWidth: 2,
        "pointer-events": "none",
        d: model.properties.isFolded ? "M ".concat(foldX + 3, ",").concat(foldY + 6, " ").concat(foldX + 11, ",").concat(foldY + 6, " M").concat(foldX + 7, ",").concat(foldY + 2, " ").concat(foldX + 7, ",").concat(foldY + 10) : "M ".concat(foldX + 3, ",").concat(foldY + 6, " ").concat(foldX + 11, ",").concat(foldY + 6, " ")
      });
      return _("g", {}, [
        _("rect", {
          height: 12,
          width: 14,
          rx: 2,
          ry: 2,
          strokeWidth: 1,
          fill: "#F4F5F6",
          stroke: "#CECECE",
          cursor: "pointer",
          x: model.x - model.width / 2 + 5,
          y: model.y - model.height / 2 + 5,
          onClick: function() {
            ;
            model.foldGroup(!model.properties.isFolded);
          }
        }),
        iconIcon
      ]);
    };
    GroupNode2.prototype.getResizeShape = function() {
      return _("g", {}, [
        this.getAddableShape(),
        _super.prototype.getResizeShape.call(this),
        this.getFoldIcon()
      ]);
    };
    return GroupNode2;
  }(RectResizeView)
);
var GroupNode_default = {
  type: "group",
  view: GroupNode,
  model: GroupNodeModel
};

// node_modules/@logicflow/extension/es/materials/group/index.js
var __assign17 = function() {
  __assign17 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign17.apply(this, arguments);
};
var __rest = function(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var __read10 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray8 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var DEFAULT_TOP_Z_INDEX = -1e3;
var DEFAULT_BOTTOM_Z_INDEX2 = -1e4;
var Group = (
  /** @class */
  function() {
    function Group2(_a) {
      var lf = _a.lf;
      var _this = this;
      this.topGroupZIndex = DEFAULT_BOTTOM_Z_INDEX2;
      this.nodeGroupMap = /* @__PURE__ */ new Map();
      this.graphRendered = function(_a2) {
        var data = _a2.data;
        if (data && data.nodes) {
          data.nodes.forEach(function(node) {
            if (node.children) {
              ;
              node.children.forEach(function(nodeId) {
                _this.nodeGroupMap.set(nodeId, node.id);
              });
            }
          });
          _this.checkAndCorrectTopGroupZIndex(data.nodes);
        }
      };
      this.appendNodeToGroup = function(_a2) {
        var data = _a2.data;
        var preGroupId = _this.nodeGroupMap.get(data.id);
        if (preGroupId) {
          var preGroup = _this.lf.getNodeModelById(preGroupId);
          preGroup.removeChild(data.id);
          _this.nodeGroupMap.delete(data.id);
          preGroup.setAllowAppendChild(false);
        }
        var nodeModel = _this.lf.getNodeModelById(data.id);
        var bounds = nodeModel === null || nodeModel === void 0 ? void 0 : nodeModel.getBounds();
        if (bounds && nodeModel) {
          var group = _this.getGroup(bounds, data);
          if (nodeModel.isGroup) {
            ;
            data.children.forEach(function(nodeId) {
              _this.nodeGroupMap.set(nodeId, data.id);
            });
            _this.checkAndCorrectTopGroupZIndex([data]);
            _this.nodeSelected({
              data,
              isSelected: false,
              isMultiple: false
            });
          }
          if (!group)
            return;
          var isAllowAppendIn = group.isAllowAppendIn(data);
          if (!isAllowAppendIn) {
            _this.lf.emit("group:not-allowed", {
              group: group.getData(),
              node: data
            });
            return;
          }
          group.addChild(data.id);
          _this.nodeGroupMap.set(data.id, group.id);
          group.setAllowAppendChild(false);
        }
      };
      this.deleteGroupChild = function(_a2) {
        var data = _a2.data;
        if (data.children) {
          ;
          data.children.forEach(function(nodeId) {
            _this.nodeGroupMap.delete(nodeId);
            _this.lf.deleteNode(nodeId);
          });
        }
        var groupId = _this.nodeGroupMap.get(data.id);
        if (groupId) {
          var group = _this.lf.getNodeModelById(groupId);
          group.removeChild(data.id);
          _this.nodeGroupMap.delete(data.id);
        }
      };
      this.setActiveGroup = function(_a2) {
        var data = _a2.data;
        var nodeModel = _this.lf.getNodeModelById(data.id);
        var bounds = nodeModel === null || nodeModel === void 0 ? void 0 : nodeModel.getBounds();
        if (nodeModel && bounds) {
          var newGroup = _this.getGroup(bounds, data);
          if (_this.activeGroup) {
            _this.activeGroup.setAllowAppendChild(false);
          }
          if (!newGroup || nodeModel.isGroup && newGroup.id === data.id)
            return;
          var isAllowAppendIn = newGroup.isAllowAppendIn(data);
          if (!isAllowAppendIn) {
            return;
          }
          _this.activeGroup = newGroup;
          _this.activeGroup.setAllowAppendChild(true);
        }
      };
      this.findNodeAndChildMaxZIndex = function(nodeModel) {
        var maxZIndex = DEFAULT_BOTTOM_Z_INDEX2;
        if (nodeModel.isGroup) {
          maxZIndex = Math.max(maxZIndex, nodeModel.zIndex);
        }
        if (nodeModel.children) {
          ;
          nodeModel.children.forEach(function(nodeId) {
            if (typeof nodeId === "object") {
              nodeId = nodeId.id;
            }
            var child = _this.lf.getNodeModelById(nodeId);
            if (child === null || child === void 0 ? void 0 : child.isGroup) {
              var childMaxZIndex = _this.findNodeAndChildMaxZIndex(child);
              maxZIndex = Math.max(childMaxZIndex, maxZIndex);
            }
          });
        }
        return maxZIndex;
      };
      this.checkAndCorrectTopGroupZIndex = function(nodes) {
        var maxZIndex = DEFAULT_BOTTOM_Z_INDEX2;
        nodes.forEach(function(node) {
          var nodeModel = _this.lf.getNodeModelById(node.id);
          if (nodeModel) {
            var currentNodeMaxZIndex = _this.findNodeAndChildMaxZIndex(nodeModel);
            if (currentNodeMaxZIndex > maxZIndex) {
              maxZIndex = currentNodeMaxZIndex;
            }
          }
        });
        if (_this.topGroupZIndex >= maxZIndex) {
          return;
        }
        var allGroupNodes = _this.lf.graphModel.nodes.filter(function(node) {
          return node.isGroup;
        });
        var max = _this.topGroupZIndex;
        for (var i = 0; i < allGroupNodes.length; i++) {
          var groupNode = allGroupNodes[i];
          if (groupNode.zIndex > max) {
            max = groupNode.zIndex;
          }
        }
        _this.topGroupZIndex = max;
      };
      this.nodeSelected = function(_a2) {
        var data = _a2.data, isMultiple = _a2.isMultiple, isSelected = _a2.isSelected;
        var nodeModel = _this.lf.getNodeModelById(data.id);
        _this.toFrontGroup(nodeModel);
        if (_this.topGroupZIndex > DEFAULT_TOP_Z_INDEX) {
          _this.topGroupZIndex = DEFAULT_BOTTOM_Z_INDEX2;
          var allGroups = _this.lf.graphModel.nodes.filter(function(node) {
            return node.isGroup;
          }).sort(function(a, b2) {
            return a.zIndex - b2.zIndex;
          });
          var preZIndex = 0;
          for (var i = 0; i < allGroups.length; i++) {
            var group = allGroups[i];
            if (group.zIndex !== preZIndex) {
              _this.topGroupZIndex++;
              preZIndex = group.zIndex;
            }
            group.setZIndex(_this.topGroupZIndex);
          }
        }
        if (isMultiple && isSelected) {
          if (nodeModel === null || nodeModel === void 0 ? void 0 : nodeModel.isGroup) {
            ;
            nodeModel.children.forEach(function(child) {
              var childModel = _this.lf.graphModel.getElement(child);
              childModel === null || childModel === void 0 ? void 0 : childModel.setSelected(false);
            });
          } else {
            var groupId = _this.nodeGroupMap.get(data.id);
            if (groupId) {
              var groupModel = _this.lf.getNodeModelById(groupId);
              (groupModel === null || groupModel === void 0 ? void 0 : groupModel.isSelected) && (nodeModel === null || nodeModel === void 0 ? void 0 : nodeModel.setSelected(false));
            }
          }
        }
      };
      this.toFrontGroup = function(model) {
        if (!model || !model.isGroup) {
          return;
        }
        _this.topGroupZIndex++;
        model.setZIndex(_this.topGroupZIndex);
        if (model.children) {
          ;
          model.children.forEach(function(nodeId) {
            var node = _this.lf.getNodeModelById(nodeId);
            _this.toFrontGroup(node);
          });
        }
      };
      lf.register(GroupNode_default);
      this.lf = lf;
      lf.graphModel.addNodeMoveRules(function(model, deltaX, deltaY) {
        if (model.isGroup) {
          var nodeIds = _this.getNodeAllChild(model);
          lf.graphModel.moveNodes(nodeIds, deltaX, deltaY, true);
          return true;
        }
        var groupModel = lf.getNodeModelById(_this.nodeGroupMap.get(model.id));
        if (groupModel && groupModel.isRestrict) {
          var _a2 = model.getBounds(), x1 = _a2.x1, y1 = _a2.y1, x2 = _a2.x2, y2 = _a2.y2;
          return groupModel.isAllowMoveTo({
            x1: x1 + deltaX,
            y1: y1 + deltaY,
            x2: x2 + deltaX,
            y2: y2 + deltaY
          });
        }
        return true;
      });
      lf.graphModel.group = this;
      lf.on("node:add,node:drop,node:dnd-add", this.appendNodeToGroup);
      lf.on("node:delete", this.deleteGroupChild);
      lf.on("node:dnd-drag,node:drag", this.setActiveGroup);
      lf.on("node:click", this.nodeSelected);
      lf.on("graph:rendered", this.graphRendered);
      lf.addElements = function(_a2, distance) {
        var selectedNodes = _a2.nodes, selectedEdges = _a2.edges;
        var nodeIdMap = {};
        var elements = {
          nodes: [],
          edges: []
        };
        var groupInnerEdges = [];
        forEach_default(selectedNodes, function(node) {
          var preId = node.id;
          var children = node.children, rest = __rest(node, ["children"]);
          var nodeModel = lf.addNode(rest);
          if (!nodeModel) {
            return {
              nodes: [],
              edges: []
            };
          }
          if (preId)
            nodeIdMap[preId] = nodeModel.id;
          elements.nodes.push(nodeModel);
          var edgesArray = _this.createAllChildNodes(nodeIdMap, children, nodeModel, distance).edgesArray;
          groupInnerEdges.push.apply(groupInnerEdges, __spreadArray8([], __read10(edgesArray), false));
        });
        groupInnerEdges.forEach(function(edge) {
          _this.createEdgeModel(edge, nodeIdMap, distance);
        });
        forEach_default(selectedEdges, function(edge) {
          var edgeModel = _this.createEdgeModel(edge, nodeIdMap, 0);
          elements.edges.push(edgeModel);
        });
        return elements;
      };
    }
    Group2.prototype.createAllChildNodes = function(nodeIdMap, children, current, distance) {
      var _this = this;
      var lf = this.lf;
      var edgesDataArray = [];
      var edgesNodeModelArray = [];
      var nodesArray = [];
      children === null || children === void 0 ? void 0 : children.forEach(function(childId) {
        var childNodeModel = lf.getNodeModelById(childId);
        if (childNodeModel) {
          var x = childNodeModel.x, y = childNodeModel.y, properties = childNodeModel.properties, type3 = childNodeModel.type, text = childNodeModel.text, rotate = childNodeModel.rotate, children_1 = childNodeModel.children;
          var eventType = EventType.NODE_GROUP_COPY || "node:group-copy-add";
          var newChildModel = lf.addNode({
            x: x + distance,
            y: y + distance,
            properties,
            type: type3,
            text: __assign17(__assign17({}, text), { x: text.x + distance, y: text.y + distance }),
            rotate
            // 如果不传递type，会自动触发NODE_ADD
            // 有概率触发appendToGroup
          }, eventType);
          current.addChild(newChildModel.id);
          nodeIdMap[childId] = newChildModel.id;
          nodesArray.push(newChildModel);
          childNodeModel.incoming.edges.forEach(function(edge) {
            edgesNodeModelArray.push(edge);
          });
          childNodeModel.outgoing.edges.forEach(function(edge) {
            edgesNodeModelArray.push(edge);
          });
          if (children_1 instanceof Set) {
            var _a = _this.createAllChildNodes(nodeIdMap, children_1, newChildModel, distance), childNodes = _a.nodesArray, childEdges = _a.edgesArray;
            nodesArray.push.apply(nodesArray, __spreadArray8([], __read10(childNodes), false));
            edgesDataArray.push.apply(edgesDataArray, __spreadArray8([], __read10(childEdges), false));
          }
        }
      });
      var filterEdgesArray = edgesNodeModelArray.filter(function(edge) {
        return nodeIdMap[edge.sourceNodeId] && nodeIdMap[edge.targetNodeId];
      });
      var filterEdgesDataArray = filterEdgesArray.map(function(item) {
        return item.getData();
      });
      return {
        nodesArray,
        edgesArray: edgesDataArray.concat(filterEdgesDataArray)
      };
    };
    Group2.prototype.createEdgeModel = function(edge, nodeIdMap, distance) {
      var lf = this.lf;
      var sourceId = edge.sourceNodeId;
      var targetId = edge.targetNodeId;
      if (nodeIdMap[sourceId])
        sourceId = nodeIdMap[sourceId];
      if (nodeIdMap[targetId])
        targetId = nodeIdMap[targetId];
      var type3 = edge.type, startPoint = edge.startPoint, endPoint = edge.endPoint, pointsList = edge.pointsList, text = edge.text;
      var newStartPoint = {
        x: ((startPoint === null || startPoint === void 0 ? void 0 : startPoint.x) || 0) + distance,
        y: ((startPoint === null || startPoint === void 0 ? void 0 : startPoint.y) || 0) + distance
      };
      var newEndPoint = {
        x: ((endPoint === null || endPoint === void 0 ? void 0 : endPoint.x) || 0) + distance,
        y: ((endPoint === null || endPoint === void 0 ? void 0 : endPoint.y) || 0) + distance
      };
      var newPointsList = [];
      if (pointsList && pointsList.length > 0) {
        newPointsList = pointsList.map(function(point) {
          point.x += distance;
          point.y += distance;
          return point;
        });
      }
      var newText = text;
      if (text && typeof text !== "string") {
        ;
        newText.x = text.x + distance;
        newText.y = text.y + distance;
      }
      return lf.graphModel.addEdge({
        type: type3,
        startPoint: newStartPoint,
        endPoint: newEndPoint,
        sourceNodeId: sourceId,
        targetNodeId: targetId,
        pointsList: newPointsList,
        text: newText
      });
    };
    Group2.prototype.getNodeAllChild = function(model) {
      var _this = this;
      var nodeIds = [];
      if (model.children) {
        ;
        model.children.forEach(function(nodeId) {
          nodeIds.push(nodeId);
          var nodeModel = _this.lf.getNodeModelById(nodeId);
          if (nodeModel === null || nodeModel === void 0 ? void 0 : nodeModel.isGroup) {
            nodeIds = nodeIds.concat(_this.getNodeAllChild(nodeModel));
          }
        });
      }
      return nodeIds;
    };
    Group2.prototype.getGroup = function(bounds, nodeData) {
      var nodes = this.lf.graphModel.nodes;
      var groups = nodes.filter(function(node) {
        return node.isGroup && node.isInRange(bounds) && node.id !== nodeData.id;
      });
      if (groups.length === 0)
        return;
      if (groups.length === 1)
        return groups[0];
      var topGroup = groups[groups.length - 1];
      for (var i = groups.length - 2; i >= 0; i--) {
        if (groups[i].zIndex > topGroup.zIndex) {
          topGroup = groups[i];
        }
      }
      return topGroup;
    };
    Group2.prototype.getNodeGroup = function(nodeId) {
      var groupId = this.nodeGroupMap.get(nodeId);
      if (groupId) {
        return this.lf.getNodeModelById(groupId);
      }
    };
    Group2.prototype.render = function() {
    };
    Group2.prototype.destroy = function() {
    };
    Group2.pluginName = "group";
    return Group2;
  }()
);

// node_modules/@logicflow/extension/es/bpmn-elements/presets/Task/subProcess.js
var __extends22 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign18 = function() {
  __assign18 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign18.apply(this, arguments);
};
function SubProcessFactory() {
  var view = (
    /** @class */
    function(_super) {
      __extends22(view2, _super);
      function view2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      view2.prototype.getFoldIcon = function() {
        var model2 = this.props.model;
        var _a = model2, x = _a.x, y = _a.y, width = _a.width, height = _a.height, properties = _a.properties, foldable = _a.foldable;
        var foldX = model2.x - model2.width / 2 + 5;
        var foldY = model2.y - model2.height / 2 + 5;
        if (!foldable)
          return null;
        var iconIcon = _("path", {
          fill: "none",
          stroke: "#818281",
          strokeWidth: 2,
          "pointer-events": "none",
          d: properties.isFolded ? "M ".concat(foldX + 3, ",").concat(foldY + 6, " ").concat(foldX + 11, ",").concat(foldY + 6, " M").concat(foldX + 7, ",").concat(foldY + 2, " ").concat(foldX + 7, ",").concat(foldY + 10) : "M ".concat(foldX + 3, ",").concat(foldY + 6, " ").concat(foldX + 11, ",").concat(foldY + 6, " ")
        });
        return _("g", {}, [
          _("rect", {
            height: 12,
            width: 14,
            rx: 2,
            ry: 2,
            strokeWidth: 1,
            fill: "#F4F5F6",
            stroke: "#CECECE",
            cursor: "pointer",
            x: x - width / 2 + 5,
            y: y - height / 2 + 5,
            onClick: function(e) {
              var _a2, _b;
              (_b = (_a2 = e.stopPropagation()(model2)).foldGroup) === null || _b === void 0 ? void 0 : _b.call(_a2, !properties.isFolded);
            }
          }),
          iconIcon
        ]);
      };
      view2.prototype.getResizeShape = function() {
        var model2 = this.props.model;
        var x = model2.x, y = model2.y, width = model2.width, height = model2.height;
        var style2 = model2.getNodeStyle();
        var foldRectAttrs = __assign18(__assign18({}, style2), { x: x - width / 2, y: y - height / 2, width, height, stroke: "black", strokeWidth: 2, strokeDasharray: "0 0" });
        return _("g", {}, [
          // this.getAddAbleShape(),
          _("rect", __assign18({}, foldRectAttrs)),
          this.getFoldIcon()
        ]);
      };
      return view2;
    }(GroupNode)
  );
  var model = (
    /** @class */
    function(_super) {
      __extends22(model2, _super);
      function model2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      model2.prototype.initNodeData = function(data) {
        _super.prototype.initNodeData.call(this, data);
        this.foldable = true;
        this.resizable = true;
        this.width = 400;
        this.height = 200;
        this.resetWidthHeight();
        this.isTaskNode = true;
        this.boundaryEvents = [];
      };
      model2.prototype.resetWidthHeight = function() {
        var _a, _b;
        var width = (_a = this.properties.iniProp) === null || _a === void 0 ? void 0 : _a.width;
        var height = (_b = this.properties.iniProp) === null || _b === void 0 ? void 0 : _b.height;
        width && (this.width = width);
        height && (this.height = height);
      };
      model2.prototype.getNodeStyle = function() {
        var style2 = _super.prototype.getNodeStyle.call(this);
        style2.stroke = "#989891";
        style2.strokeWidth = 1;
        style2.strokeDasharray = "3 3";
        if (this.isSelected) {
          style2.stroke = "rgb(124, 15, 255)";
        }
        var isBoundaryEventTouchingTask = this.properties.isBoundaryEventTouchingTask;
        if (isBoundaryEventTouchingTask) {
          style2.stroke = "#00acff";
          style2.strokeWidth = 2;
        }
        return style2;
      };
      model2.prototype.addChild = function(id) {
        var model3 = this.graphModel.getElement(id);
        model3 === null || model3 === void 0 ? void 0 : model3.setProperties({
          parent: this.id
        });
        _super.prototype.addChild.call(this, id);
      };
      model2.prototype.getAnchorStyle = function() {
        var style2 = _super.prototype.getAnchorStyle.call(this);
        style2.stroke = "#000";
        style2.fill = "#fff";
        if (!style2.hover) {
          style2.hover = {};
        }
        style2.hover.stroke = "transparent";
        return style2;
      };
      model2.prototype.getOutlineStyle = function() {
        var style2 = _super.prototype.getOutlineStyle.call(this);
        style2.stroke = "transparent";
        if (!style2.hover) {
          style2.hover = {};
        }
        style2.hover.stroke = "transparent";
        return style2;
      };
      model2.prototype.setTouching = function(flag) {
        this.setProperty("isBoundaryEventTouchingTask", flag);
      };
      model2.prototype.addBoundaryEvent = function(nodeId) {
        this.setTouching(false);
        if (this.boundaryEvents.find(function(item) {
          return item === nodeId;
        })) {
          return false;
        }
        var boundaryEvent2 = this.graphModel.getNodeModelById(nodeId);
        boundaryEvent2 === null || boundaryEvent2 === void 0 ? void 0 : boundaryEvent2.setProperties({
          attachedToRef: this.id
        });
        this.boundaryEvents.push(nodeId);
        return true;
      };
      model2.prototype.deleteBoundaryEvent = function(nodeId) {
        this.boundaryEvents = this.boundaryEvents.filter(function(item) {
          return item !== nodeId;
        });
      };
      return model2;
    }(GroupNodeModel)
  );
  return {
    type: "bpmn:subProcess",
    view,
    model
  };
}

// node_modules/@logicflow/extension/es/bpmn-elements/presets/Task/index.js
var __values = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
function boundaryEvent(lf) {
  lf.on("node:drag,node:dnd-drag", checkAppendBoundaryEvent);
  lf.on("node:drop,node:dnd-add", appendBoundaryEvent);
  lf.graphModel.addNodeMoveRules(function(model, deltaX, deltaY) {
    if (model.isTaskNode) {
      var nodeIds = model.boundaryEvents;
      lf.graphModel.moveNodes(nodeIds, deltaX, deltaY, true);
      return true;
    }
    return true;
  });
  function appendBoundaryEvent(_a) {
    var e_1, _b;
    var data = _a.data;
    var type3 = data.type, id = data.id;
    if (type3 !== "bpmn:boundaryEvent") {
      return;
    }
    var nodes = lf.graphModel.nodes;
    try {
      for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
        var node = nodes_1_1.value;
        if (node.isTaskNode) {
          var nodeId = null;
          if ((nodeId = isBoundaryEventCloseToTask(node, data)) !== null) {
            var eventModel = lf.graphModel.getNodeModelById(id);
            var nodeModel = lf.graphModel.getNodeModelById(nodeId);
            var attachedToRef = eventModel.properties.attachedToRef;
            if (attachedToRef && attachedToRef !== nodeId) {
              lf.graphModel.getNodeModelById(attachedToRef).deleteBoundaryEvent(id);
            }
            nodeModel.addBoundaryEvent(id);
            return;
          }
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (nodes_1_1 && !nodes_1_1.done && (_b = nodes_1.return)) _b.call(nodes_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  }
  function checkAppendBoundaryEvent(_a) {
    var e_2, _b;
    var data = _a.data;
    var type3 = data.type;
    if (type3 !== "bpmn:boundaryEvent") {
      return;
    }
    var nodes = lf.graphModel.nodes;
    try {
      for (var nodes_2 = __values(nodes), nodes_2_1 = nodes_2.next(); !nodes_2_1.done; nodes_2_1 = nodes_2.next()) {
        var node = nodes_2_1.value;
        if (node.isTaskNode) {
          if (isBoundaryEventCloseToTask(node, data)) {
            node.setTouching(true);
          } else {
            node.setTouching(false);
          }
        }
      }
    } catch (e_2_1) {
      e_2 = { error: e_2_1 };
    } finally {
      try {
        if (nodes_2_1 && !nodes_2_1.done && (_b = nodes_2.return)) _b.call(nodes_2);
      } finally {
        if (e_2) throw e_2.error;
      }
    }
  }
  function isBoundaryEventCloseToTask(task, event) {
    var offset = 5;
    var tx = task.x, ty = task.y, twidth = task.width, theight = task.height, id = task.id;
    var bbox = {
      minX: tx - twidth / 2,
      maxX: tx + twidth / 2,
      minY: ty - theight / 2,
      maxY: ty + theight / 2
    };
    var bx = event.x, by = event.y;
    var outerBBox = {
      minX: bbox.minX - offset,
      maxX: bbox.maxX + offset,
      minY: bbox.minY - offset,
      maxY: bbox.maxY + offset
    };
    var innerBBox = {
      minX: bbox.minX + offset,
      maxX: bbox.maxX - offset,
      minY: bbox.minY + offset,
      maxY: bbox.maxY - offset
    };
    if (bx > outerBBox.minX && bx < outerBBox.maxX && by > outerBBox.minY && by < outerBBox.maxY) {
      if (!(bx > innerBBox.minX && bx < innerBBox.maxX && by > innerBBox.minY && by < innerBBox.maxY)) {
        return id;
      }
    }
    return null;
  }
}
function registerTaskNodes(lf) {
  var ServiceTask2 = TaskNodeFactory("bpmn:serviceTask", serviceTaskIcon);
  var UserTask2 = TaskNodeFactory("bpmn:userTask", userTaskIcon);
  lf.register(ServiceTask2);
  lf.register(UserTask2);
  lf.register(SubProcessFactory());
  boundaryEvent(lf);
}

// node_modules/@logicflow/extension/es/bpmn-elements/presets/Flow/sequenceFlow.js
var __extends23 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign19 = function() {
  __assign19 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign19.apply(this, arguments);
};
function sequenceFlowFactory(props) {
  var model = (
    /** @class */
    function(_super) {
      __extends23(model2, _super);
      function model2(data, graphModel) {
        if (!data.id) {
          data.id = "Flow_".concat(genBpmnId());
        }
        var properties = __assign19(__assign19(__assign19({}, props || {}), data.properties), {
          // panels: ['condition'],
          isDefaultFlow: false
        });
        data.properties = properties;
        return _super.call(this, data, graphModel) || this;
      }
      model2.extendKey = "SequenceFlowModel";
      return model2;
    }(PolylineEdgeModel)
  );
  var view = (
    /** @class */
    function(_super) {
      __extends23(view2, _super);
      function view2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      view2.prototype.getStartArrow = function() {
        var model2 = this.props.model;
        var isDefaultFlow = model2.properties.isDefaultFlow;
        return isDefaultFlow ? _("path", {
          refX: 15,
          stroke: "#000000",
          strokeWidth: 2,
          d: "M 20 5 10 -5 z"
        }) : _("path", {
          d: ""
        });
      };
      view2.extendKey = "SequenceFlowEdge";
      return view2;
    }(PolylineEdge)
  );
  return {
    type: "bpmn:sequenceFlow",
    view,
    model
  };
}

// node_modules/@logicflow/extension/es/bpmn-elements/presets/Flow/index.js
var SequenceFlow2 = sequenceFlowFactory();
function registerFlows(lf) {
  lf.register(SequenceFlow2);
}

// node_modules/@logicflow/extension/es/bpmn-elements/index.js
var __read11 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var definitionConfig = [
  {
    nodes: ["startEvent", "intermediateCatchEvent", "boundaryEvent"],
    definition: [
      {
        type: "bpmn:timerEventDefinition",
        icon: timerIcon,
        properties: {
          definitionType: "bpmn:timerEventDefinition",
          timerValue: "",
          timerType: ""
        }
      }
    ]
  }
];
function useDefinition(definition) {
  function setDefinition(config) {
    function set(nodes, definitions) {
      nodes.forEach(function(name) {
        if (!(definition === null || definition === void 0 ? void 0 : definition[name])) {
          definition[name] = /* @__PURE__ */ new Map();
        }
        var map = definition === null || definition === void 0 ? void 0 : definition[name];
        definitions.forEach(function(define) {
          map.set(define.type, define);
        });
      });
      return definition;
    }
    config.forEach(function(define) {
      set(define.nodes, define.definition);
    });
  }
  return function() {
    return [definition, setDefinition];
  };
}
var BPMNElements = (
  /** @class */
  function() {
    function BPMNElements2(_a) {
      var lf = _a.lf;
      lf.definition = {};
      lf.useDefinition = useDefinition(lf.definition);
      var _b = __read11(lf.useDefinition(), 2), _definition = _b[0], setDefinition = _b[1];
      console.log("_definition", _definition);
      setDefinition(definitionConfig);
      registerEventNodes(lf);
      registerGatewayNodes(lf);
      registerFlows(lf);
      registerTaskNodes(lf);
      lf.setDefaultEdgeType("bpmn:sequenceFlow");
    }
    BPMNElements2.pluginName = "BpmnElementsPlugin";
    return BPMNElements2;
  }()
);

// node_modules/@logicflow/extension/es/bpmn-elements-adapter/constant.js
var StartEventConfig2 = {
  width: 40,
  height: 40
};
var EndEventConfig2 = {
  width: 40,
  height: 40
};
var BoundaryEventConfig = {
  width: 100,
  height: 80
};
var IntermediateEventConfig = {
  width: 100,
  height: 80
};
var ParallelGatewayConfig = {
  width: 100,
  height: 80
};
var InclusiveGatewayConfig = {
  width: 100,
  height: 80
};
var ExclusiveGatewayConfig2 = {
  width: 100,
  height: 80
};
var ServiceTaskConfig2 = {
  width: 100,
  height: 80
};
var UserTaskConfig2 = {
  width: 100,
  height: 80
};
var SubProcessConfig = {
  width: 100,
  height: 80
};

// node_modules/@logicflow/extension/es/bpmn-elements-adapter/xml2json.js
var XML2 = function() {
};
XML2.ObjTree = function() {
  return this;
};
XML2.ObjTree.VERSION = "0.23";
XML2.ObjTree.prototype.xmlDecl = '<?xml version="1.0" encoding="UTF-8" ?>\n';
XML2.ObjTree.prototype.attr_prefix = "-";
XML2.ObjTree.prototype.parseXML = function(xml) {
  var root;
  if (window.DOMParser) {
    var xmldom = new DOMParser();
    var dom = xmldom.parseFromString(xml, "application/xml");
    if (!dom)
      return;
    root = dom.documentElement;
  } else if (window.ActiveXObject) {
    xmldom = new ActiveXObject("Microsoft.XMLDOM");
    xmldom.async = false;
    xmldom.loadXML(xml);
    root = xmldom.documentElement;
  }
  if (!root)
    return;
  var data = this.parseDOM(root);
  return data;
};
XML2.ObjTree.prototype.parseHTTP = function(url, options, callback) {
  var myOpt = {};
  for (var key in options) {
    myOpt[key] = options[key];
  }
  if (!myOpt.method) {
    if (typeof myOpt.postBody === "undefined" && typeof myOpt.postbody === "undefined" && typeof myOpt.parameters === "undefined") {
      myOpt.method = "get";
    } else {
      myOpt.method = "post";
    }
  }
  if (callback) {
    myOpt.asynchronous = true;
    var __this_1 = this;
    var __func_1 = callback;
    var __save_1 = myOpt.onComplete;
    myOpt.onComplete = function(trans2) {
      var tree;
      if (trans2 && trans2.responseXML && trans2.responseXML.documentElement) {
        tree = __this_1.parseDOM(trans2.responseXML.documentElement);
      }
      __func_1(tree, trans2);
      if (__save_1)
        __save_1(trans2);
    };
  } else {
    myOpt.asynchronous = false;
  }
  var trans;
  if (typeof HTTP !== "undefined" && HTTP.Request) {
    myOpt.uri = url;
    var req = new HTTP.Request(myOpt);
    if (req)
      trans = req.transport;
  } else if (typeof Ajax !== "undefined" && Ajax.Request) {
    var req = new Ajax.Request(url, myOpt);
    if (req)
      trans = req.transport;
  }
  if (callback)
    return trans;
  if (trans && trans.responseXML && trans.responseXML.documentElement) {
    return this.parseDOM(trans.responseXML.documentElement);
  }
};
XML2.ObjTree.prototype.parseDOM = function(root) {
  if (!root)
    return;
  this.__force_array = {};
  if (this.force_array) {
    for (var i = 0; i < this.force_array.length; i++) {
      this.__force_array[this.force_array[i]] = 1;
    }
  }
  var json = this.parseElement(root);
  if (this.__force_array[root.nodeName]) {
    json = [json];
  }
  if (root.nodeType !== 11) {
    var tmp = {};
    tmp[root.nodeName] = json;
    json = tmp;
  }
  return json;
};
XML2.ObjTree.prototype.parseElement = function(elem) {
  if (elem.nodeType === 7) {
    return;
  }
  if (elem.nodeType === 3 || elem.nodeType === 4 || elem.nodeType === 8) {
    var bool = elem.nodeValue.match(/[^\x00-\x20]/);
    if (bool == null)
      return;
    return elem.nodeValue;
  }
  var retVal = null;
  var cnt = {};
  if (elem.attributes && elem.attributes.length) {
    retVal = {};
    for (var i = 0; i < elem.attributes.length; i++) {
      var key = elem.attributes[i].nodeName;
      if (typeof key !== "string")
        continue;
      var val = elem.attributes[i].nodeValue;
      try {
        val = JSON.parse(elem.attributes[i].nodeValue.replace(/'/g, '"'));
      } catch (error) {
        val = elem.attributes[i].nodeValue;
      }
      if (val === null || val === void 0)
        continue;
      key = this.attr_prefix + key;
      if (typeof cnt[key] === "undefined")
        cnt[key] = 0;
      cnt[key]++;
      this.addNode(retVal, key, cnt[key], val);
    }
  }
  if (elem.childNodes && elem.childNodes.length) {
    var textOnly = true;
    if (retVal)
      textOnly = false;
    for (var i = 0; i < elem.childNodes.length && textOnly; i++) {
      var nType = elem.childNodes[i].nodeType;
      if (nType === 3 || nType === 4 || nType === 8)
        continue;
      textOnly = false;
    }
    if (textOnly) {
      if (!retVal)
        retVal = "";
      for (var i = 0; i < elem.childNodes.length; i++) {
        retVal += elem.childNodes[i].nodeValue;
      }
    } else {
      if (!retVal)
        retVal = {};
      for (var i = 0; i < elem.childNodes.length; i++) {
        var key = elem.childNodes[i].nodeName;
        if (typeof key !== "string")
          continue;
        var val = this.parseElement(elem.childNodes[i]);
        if (!val)
          continue;
        if (typeof cnt[key] === "undefined")
          cnt[key] = 0;
        cnt[key]++;
        this.addNode(retVal, key, cnt[key], val);
      }
    }
  } else {
    retVal === null && (retVal = {});
  }
  return retVal;
};
XML2.ObjTree.prototype.addNode = function(hash, key, counts, val) {
  if (this.__force_array[key]) {
    if (counts === 1)
      hash[key] = [];
    hash[key][hash[key].length] = val;
  } else if (counts === 1) {
    hash[key] = val;
  } else if (counts === 2) {
    hash[key] = [hash[key], val];
  } else {
    hash[key][hash[key].length] = val;
  }
};
XML2.ObjTree.prototype.writeXML = function(tree) {
  var xml = this.hash_to_xml(null, tree);
  return this.xmlDecl + xml;
};
XML2.ObjTree.prototype.hash_to_xml = function(name, tree) {
  var elem = [];
  var attr = [];
  for (var key in tree) {
    if (!has_default(tree, key))
      continue;
    var val = tree[key];
    if (key.charAt(0) !== this.attr_prefix) {
      if (typeof val === "undefined" || val == null) {
        elem[elem.length] = "<".concat(key, " />");
      } else if (typeof val === "object" && val.constructor === Array) {
        elem[elem.length] = this.array_to_xml(key, val);
      } else if (typeof val === "object") {
        elem[elem.length] = this.hash_to_xml(key, val);
      } else {
        elem[elem.length] = this.scalar_to_xml(key, val);
      }
    } else {
      attr[attr.length] = " ".concat(key.substring(1), '="').concat(this.xml_escape(val), '"');
    }
  }
  var jattr = attr.join("");
  var jelem = elem.join("");
  if (typeof name === "undefined" || name == null) {
  } else if (elem.length > 0) {
    if (jelem.match(/\n/)) {
      jelem = "<".concat(name).concat(jattr, ">\n").concat(jelem, "</").concat(name, ">\n");
    } else {
      jelem = "<".concat(name).concat(jattr, ">").concat(jelem, "</").concat(name, ">\n");
    }
  } else {
    jelem = "<".concat(name).concat(jattr, " />\n");
  }
  return jelem;
};
XML2.ObjTree.prototype.array_to_xml = function(name, array) {
  var out = [];
  for (var i = 0; i < array.length; i++) {
    var val = array[i];
    if (typeof val === "undefined" || val == null) {
      out[out.length] = "<".concat(name, " />");
    } else if (typeof val === "object" && val.constructor === Array) {
      out[out.length] = this.array_to_xml(name, val);
    } else if (typeof val === "object") {
      out[out.length] = this.hash_to_xml(name, val);
    } else {
      out[out.length] = this.scalar_to_xml(name, val);
    }
  }
  return out.join("");
};
XML2.ObjTree.prototype.scalar_to_xml = function(name, text) {
  if (name === "#text") {
    return this.xml_escape(text);
  }
  return "<".concat(name, ">").concat(this.xml_escape(text), "</").concat(name, ">\n");
};
XML2.ObjTree.prototype.xml_escape = function(text) {
  return text.replace(/&/g, "&").replace(/</g, "<").replace(/>/g, ">").replace(/"/g, '"');
};
var lfXml2Json2 = function(xmlData) {
  return new XML2.ObjTree().parseXML(xmlData);
};

// node_modules/@logicflow/extension/es/bpmn-elements-adapter/json2xml.js
function type2(obj) {
  return Object.prototype.toString.call(obj);
}
function addSpace2(depth) {
  return "  ".repeat(depth);
}
function handleAttributes2(obj) {
  if (type2(obj) === "[object Object]") {
    return Object.keys(obj).reduce(function(tmp, key) {
      var tmpKey = key;
      if (key.charAt(0) === "-") {
        tmpKey = key.substring(1);
      }
      tmp[tmpKey] = handleAttributes2(obj[key]);
      return tmp;
    }, {});
  }
  if (Array.isArray(obj)) {
    return obj.map(function(item) {
      return handleAttributes2(item);
    });
  }
  return obj;
}
function getAttributes2(obj) {
  var tmp = obj;
  try {
    if (typeof tmp !== "string") {
      tmp = JSON.parse(obj);
    }
  } catch (error) {
    tmp = JSON.stringify(handleAttributes2(obj)).replace(/"/g, "'");
  }
  return tmp;
}
var tn2 = "	\n";
function toXml2(obj, name, depth) {
  var frontSpace = addSpace2(depth);
  var str = "";
  var prefix = tn2 + frontSpace;
  if (name === "-json")
    return "";
  if (name === "#text") {
    return prefix + obj;
  }
  if (name === "#cdata-section") {
    return "".concat(prefix, "<![CDATA[").concat(obj, "]]>");
  }
  if (name === "#comment") {
    return "".concat(prefix, "<!--").concat(obj, "-->");
  }
  if ("".concat(name).charAt(0) === "-") {
    return " ".concat(name.substring(1), '="').concat(getAttributes2(obj), '"');
  }
  if (Array.isArray(obj)) {
    str += obj.map(function(item) {
      return toXml2(item, name, depth + 1);
    }).join("");
  } else if (type2(obj) === "[object Object]") {
    var keys = Object.keys(obj);
    var attributes_1 = "";
    var children_1 = obj["-json"] ? tn2 + addSpace2(depth + 1) + obj["-json"] : "";
    str += "".concat(depth === 0 ? "" : prefix, "<").concat(name);
    keys.forEach(function(k) {
      k.charAt(0) === "-" ? attributes_1 += toXml2(obj[k], k, depth + 1) : children_1 += toXml2(obj[k], k, depth + 1);
    });
    str += attributes_1 + (children_1 !== "" ? ">".concat(children_1).concat(prefix, "</").concat(name, ">") : " />");
  } else {
    str += "".concat(prefix, "<").concat(name, ">").concat(obj.toString(), "</").concat(name, ">");
  }
  return str;
}
function lfJson2Xml2(obj) {
  var xmlStr = "";
  for (var key in obj) {
    xmlStr += toXml2(obj[key], key, 0);
  }
  return xmlStr;
}

// node_modules/@logicflow/extension/es/bpmn-elements-adapter/index.js
var __extends24 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign20 = function() {
  __assign20 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign20.apply(this, arguments);
};
var __rest2 = function(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var __values2 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read12 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray9 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var BpmnElements2;
(function(BpmnElements3) {
  BpmnElements3["START"] = "bpmn:startEvent";
  BpmnElements3["END"] = "bpmn:endEvent";
  BpmnElements3["INTERMEDIATE_CATCH"] = "bpmn:intermediateCatchEvent";
  BpmnElements3["INTERMEDIATE_THROW"] = "bpmn:intermediateThrowEvent";
  BpmnElements3["BOUNDARY"] = "bpmn:boundaryEvent";
  BpmnElements3["PARALLEL_GATEWAY"] = "bpmn:parallelGateway";
  BpmnElements3["INCLUSIVE_GATEWAY"] = "bpmn:inclusiveGateway";
  BpmnElements3["EXCLUSIVE_GATEWAY"] = "bpmn:exclusiveGateway";
  BpmnElements3["USER"] = "bpmn:userTask";
  BpmnElements3["SYSTEM"] = "bpmn:serviceTask";
  BpmnElements3["FLOW"] = "bpmn:sequenceFlow";
  BpmnElements3["SUBPROCESS"] = "bpmn:subProcess";
})(BpmnElements2 || (BpmnElements2 = {}));
var defaultAttrsForInput = [
  "-name",
  "-id",
  "bpmn:incoming",
  "bpmn:outgoing",
  "-sourceRef",
  "-targetRef",
  "-children"
];
var defaultRetainedProperties = [
  "properties",
  "startPoint",
  "endPoint",
  "pointsList"
];
var defaultExcludeFields = {
  in: [],
  out: [
    "properties.panels",
    "properties.nodeSize",
    "properties.definitionId",
    "properties.timerValue",
    "properties.timerType",
    "properties.definitionType",
    "properties.parent",
    "properties.isBoundaryEventTouchingTask"
  ]
};
var mergeInNOutObject = function(target, source) {
  var sourceKeys = Object.keys(source || {});
  sourceKeys.forEach(function(key) {
    if (target[key]) {
      var _a = source[key], fnIn = _a.in, fnOut = _a.out;
      if (fnIn) {
        target[key].in = fnIn;
      }
      if (fnOut) {
        target[key].out = fnOut;
      }
    } else {
      target[key] = source[key];
    }
  });
  return target;
};
var defaultTransformer = {
  "bpmn:startEvent": {
    out: function(data) {
      var _a, _b;
      var properties = data.properties;
      return ((_b = (_a = defaultTransformer[properties.definitionType]) === null || _a === void 0 ? void 0 : _a.out) === null || _b === void 0 ? void 0 : _b.call(_a, data)) || {};
    }
  },
  // 'bpmn:endEvent': undefined,
  "bpmn:intermediateCatchEvent": {
    out: function(data) {
      var _a, _b;
      var properties = data.properties;
      return ((_b = (_a = defaultTransformer[properties.definitionType]) === null || _a === void 0 ? void 0 : _a.out) === null || _b === void 0 ? void 0 : _b.call(_a, data)) || {};
    }
  },
  "bpmn:intermediateThrowEvent": {
    out: function(data) {
      var _a, _b;
      var properties = data.properties;
      return ((_b = (_a = defaultTransformer[properties.definitionType]) === null || _a === void 0 ? void 0 : _a.out) === null || _b === void 0 ? void 0 : _b.call(_a, data)) || {};
    }
  },
  "bpmn:boundaryEvent": {
    out: function(data) {
      var _a, _b;
      var properties = data.properties;
      return ((_b = (_a = defaultTransformer[properties.definitionType]) === null || _a === void 0 ? void 0 : _a.out) === null || _b === void 0 ? void 0 : _b.call(_a, data)) || {};
    }
  },
  // 'bpmn:userTask': undefined,
  "bpmn:sequenceFlow": {
    out: function(data) {
      var _a = data.properties, expressionType = _a.expressionType, condition = _a.condition;
      if (condition) {
        if (expressionType === "cdata") {
          return {
            json: '<bpmn:conditionExpression xsi:type="bpmn2:tFormalExpression"><![CDATA[${'.concat(condition, "}]]></bpmn:conditionExpression>")
          };
        }
        return {
          json: '<bpmn:conditionExpression xsi:type="bpmn2:tFormalExpression">'.concat(condition, "</bpmn:conditionExpression>")
        };
      }
      return {
        json: ""
      };
    }
  },
  // 'bpmn:subProcess': undefined,
  // 'bpmn:participant': undefined,
  "bpmn:timerEventDefinition": {
    out: function(data) {
      var _a = data.properties, timerType = _a.timerType, timerValue = _a.timerValue, definitionId = _a.definitionId;
      var typeFunc = function() {
        return "<bpmn:".concat(timerType, ' xsi:type="bpmn:tFormalExpression">').concat(timerValue, "</bpmn:").concat(timerType, ">");
      };
      return {
        json: '<bpmn:timerEventDefinition id="'.concat(definitionId, '"').concat(timerType && timerValue ? ">".concat(typeFunc(), "</bpmn:timerEventDefinition>") : "/>")
      };
    },
    in: function(key, data) {
      var e_1, _a, _b;
      var _c;
      var definitionType = key;
      var definitionId = data["-id"];
      var timerType = "";
      var timerValue = "";
      try {
        for (var _d = __values2(Object.keys(data)), _e = _d.next(); !_e.done; _e = _d.next()) {
          var key_1 = _e.value;
          if (key_1.includes("bpmn:")) {
            ;
            _b = __read12(key_1.split(":"), 2), timerType = _b[1];
            timerValue = (_c = data[key_1]) === null || _c === void 0 ? void 0 : _c["#text"];
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      return {
        "-definitionId": definitionId,
        "-definitionType": definitionType,
        "-timerType": timerType,
        "-timerValue": timerValue
      };
    }
  },
  "bpmn:conditionExpression": {
    in: function(_key, data) {
      var _a;
      var condition = "";
      var expressionType = "";
      if (data["#cdata-section"]) {
        expressionType = "cdata";
        condition = ((_a = /^\$\{(.*)\}$/g.exec(data["#cdata-section"])) === null || _a === void 0 ? void 0 : _a[1]) || "";
      } else if (data["#text"]) {
        expressionType = "normal";
        condition = data["#text"];
      }
      return {
        "-condition": condition,
        "-expressionType": expressionType
      };
    }
  }
};
function convertNormalToXml(other) {
  var _a = other !== null && other !== void 0 ? other : {}, retainedAttrsFields = _a.retainedAttrsFields, excludeFields = _a.excludeFields, transformer = _a.transformer;
  var retainedAttrsSet = new Set(__spreadArray9(__spreadArray9([], __read12(defaultRetainedProperties), false), __read12(retainedAttrsFields || []), false));
  var excludeFieldsSet = {
    in: new Set(__spreadArray9(__spreadArray9([], __read12(defaultExcludeFields.in), false), __read12((excludeFields === null || excludeFields === void 0 ? void 0 : excludeFields.in) || []), false)),
    out: new Set(__spreadArray9(__spreadArray9([], __read12(defaultExcludeFields.out), false), __read12((excludeFields === null || excludeFields === void 0 ? void 0 : excludeFields.out) || []), false))
  };
  defaultTransformer = mergeInNOutObject(defaultTransformer, transformer);
  return function(object) {
    var nodes = object.nodes;
    var edges = object.edges;
    function ToXmlJson(obj, path) {
      var e_2, _a2;
      if ((obj === null || obj === void 0 ? void 0 : obj.flag) === 1) {
        return;
      }
      var fn;
      if ((fn = defaultTransformer[obj.type]) && fn.out) {
        var output_1 = fn.out(obj);
        var keys = Object.keys(output_1);
        if (keys.length > 0) {
          keys.forEach(function(key2) {
            obj[key2] = output_1[key2];
          });
        }
      }
      if (obj === null || obj === void 0 ? void 0 : obj.children) {
        obj.children = obj.children.map(function(key2) {
          var target = nodes.find(function(item) {
            return item.id === key2;
          }) || edges.find(function(item) {
            return item.id === key2;
          });
          return target || {};
        });
      }
      var xmlJson = {};
      if (typeof obj === "string") {
        return obj;
      }
      if (Array.isArray(obj)) {
        return obj.map(function(item) {
          return ToXmlJson(item, "");
        }).filter(function(item) {
          return item != void 0;
        });
      }
      try {
        for (var _b = __values2(Object.entries(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var _d = __read12(_c.value, 2), key = _d[0], value = _d[1];
          if ((value === null || value === void 0 ? void 0 : value["flag"]) === 1) {
            return;
          }
          var newPath = [path, key].filter(function(item) {
            return item;
          }).join(".");
          if (excludeFieldsSet.out.has(newPath)) {
            continue;
          } else if (typeof value !== "object") {
            if (key.indexOf("-") === 0 || ["#text", "#cdata-section", "#comment"].includes(key)) {
              xmlJson[key] = value;
            } else {
              xmlJson["-".concat(key)] = value;
            }
          } else if (retainedAttrsSet.has(newPath)) {
            xmlJson["-".concat(key)] = ToXmlJson(value, newPath);
          } else {
            xmlJson[key] = ToXmlJson(value, newPath);
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      return xmlJson;
    }
    return ToXmlJson(object, "");
  };
}
function convertXmlToNormal(xmlJson) {
  var e_3, _a;
  var json = {};
  try {
    for (var _b = __values2(Object.entries(xmlJson)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var _d = __read12(_c.value, 2), key = _d[0], value = _d[1];
      if (key.indexOf("-") === 0) {
        json[key.substring(1)] = handleAttributes2(value);
      } else if (typeof value === "string") {
        json[key] = value;
      } else if (Object.prototype.toString.call(value) === "[object Object]") {
        json[key] = convertXmlToNormal(value);
      } else if (Array.isArray(value)) {
        json[key] = value.map(function(v) {
          return convertXmlToNormal(v);
        });
      } else {
        json[key] = value;
      }
    }
  } catch (e_3_1) {
    e_3 = { error: e_3_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    } finally {
      if (e_3) throw e_3.error;
    }
  }
  return json;
}
function convertLf2ProcessData2(bpmnData, data, other) {
  var _a;
  var nodeIdMap = /* @__PURE__ */ new Map();
  var xmlJsonData = convertNormalToXml(other)(data);
  xmlJsonData.nodes.forEach(function(node) {
    var nodeId = node["-id"], nodeType = node["-type"], text = node.text, children = node.children, otherProps = __rest2(node, ["-id", "-type", "text", "children"]);
    var processNode = { "-id": nodeId };
    if (text === null || text === void 0 ? void 0 : text["-value"]) {
      processNode["-name"] = text["-value"];
    }
    if (otherProps["-json"]) {
      processNode["-json"] = otherProps["-json"];
    }
    if (otherProps["-properties"]) {
      Object.assign(processNode, otherProps["-properties"]);
    }
    if (children) {
      processNode.children = children;
    }
    if (!bpmnData[nodeType]) {
      bpmnData[nodeType] = [];
    }
    bpmnData[nodeType].push(processNode);
    nodeIdMap.set(nodeId, processNode);
  });
  var sequenceFlow = xmlJsonData.edges.map(function(edge) {
    var id = edge["-id"], sourceNodeId = edge["-sourceNodeId"], targetNodeId = edge["-targetNodeId"], text = edge.text, otherProps = __rest2(edge, ["-id", "-sourceNodeId", "-targetNodeId", "text"]);
    var targetNode = nodeIdMap.get(targetNodeId);
    if (!targetNode["bpmn:incoming"]) {
      targetNode["bpmn:incoming"] = [];
    }
    targetNode["bpmn:incoming"].push(id);
    var edgeConfig = {
      "-id": id,
      "-sourceRef": sourceNodeId,
      "-targetRef": targetNodeId
    };
    if (text === null || text === void 0 ? void 0 : text["-value"]) {
      edgeConfig["-name"] = text["-value"];
    }
    if (otherProps["-json"]) {
      edgeConfig["-json"] = otherProps["-json"];
    }
    if (otherProps["-properties"]) {
      Object.assign(edgeConfig, otherProps["-properties"]);
    }
    return edgeConfig;
  });
  data.edges.forEach(function(_a2) {
    var sourceNodeId = _a2.sourceNodeId, id = _a2.id;
    var sourceNode = nodeIdMap.get(sourceNodeId);
    if (!sourceNode["bpmn:outgoing"]) {
      sourceNode["bpmn:outgoing"] = [];
    }
    sourceNode["bpmn:outgoing"].push(id);
  });
  (_a = bpmnData["bpmn:subProcess"]) === null || _a === void 0 ? void 0 : _a.forEach(function(item) {
    var setMap = {
      "bpmn:incoming": /* @__PURE__ */ new Set(),
      "bpmn:outgoing": /* @__PURE__ */ new Set()
    };
    var edgesInSubProcess = [];
    item.children.forEach(function(child) {
      var _a2;
      var target = nodeIdMap.get(child["-id"]);
      ["bpmn:incoming", "bpmn:outgoing"].forEach(function(key) {
        target[key] && target[key].forEach(function(value) {
          setMap[key].add(value);
        });
      });
      var index = (_a2 = bpmnData[child["-type"]]) === null || _a2 === void 0 ? void 0 : _a2.findIndex(function(_item) {
        return _item["-id"] === child["-id"];
      });
      if (index >= 0) {
        bpmnData[child["-type"]].splice(index, 1);
      }
      nodeIdMap.delete(child["-id"]);
      if (!item[child["-type"]]) {
        item[child["-type"]] = [];
      }
      item[child["-type"]].push(target);
    });
    var incomingSet = setMap["bpmn:incoming"], outgoingSet = setMap["bpmn:outgoing"];
    outgoingSet.forEach(function(value) {
      incomingSet.has(value) && edgesInSubProcess.push(value);
    });
    var _loop_1 = function(i2) {
      var index = sequenceFlow.findIndex(function(item2) {
        return item2["-id"] === edgesInSubProcess[i2];
      });
      if (index >= 0) {
        if (!item["bpmn:sequenceFlow"]) {
          item["bpmn:sequenceFlow"] = [];
        }
        item["bpmn:sequenceFlow"].push(sequenceFlow[index]);
        sequenceFlow.splice(index, 1);
      } else {
        i2++;
      }
      out_i_1 = i2;
    };
    var out_i_1;
    for (var i = 0; i < edgesInSubProcess.length; ) {
      _loop_1(i);
      i = out_i_1;
    }
    delete item.children;
  });
  bpmnData[BpmnElements2.FLOW] = sequenceFlow;
  return bpmnData;
}
function convertLf2DiagramData2(bpmnDiagramData, data) {
  bpmnDiagramData["bpmndi:BPMNEdge"] = data.edges.map(function(edge) {
    var _a;
    var edgeId = edge.id;
    var pointsList = edge.pointsList.map(function(_a2) {
      var x = _a2.x, y = _a2.y;
      return {
        "-x": x,
        "-y": y
      };
    });
    var diagramData = {
      "-id": "".concat(edgeId, "_di"),
      "-bpmnElement": edgeId,
      "di:waypoint": pointsList
    };
    if ((_a = edge.text) === null || _a === void 0 ? void 0 : _a.value) {
      diagramData["bpmndi:BPMNLabel"] = {
        "dc:Bounds": {
          "-x": edge.text.x - edge.text.value.length * 10 / 2,
          "-y": edge.text.y - 7,
          "-width": edge.text.value.length * 10,
          "-height": 14
        }
      };
    }
    return diagramData;
  });
  bpmnDiagramData["bpmndi:BPMNShape"] = data.nodes.map(function(node) {
    var _a;
    var nodeId = node.id;
    var width = 100;
    var height = 80;
    var x = node.x, y = node.y;
    var shapeConfig = BPMNBaseAdapter.shapeConfigMap.get(node.type);
    if (shapeConfig) {
      width = shapeConfig.width;
      height = shapeConfig.height;
    }
    x -= width / 2;
    y -= height / 2;
    var diagramData = {
      "-id": "".concat(nodeId, "_di"),
      "-bpmnElement": nodeId,
      "dc:Bounds": {
        "-x": x,
        "-y": y,
        "-width": width,
        "-height": height
      }
    };
    if ((_a = node.text) === null || _a === void 0 ? void 0 : _a.value) {
      diagramData["bpmndi:BPMNLabel"] = {
        "dc:Bounds": {
          "-x": node.text.x - node.text.value.length * 10 / 2,
          "-y": node.text.y - 7,
          "-width": node.text.value.length * 10,
          "-height": 14
        }
      };
    }
    return diagramData;
  });
}
var ignoreType = ["bpmn:incoming", "bpmn:outgoing"];
function convertBpmn2LfData2(bpmnData, other) {
  var nodes = [];
  var edges = [];
  var eleMap = /* @__PURE__ */ new Map();
  var _a = other !== null && other !== void 0 ? other : {}, transformer = _a.transformer, excludeFields = _a.excludeFields;
  var excludeFieldsSet = {
    in: new Set(__spreadArray9(__spreadArray9([], __read12(defaultExcludeFields.in), false), __read12((excludeFields === null || excludeFields === void 0 ? void 0 : excludeFields.in) || []), false)),
    out: new Set(__spreadArray9(__spreadArray9([], __read12(defaultExcludeFields.out), false), __read12((excludeFields === null || excludeFields === void 0 ? void 0 : excludeFields.out) || []), false))
  };
  defaultTransformer = mergeInNOutObject(defaultTransformer, transformer);
  var definitions = bpmnData["bpmn:definitions"];
  if (definitions) {
    var process_1 = definitions["bpmn:process"];
    (function(data, callbacks) {
      callbacks.forEach(function(callback) {
        try {
          Object.keys(data).forEach(function(key) {
            try {
              callback(key);
            } catch (error) {
              console.error(error);
            }
          });
        } catch (error) {
          console.error(error);
        }
      });
    })(process_1, [
      function(key) {
        function subProcessProcessing(data2) {
          if (!data2["-children"]) {
            data2["-children"] = [];
          }
          Object.keys(data2).forEach(function(key2) {
            var _a2;
            if (key2.indexOf("bpmn:") === 0 && !ignoreType.includes(key2)) {
              if (!process_1[key2]) {
                process_1[key2] = [];
              }
              !Array.isArray(process_1[key2]) && (process_1[key2] = [process_1[key2]]);
              Array.isArray(data2[key2]) ? (_a2 = process_1[key2]).push.apply(_a2, __spreadArray9([], __read12(data2[key2]), false)) : process_1[key2].push(data2[key2]);
              if (Array.isArray(data2[key2])) {
                data2[key2].forEach(function(item) {
                  !key2.includes("Flow") && data2["-children"].push(item["-id"]);
                });
              } else {
                !key2.includes("Flow") && data2["-children"].push(data2[key2]["-id"]);
              }
              delete data2[key2];
            }
          });
        }
        if (key === "bpmn:subProcess") {
          var data = process_1[key];
          if (Array.isArray(data)) {
            data.forEach(function(item) {
              key === "bpmn:subProcess" && subProcessProcessing(item);
            });
          } else {
            subProcessProcessing(data);
          }
        }
      },
      function(key) {
        var fn = function(obj) {
          Object.keys(obj).forEach(function(key2) {
            var _a2, _b;
            if (key2.includes("bpmn:")) {
              var props_1 = {};
              if (defaultTransformer[key2] && defaultTransformer[key2].in) {
                props_1 = (_b = (_a2 = defaultTransformer[key2]).in) === null || _b === void 0 ? void 0 : _b.call(_a2, key2, lodash_default_default.cloneDeep(obj[key2]));
                delete obj[key2];
              } else {
                func(obj[key2]);
              }
              var keys = void 0;
              if ((keys = Reflect.ownKeys(props_1)).length > 0) {
                keys.forEach(function(key3) {
                  Reflect.set(obj, key3, props_1[key3]);
                });
              }
            }
          });
        };
        function func(data) {
          eleMap.set(data["-id"], data);
          if (Array.isArray(data)) {
            data.forEach(function(item) {
              func(item);
            });
          } else if (typeof data === "object") {
            fn(data);
          }
        }
        func(process_1[key]);
      },
      function(key) {
        if (key.indexOf("bpmn:") === 0) {
          var value = process_1[key];
          if (key === "bpmn:sequenceFlow") {
            var bpmnEdges = definitions["bpmndi:BPMNDiagram"]["bpmndi:BPMNPlane"]["bpmndi:BPMNEdge"];
            edges = getLfEdges2(value, bpmnEdges);
          } else {
            var shapes = definitions["bpmndi:BPMNDiagram"]["bpmndi:BPMNPlane"]["bpmndi:BPMNShape"];
            if (key === "bpmn:boundaryEvent") {
              var data = process_1[key];
              var fn_1 = function(item) {
                var attachedToRef = item["-attachedToRef"];
                var attachedToNode = eleMap.get(attachedToRef);
                if (!attachedToNode["-boundaryEvents"]) {
                  attachedToNode["-boundaryEvents"] = [];
                }
                attachedToNode["-boundaryEvents"].push(item["-id"]);
              };
              if (Array.isArray(data)) {
                data.forEach(function(item) {
                  fn_1(item);
                });
              } else {
                fn_1(data);
              }
            }
            nodes = nodes.concat(getLfNodes2(value, shapes, key));
          }
        }
      }
    ]);
  }
  var ignoreFields = function(obj, filterSet, path) {
    Object.keys(obj).forEach(function(key) {
      var tmpPath = path ? "".concat(path, ".").concat(key) : key;
      if (filterSet.has(tmpPath)) {
        delete obj[key];
      } else if (typeof obj[key] === "object") {
        ignoreFields(obj[key], filterSet, tmpPath);
      }
    });
  };
  nodes.forEach(function(node) {
    var _a2, _b;
    if ((_a2 = other === null || other === void 0 ? void 0 : other.mapping) === null || _a2 === void 0 ? void 0 : _a2.in) {
      var mapping = (_b = other === null || other === void 0 ? void 0 : other.mapping) === null || _b === void 0 ? void 0 : _b.in;
      var type3 = node.type;
      if (mapping[type3]) {
        node.type = mapping[type3];
      }
    }
    ignoreFields(node, excludeFieldsSet.in, "");
  });
  edges.forEach(function(edge) {
    var _a2, _b;
    if ((_a2 = other === null || other === void 0 ? void 0 : other.mapping) === null || _a2 === void 0 ? void 0 : _a2.in) {
      var mapping = (_b = other === null || other === void 0 ? void 0 : other.mapping) === null || _b === void 0 ? void 0 : _b.in;
      var type3 = edge.type;
      if (mapping[type3]) {
        edge.type = mapping[type3];
      }
    }
    ignoreFields(edge, excludeFieldsSet.in, "");
  });
  return {
    nodes,
    edges
  };
}
function getLfNodes2(value, shapes, key) {
  var nodes = [];
  if (Array.isArray(value)) {
    value.forEach(function(val) {
      var shapeValue2;
      if (Array.isArray(shapes)) {
        shapeValue2 = shapes.find(function(shape) {
          return shape["-bpmnElement"] === val["-id"];
        });
      } else {
        shapeValue2 = shapes;
      }
      var node2 = getNodeConfig2(shapeValue2, key, val);
      nodes.push(node2);
    });
  } else {
    var shapeValue = void 0;
    if (Array.isArray(shapes)) {
      shapeValue = shapes.find(function(shape) {
        return shape["-bpmnElement"] === value["-id"];
      });
    } else {
      shapeValue = shapes;
    }
    var node = getNodeConfig2(shapeValue, key, value);
    nodes.push(node);
  }
  return nodes;
}
function getNodeConfig2(shapeValue, type3, processValue) {
  var x = Number(shapeValue["dc:Bounds"]["-x"]);
  var y = Number(shapeValue["dc:Bounds"]["-y"]);
  var children = processValue["-children"];
  var name = processValue["-name"];
  var shapeConfig = BPMNBaseAdapter.shapeConfigMap.get(type3);
  if (shapeConfig) {
    x += shapeConfig.width / 2;
    y += shapeConfig.height / 2;
  }
  var properties = {};
  Object.entries(processValue).forEach(function(_a) {
    var _b = __read12(_a, 2), key = _b[0], value = _b[1];
    if (!defaultAttrsForInput.includes(key)) {
      properties[key] = value;
    }
  });
  properties = convertXmlToNormal(properties);
  var text;
  if (name) {
    text = {
      x,
      y,
      value: name
    };
    if (shapeValue["bpmndi:BPMNLabel"] && shapeValue["bpmndi:BPMNLabel"]["dc:Bounds"]) {
      var textBounds = shapeValue["bpmndi:BPMNLabel"]["dc:Bounds"];
      text.x = Number(textBounds["-x"]) + Number(textBounds["-width"]) / 2;
      text.y = Number(textBounds["-y"]) + Number(textBounds["-height"]) / 2;
    }
  }
  var nodeConfig = {
    id: shapeValue["-bpmnElement"],
    type: type3,
    x,
    y,
    properties
  };
  children && (nodeConfig.children = children);
  if (text) {
    nodeConfig.text = text;
  }
  return nodeConfig;
}
function getLfEdges2(value, bpmnEdges) {
  var edges = [];
  if (Array.isArray(value)) {
    value.forEach(function(val) {
      var edgeValue2;
      if (Array.isArray(bpmnEdges)) {
        edgeValue2 = bpmnEdges.find(function(edge) {
          return edge["-bpmnElement"] === val["-id"];
        });
      } else {
        edgeValue2 = bpmnEdges;
      }
      edges.push(getEdgeConfig2(edgeValue2, val));
    });
  } else {
    var edgeValue = void 0;
    if (Array.isArray(bpmnEdges)) {
      edgeValue = bpmnEdges.find(function(edge) {
        return edge["-bpmnElement"] === value["-id"];
      });
    } else {
      edgeValue = bpmnEdges;
    }
    edges.push(getEdgeConfig2(edgeValue, value));
  }
  return edges;
}
function getEdgeConfig2(edgeValue, processValue) {
  var text;
  var textVal = processValue["-name"];
  if (textVal) {
    var textBounds = edgeValue["bpmndi:BPMNLabel"]["dc:Bounds"];
    var textLength_1 = 0;
    textVal.split("\n").forEach(function(textSpan) {
      if (textLength_1 < textSpan.length) {
        textLength_1 = textSpan.length;
      }
    });
    text = {
      value: textVal,
      x: Number(textBounds["-x"]) + textLength_1 * 10 / 2,
      y: Number(textBounds["-y"]) + 7
    };
  }
  var properties = {};
  Object.entries(processValue).forEach(function(_a) {
    var _b = __read12(_a, 2), key = _b[0], value = _b[1];
    if (!defaultAttrsForInput.includes(key)) {
      properties[key] = value;
    }
  });
  properties = convertXmlToNormal(properties);
  var pointsList = edgeValue["di:waypoint"].map(function(point) {
    return {
      x: Number(point["-x"]),
      y: Number(point["-y"])
    };
  });
  var edge = {
    id: processValue["-id"],
    type: BpmnElements2.FLOW,
    pointsList,
    sourceNodeId: processValue["-sourceRef"],
    targetNodeId: processValue["-targetRef"],
    properties
  };
  if (text) {
    edge.text = text;
  }
  return edge;
}
var BPMNBaseAdapter = (
  /** @class */
  function() {
    function BPMNBaseAdapter2(_a) {
      var lf = _a.lf;
      var _this = this;
      this.adapterOut = function(data, other) {
        var _a2, _b;
        var bpmnProcessData = __assign20({}, _this.processAttributes);
        convertLf2ProcessData2(bpmnProcessData, data, other);
        var bpmnDiagramData = {
          "-id": "BPMNPlane_1",
          "-bpmnElement": bpmnProcessData["-id"]
        };
        convertLf2DiagramData2(bpmnDiagramData, data);
        var definitions = _this.definitionAttributes;
        definitions["bpmn:process"] = bpmnProcessData;
        definitions["bpmndi:BPMNDiagram"] = {
          "-id": "BPMNDiagram_1",
          "bpmndi:BPMNPlane": bpmnDiagramData
        };
        var bpmnData = {
          "bpmn:definitions": definitions
        };
        if ((_a2 = other === null || other === void 0 ? void 0 : other.mapping) === null || _a2 === void 0 ? void 0 : _a2.out) {
          var mapping_1 = (_b = other === null || other === void 0 ? void 0 : other.mapping) === null || _b === void 0 ? void 0 : _b.out;
          var nameMapping_1 = function(obj) {
            if (Array.isArray(obj)) {
              obj.forEach(function(item) {
                return nameMapping_1(item);
              });
            }
            if (typeof obj === "object") {
              Object.keys(obj).forEach(function(key) {
                var mappingName;
                if (mappingName = mapping_1[key]) {
                  obj[mappingName] = lodash_default_default.cloneDeep(obj[key]);
                  delete obj[key];
                  nameMapping_1(obj[mappingName]);
                } else {
                  nameMapping_1(obj[key]);
                }
              });
            }
          };
          nameMapping_1(bpmnData);
        }
        return bpmnData;
      };
      this.adapterIn = function(bpmnData, other) {
        if (bpmnData) {
          return convertBpmn2LfData2(bpmnData, other);
        }
      };
      lf.adapterIn = this.adapterIn;
      lf.adapterOut = this.adapterOut;
      this.processAttributes = {
        "-isExecutable": "true",
        "-id": "Process"
      };
      this.definitionAttributes = {
        "-id": "Definitions",
        "-xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance",
        "-xmlns:bpmn": "http://www.omg.org/spec/BPMN/20100524/MODEL",
        "-xmlns:bpmndi": "http://www.omg.org/spec/BPMN/20100524/DI",
        "-xmlns:dc": "http://www.omg.org/spec/DD/20100524/DC",
        "-xmlns:di": "http://www.omg.org/spec/DD/20100524/DI",
        "-targetNamespace": "http://logic-flow.org",
        "-exporter": "logicflow",
        "-exporterVersion": "1.2.10"
      };
    }
    BPMNBaseAdapter2.prototype.setCustomShape = function(key, val) {
      BPMNBaseAdapter2.shapeConfigMap.set(key, val);
    };
    BPMNBaseAdapter2.pluginName = "bpmn-adapter";
    BPMNBaseAdapter2.shapeConfigMap = /* @__PURE__ */ new Map();
    return BPMNBaseAdapter2;
  }()
);
BPMNBaseAdapter.shapeConfigMap.set(BpmnElements2.START, {
  width: StartEventConfig2.width,
  height: StartEventConfig2.height
});
BPMNBaseAdapter.shapeConfigMap.set(BpmnElements2.END, {
  width: EndEventConfig2.width,
  height: EndEventConfig2.height
});
BPMNBaseAdapter.shapeConfigMap.set(BpmnElements2.INTERMEDIATE_CATCH, {
  width: IntermediateEventConfig.width,
  height: IntermediateEventConfig.height
});
BPMNBaseAdapter.shapeConfigMap.set(BpmnElements2.INTERMEDIATE_THROW, {
  width: IntermediateEventConfig.width,
  height: IntermediateEventConfig.height
});
BPMNBaseAdapter.shapeConfigMap.set(BpmnElements2.BOUNDARY, {
  width: BoundaryEventConfig.width,
  height: BoundaryEventConfig.height
});
BPMNBaseAdapter.shapeConfigMap.set(BpmnElements2.PARALLEL_GATEWAY, {
  width: ParallelGatewayConfig.width,
  height: ParallelGatewayConfig.height
});
BPMNBaseAdapter.shapeConfigMap.set(BpmnElements2.INCLUSIVE_GATEWAY, {
  width: InclusiveGatewayConfig.width,
  height: InclusiveGatewayConfig.height
});
BPMNBaseAdapter.shapeConfigMap.set(BpmnElements2.EXCLUSIVE_GATEWAY, {
  width: ExclusiveGatewayConfig2.width,
  height: ExclusiveGatewayConfig2.height
});
BPMNBaseAdapter.shapeConfigMap.set(BpmnElements2.SYSTEM, {
  width: ServiceTaskConfig2.width,
  height: ServiceTaskConfig2.height
});
BPMNBaseAdapter.shapeConfigMap.set(BpmnElements2.USER, {
  width: UserTaskConfig2.width,
  height: UserTaskConfig2.height
});
BPMNBaseAdapter.shapeConfigMap.set(BpmnElements2.SUBPROCESS, {
  width: SubProcessConfig.width,
  height: SubProcessConfig.height
});
var BPMNAdapter = (
  /** @class */
  function(_super) {
    __extends24(BPMNAdapter2, _super);
    function BPMNAdapter2(data) {
      var _this = _super.call(this, data) || this;
      _this.adapterXmlIn = function(bpmnData) {
        var json = lfXml2Json2(bpmnData);
        return _this.adapterIn(json, _this.props);
      };
      _this.adapterXmlOut = function(data2) {
        var outData = _this.adapterOut(data2, _this.props);
        return lfJson2Xml2(outData);
      };
      var lf = data.lf, props = data.props;
      lf.adapterIn = _this.adapterXmlIn;
      lf.adapterOut = _this.adapterXmlOut;
      _this.props = props;
      return _this;
    }
    BPMNAdapter2.pluginName = "BPMNAdapter";
    return BPMNAdapter2;
  }(BPMNBaseAdapter)
);

// node_modules/@logicflow/extension/es/tools/snapshot/utils.js
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_2 = 0)), _2) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _2.label++;
          return { value: op[1], done: false };
        case 5:
          _2.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _2.ops.pop();
          _2.trys.pop();
          continue;
        default:
          if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _2 = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _2.label = op[1];
            break;
          }
          if (op[0] === 6 && _2.label < t[1]) {
            _2.label = t[1];
            t = op;
            break;
          }
          if (t && _2.label < t[2]) {
            _2.label = t[2];
            _2.ops.push(op);
            break;
          }
          if (t[2]) _2.ops.pop();
          _2.trys.pop();
          continue;
      }
      op = body.call(thisArg, _2);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __read13 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray10 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var imageCache = {};
function isTextPlainBase64(str) {
  return str.startsWith("data:text/plain");
}
function convertImageToBase64(url) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a) {
      if (imageCache[url]) {
        return [2, imageCache[url]];
      }
      return [2, new Promise(function(resolve, reject) {
        try {
          fetch(url).then(function(response) {
            return response.blob();
          }).then(function(blob) {
            var reader = new FileReader();
            reader.onloadend = function() {
              resolve(imageCache[url] = reader.result);
            };
            reader.onerror = reject;
            reader.readAsDataURL(blob);
          }).catch(function() {
            resolve(imageCache[url] = url);
          });
        } catch (error) {
          return imageCache[url] = url;
        }
      })];
    });
  });
}
function updateImageSrcOrHrefWithBase64Image(node, attrName) {
  return __awaiter(this, void 0, void 0, function() {
    var url, base64Image, error_1;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          _a.trys.push([0, 2, , 3]);
          url = node.getAttribute(attrName) || "";
          if (url.startsWith("data:")) {
            return [
              2
              /*return*/
            ];
          }
          return [4, convertImageToBase64(url)];
        case 1:
          base64Image = _a.sent();
          if (isTextPlainBase64(base64Image)) {
            return [
              2
              /*return*/
            ];
          }
          node.setAttribute(attrName, base64Image);
          return [3, 3];
        case 2:
          error_1 = _a.sent();
          console.error(error_1);
          return [3, 3];
        case 3:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function updateBackgroundImageWithBase64Image(node, url) {
  return __awaiter(this, void 0, void 0, function() {
    var base64Image, error_2;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          _a.trys.push([0, 2, , 3]);
          if (url.startsWith("data:")) {
            return [
              2
              /*return*/
            ];
          }
          return [4, convertImageToBase64(url)];
        case 1:
          base64Image = _a.sent();
          if (isTextPlainBase64(base64Image)) {
            return [
              2
              /*return*/
            ];
          }
          node.style.backgroundImage = "url(".concat(base64Image, ")");
          return [3, 3];
        case 2:
          error_2 = _a.sent();
          console.error(error_2);
          return [3, 3];
        case 3:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function updateImageSource(node) {
  return __awaiter(this, void 0, void 0, function() {
    var nodes, nodePtr, promises, _a, background, backgroundImage, backgroundUrlMatch, imageUrl, backgroundImageUrlMatch, imageUrl;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          nodes = [node];
          promises = [];
          while (nodes.length) {
            nodePtr = nodes.shift();
            if (nodePtr.children.length) {
              nodes.push.apply(nodes, __spreadArray10([], __read13(nodePtr.children), false));
            }
            if (nodePtr instanceof HTMLElement) {
              _a = nodePtr.style, background = _a.background, backgroundImage = _a.backgroundImage;
              backgroundUrlMatch = background.match(/url\(["']?(.*?)["']?\)/);
              if (backgroundUrlMatch && backgroundUrlMatch[1]) {
                imageUrl = backgroundUrlMatch[1];
                promises.push(updateBackgroundImageWithBase64Image(nodePtr, imageUrl));
              }
              backgroundImageUrlMatch = backgroundImage.match(/url\(["']?(.*?)["']?\)/);
              if (backgroundImageUrlMatch && backgroundImageUrlMatch[1]) {
                imageUrl = backgroundImageUrlMatch[1];
                promises.push(updateBackgroundImageWithBase64Image(nodePtr, imageUrl));
              }
            }
            if (nodePtr instanceof HTMLImageElement) {
              promises.push(updateImageSrcOrHrefWithBase64Image(nodePtr, "src"));
            } else if (nodePtr instanceof SVGImageElement) {
              promises.push(updateImageSrcOrHrefWithBase64Image(nodePtr, "href"));
            }
          }
          return [4, Promise.all(promises)];
        case 1:
          _b.sent();
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function copyCanvas(originCanvas, targetWidth, targetHeight) {
  var newCanvas = document.createElement("canvas");
  newCanvas.width = targetWidth;
  newCanvas.height = targetHeight;
  var newCtx = newCanvas.getContext("2d");
  if (newCtx) {
    newCtx.drawImage(originCanvas, 0, 0, originCanvas.width, originCanvas.height, 0, 0, targetWidth, targetHeight);
  }
  return newCanvas;
}

// node_modules/@logicflow/extension/es/tools/snapshot/index.js
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator2 = function(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_2 = 0)), _2) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _2.label++;
          return { value: op[1], done: false };
        case 5:
          _2.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _2.ops.pop();
          _2.trys.pop();
          continue;
        default:
          if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _2 = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _2.label = op[1];
            break;
          }
          if (op[0] === 6 && _2.label < t[1]) {
            _2.label = t[1];
            t = op;
            break;
          }
          if (t && _2.label < t[2]) {
            _2.label = t[2];
            _2.ops.push(op);
            break;
          }
          if (t[2]) _2.ops.pop();
          _2.trys.pop();
          continue;
      }
      op = body.call(thisArg, _2);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var Snapshot = (
  /** @class */
  function() {
    function Snapshot2(_a) {
      var lf = _a.lf;
      var _this = this;
      this.lf = lf;
      this.customCssRules = "";
      this.useGlobalRules = true;
      lf.getSnapshot = function(fileName, toImageOptions) {
        return __awaiter2(_this, void 0, void 0, function() {
          var curPartial, _a2, partial;
          var _this2 = this;
          return __generator2(this, function(_b) {
            switch (_b.label) {
              case 0:
                curPartial = this.lf.graphModel.getPartial();
                _a2 = (toImageOptions !== null && toImageOptions !== void 0 ? toImageOptions : {}).partial, partial = _a2 === void 0 ? curPartial : _a2;
                if (!(curPartial !== partial)) return [3, 1];
                this.lf.graphModel.setPartial(partial);
                this.lf.graphModel.eventCenter.once("graph:updated", function() {
                  return __awaiter2(_this2, void 0, void 0, function() {
                    return __generator2(this, function(_a3) {
                      switch (_a3.label) {
                        case 0:
                          return [
                            4,
                            this.getSnapshot(fileName, toImageOptions)
                            // 恢复原来渲染模式
                          ];
                        case 1:
                          _a3.sent();
                          this.lf.graphModel.setPartial(curPartial);
                          return [
                            2
                            /*return*/
                          ];
                      }
                    });
                  });
                });
                return [3, 3];
              case 1:
                return [4, this.getSnapshot(fileName, toImageOptions)];
              case 2:
                _b.sent();
                _b.label = 3;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      lf.getSnapshotBlob = function(backgroundColor, fileType) {
        return __awaiter2(_this, void 0, void 0, function() {
          return __generator2(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [
                  4,
                  this.getSnapshotBlob(backgroundColor, fileType)
                  /* 获取Base64对象，用户图片上传 */
                ];
              case 1:
                return [
                  2,
                  _a2.sent()
                  /* 获取Base64对象，用户图片上传 */
                ];
            }
          });
        });
      };
      lf.getSnapshotBase64 = function(backgroundColor, fileType) {
        return __awaiter2(_this, void 0, void 0, function() {
          return __generator2(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [4, this.getSnapshotBase64(backgroundColor, fileType)];
              case 1:
                return [2, _a2.sent()];
            }
          });
        });
      };
    }
    Snapshot2.prototype.getSvgRootElement = function(lf) {
      var svgRootElement = lf.container.querySelector(".lf-canvas-overlay");
      return svgRootElement;
    };
    Snapshot2.prototype.triggerDownload = function(imgUrl) {
      var evt = new MouseEvent("click", {
        view: document.defaultView,
        bubbles: false,
        cancelable: true
      });
      var a = document.createElement("a");
      a.setAttribute("download", this.fileName);
      a.setAttribute("href", imgUrl);
      a.setAttribute("target", "_blank");
      a.dispatchEvent(evt);
    };
    Snapshot2.prototype.removeAnchor = function(element) {
      var childNodes = element.childNodes;
      var childLength = element.childNodes && element.childNodes.length;
      for (var i = 0; i < childLength; i++) {
        var child = childNodes[i];
        var classList = child.classList && Array.from(child.classList) || [];
        if (classList.indexOf("lf-anchor") > -1) {
          element.removeChild(element.childNodes[i]);
          childLength--;
          i--;
        }
      }
    };
    Snapshot2.prototype.removeRotateControl = function(element) {
      var childNodes = element.childNodes;
      var childLength = element.childNodes && element.childNodes.length;
      for (var i = 0; i < childLength; i++) {
        var child = childNodes[i];
        var classList = child.classList && Array.from(child.classList) || [];
        if (classList.indexOf("lf-rotate-control") > -1) {
          element.removeChild(element.childNodes[i]);
          childLength--;
          i--;
        }
      }
    };
    Snapshot2.prototype.getSnapshot = function(fileName, toImageOptions) {
      return __awaiter2(this, void 0, void 0, function() {
        var _a, _b, fileType, quality, svg, copy, svgString, blob, url;
        var _this = this;
        return __generator2(this, function(_c) {
          switch (_c.label) {
            case 0:
              _a = toImageOptions !== null && toImageOptions !== void 0 ? toImageOptions : {}, _b = _a.fileType, fileType = _b === void 0 ? "png" : _b, quality = _a.quality;
              this.fileName = "".concat(fileName !== null && fileName !== void 0 ? fileName : "logic-flow.".concat(Date.now()), ".").concat(fileType);
              svg = this.getSvgRootElement(this.lf);
              return [4, updateImageSource(svg)];
            case 1:
              _c.sent();
              if (fileType === "svg") {
                copy = this.cloneSvg(svg);
                svgString = new XMLSerializer().serializeToString(copy);
                blob = new Blob([svgString], {
                  type: "image/svg+xml;charset=utf-8"
                });
                url = URL.createObjectURL(blob);
                this.triggerDownload(url);
              } else {
                this.getCanvasData(svg, toImageOptions !== null && toImageOptions !== void 0 ? toImageOptions : {}).then(function(canvas) {
                  var imgUrl = canvas.toDataURL("image/".concat(fileType), quality).replace("image/".concat(fileType), "image/octet-stream");
                  _this.triggerDownload(imgUrl);
                });
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Snapshot2.prototype.getSnapshotBase64 = function(backgroundColor, fileType) {
      return __awaiter2(this, void 0, void 0, function() {
        var svg;
        var _this = this;
        return __generator2(this, function(_a) {
          switch (_a.label) {
            case 0:
              svg = this.getSvgRootElement(this.lf);
              return [4, updateImageSource(svg)];
            case 1:
              _a.sent();
              return [2, new Promise(function(resolve) {
                _this.getCanvasData(svg, { backgroundColor }).then(function(canvas) {
                  var base64 = canvas.toDataURL("image/".concat(fileType !== null && fileType !== void 0 ? fileType : "png"));
                  resolve({
                    data: base64,
                    width: canvas.width,
                    height: canvas.height
                  });
                });
              })];
          }
        });
      });
    };
    Snapshot2.prototype.getSnapshotBlob = function(backgroundColor, fileType) {
      return __awaiter2(this, void 0, void 0, function() {
        var svg;
        var _this = this;
        return __generator2(this, function(_a) {
          switch (_a.label) {
            case 0:
              svg = this.getSvgRootElement(this.lf);
              return [4, updateImageSource(svg)];
            case 1:
              _a.sent();
              return [2, new Promise(function(resolve) {
                _this.getCanvasData(svg, { backgroundColor }).then(function(canvas) {
                  canvas.toBlob(function(blob) {
                    resolve({
                      data: blob,
                      width: canvas.width,
                      height: canvas.height
                    });
                  }, "image/".concat(fileType !== null && fileType !== void 0 ? fileType : "png"));
                });
              })];
          }
        });
      });
    };
    Snapshot2.prototype.getClassRules = function() {
      var rules = "";
      if (this.useGlobalRules) {
        var styleSheets = document.styleSheets;
        for (var i = 0; i < styleSheets.length; i++) {
          var sheet = styleSheets[i];
          for (var j = 0; j < sheet.cssRules.length; j++) {
            rules += sheet.cssRules[j].cssText;
          }
        }
      }
      if (this.customCssRules) {
        rules += this.customCssRules;
      }
      return rules;
    };
    Snapshot2.prototype.getCanvasData = function(svg, toImageOptions) {
      return __awaiter2(this, void 0, void 0, function() {
        var width, height, backgroundColor, _a, padding, copy, dpr, base, bbox, layoutCanvas, layout, offsetX, offsetY, graphModel, transformModel, SCALE_X, SCALE_Y, TRANSLATE_X, TRANSLATE_Y, bboxWidth, bboxHeight, canvas, ctx, img, style2, foreignObject;
        return __generator2(this, function(_b) {
          width = toImageOptions.width, height = toImageOptions.height, backgroundColor = toImageOptions.backgroundColor, _a = toImageOptions.padding, padding = _a === void 0 ? 40 : _a;
          copy = this.cloneSvg(svg, false);
          dpr = window.devicePixelRatio || 1;
          if (dpr < 1) {
            dpr = 1;
          }
          base = this.lf.graphModel.rootEl.querySelector(".lf-base");
          bbox = base.getBoundingClientRect();
          layoutCanvas = this.lf.container.querySelector(".lf-canvas-overlay");
          layout = layoutCanvas.getBoundingClientRect();
          offsetX = bbox.x - layout.x;
          offsetY = bbox.y - layout.y;
          graphModel = this.lf.graphModel;
          transformModel = graphModel.transformModel;
          SCALE_X = transformModel.SCALE_X, SCALE_Y = transformModel.SCALE_Y, TRANSLATE_X = transformModel.TRANSLATE_X, TRANSLATE_Y = transformModel.TRANSLATE_Y;
          copy.lastChild.style.transform = "matrix(1, 0, 0, 1, ".concat((-offsetX + TRANSLATE_X) * (1 / SCALE_X), ", ").concat((-offsetY + TRANSLATE_Y) * (1 / SCALE_Y), ")");
          bboxWidth = Math.ceil(bbox.width / SCALE_X);
          bboxHeight = Math.ceil(bbox.height / SCALE_Y);
          canvas = document.createElement("canvas");
          canvas.style.width = "".concat(bboxWidth, "px");
          canvas.style.height = "".concat(bboxHeight, "px");
          canvas.width = bboxWidth * dpr + padding * 2;
          canvas.height = bboxHeight * dpr + padding * 2;
          ctx = canvas.getContext("2d");
          if (ctx) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.scale(dpr, dpr);
            if (backgroundColor) {
              ctx.fillStyle = backgroundColor;
              ctx.fillRect(0, 0, canvas.width, canvas.height);
            } else {
              ctx.clearRect(0, 0, canvas.width, canvas.height);
            }
          }
          img = new Image();
          style2 = document.createElement("style");
          style2.innerHTML = this.getClassRules();
          foreignObject = document.createElement("foreignObject");
          foreignObject.appendChild(style2);
          copy.appendChild(foreignObject);
          return [2, new Promise(function(resolve) {
            img.onload = function() {
              var isFirefox = navigator.userAgent.indexOf("Firefox") > -1;
              try {
                if (isFirefox) {
                  createImageBitmap(img, {
                    resizeWidth: width && height ? copyCanvas(canvas, width, height).width : canvas.width,
                    resizeHeight: width && height ? copyCanvas(canvas, width, height).height : canvas.height
                  }).then(function(imageBitmap) {
                    ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(imageBitmap, padding / dpr, padding / dpr);
                    resolve(width && height ? copyCanvas(canvas, width, height) : canvas);
                  });
                } else {
                  ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(img, padding / dpr, padding / dpr);
                  resolve(width && height ? copyCanvas(canvas, width, height) : canvas);
                }
              } catch (e) {
                ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(img, padding / dpr, padding / dpr);
                resolve(width && height ? copyCanvas(canvas, width, height) : canvas);
              }
            };
            var svg2Img = "data:image/svg+xml;charset=utf-8,".concat(new XMLSerializer().serializeToString(copy));
            var imgSrc = svg2Img.replace(/\n/g, "").replace(/\t/g, "").replace(/#/g, "%23");
            img.src = imgSrc;
          })];
        });
      });
    };
    Snapshot2.prototype.cloneSvg = function(svg, addStyle) {
      var _this = this;
      var _a;
      if (addStyle === void 0) {
        addStyle = true;
      }
      var copy = svg.cloneNode(true);
      var graph = copy.lastChild;
      var childLength = (_a = graph === null || graph === void 0 ? void 0 : graph.childNodes) === null || _a === void 0 ? void 0 : _a.length;
      if (childLength) {
        for (var i = 0; i < childLength; i++) {
          var lfLayer = graph === null || graph === void 0 ? void 0 : graph.childNodes[i];
          var layerClassList = lfLayer.classList && Array.from(lfLayer.classList);
          if (layerClassList && layerClassList.indexOf("lf-base") < 0) {
            graph === null || graph === void 0 ? void 0 : graph.removeChild(graph.childNodes[i]);
            childLength--;
            i--;
          } else {
            var lfBase = graph === null || graph === void 0 ? void 0 : graph.childNodes[i];
            lfBase && lfBase.childNodes.forEach(function(item) {
              var element = item;
              _this.removeAnchor(element.firstChild);
              _this.removeRotateControl(element.firstChild);
            });
          }
        }
      }
      if (addStyle) {
        var style2 = document.createElement("style");
        style2.innerHTML = this.getClassRules();
        var foreignObject = document.createElement("foreignObject");
        foreignObject.appendChild(style2);
        copy.appendChild(foreignObject);
      }
      return copy;
    };
    Snapshot2.pluginName = "snapshot";
    return Snapshot2;
  }()
);

// node_modules/@logicflow/extension/es/turbo-adapter/index.js
var __assign21 = function() {
  __assign21 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign21.apply(this, arguments);
};
var __read14 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var TurboType = {
  SEQUENCE_FLOW: 1,
  START_EVENT: 2,
  END_EVENT: 3,
  USER_TASK: 4,
  // SERVICE_TASK = 5, 暂不支持
  EXCLUSIVE_GATEWAY: 6
};
var TurboTypeMap = {
  1: "bpmn:sequenceFlow",
  2: "bpmn:startEvent",
  3: "bpmn:endEvent",
  4: "bpmn:userTask",
  6: "bpmn:exclusiveGateway"
};
function getTurboType(type3) {
  switch (type3) {
    case "bpmn:sequenceFlow":
      return TurboType.SEQUENCE_FLOW;
    case "bpmn:startEvent":
      return TurboType.START_EVENT;
    case "bpmn:endEvent":
      return TurboType.END_EVENT;
    case "bpmn:userTask":
      return TurboType.USER_TASK;
    case "bpmn:exclusiveGateway":
      return TurboType.EXCLUSIVE_GATEWAY;
    default:
      return type3;
  }
}
function convertNodeToTurboElement(node) {
  var id = node.id, type3 = node.type, x = node.x, y = node.y, _a = node.text, text = _a === void 0 ? "" : _a, properties = node.properties;
  return {
    incoming: [],
    outgoing: [],
    dockers: [],
    type: getTurboType(type3),
    properties: __assign21(__assign21({}, properties), { name: text && text.value || "", x, y, text }),
    key: id
  };
}
function convertEdgeToTurboElement(edge) {
  var id = edge.id, type3 = edge.type, sourceNodeId = edge.sourceNodeId, targetNodeId = edge.targetNodeId, startPoint = edge.startPoint, endPoint = edge.endPoint, pointsList = edge.pointsList, _a = edge.text, text = _a === void 0 ? "" : _a, properties = edge.properties;
  return {
    incoming: [sourceNodeId],
    outgoing: [targetNodeId],
    type: getTurboType(type3),
    dockers: [],
    properties: __assign21(__assign21({}, properties), { name: text && text.value || "", text, startPoint: JSON.stringify(startPoint), endPoint: JSON.stringify(endPoint), pointsList: JSON.stringify(pointsList) }),
    key: id
  };
}
function toTurboData(data) {
  var nodeMap = /* @__PURE__ */ new Map();
  var turboData = {
    // TODO: 定义类型
    flowElementList: []
  };
  data.nodes.forEach(function(node) {
    var flowElement = convertNodeToTurboElement(node);
    turboData.flowElementList.push(flowElement);
    nodeMap.set(node.id, flowElement);
  });
  data.edges.forEach(function(edge) {
    var flowElement = convertEdgeToTurboElement(edge);
    var sourceElement = nodeMap.get(edge.sourceNodeId);
    sourceElement.outgoing.push(flowElement.key);
    var targetElement = nodeMap.get(edge.targetNodeId);
    targetElement.incoming.push(flowElement.key);
    turboData.flowElementList.push(flowElement);
  });
  return turboData;
}
function convertFlowElementToEdge(element) {
  var incoming = element.incoming, outgoing = element.outgoing, properties = element.properties, key = element.key, type3 = element.type;
  var text = properties.text, name = properties.name, startPoint = properties.startPoint, endPoint = properties.endPoint, pointsList = properties.pointsList;
  var edge = {
    id: key,
    type: TurboTypeMap[type3],
    sourceNodeId: incoming[0],
    targetNodeId: outgoing[0],
    text: text || name,
    properties: {}
  };
  if (startPoint) {
    edge.startPoint = JSON.parse(startPoint);
  }
  if (endPoint) {
    edge.endPoint = JSON.parse(endPoint);
  }
  if (pointsList) {
    edge.pointsList = JSON.parse(pointsList);
  }
  var excludeProperties = ["startPoint", "endPoint", "pointsList", "text"];
  Object.keys(element.properties).forEach(function(property) {
    if (excludeProperties.indexOf(property) === -1) {
      edge.properties[property] = element.properties[property];
    }
  });
  return edge;
}
function convertFlowElementToNode(element) {
  var properties = element.properties, key = element.key, type3 = element.type, bounds = element.bounds;
  var x = properties.x, y = properties.y;
  var text = properties.text;
  if (x === void 0) {
    var _a = __read14(bounds, 2), _b = _a[0], x1 = _b.x, y1 = _b.y, _c = _a[1], x2 = _c.x, y2 = _c.y;
    x = (x1 + x2) / 2;
    y = (y1 + y2) / 2;
  }
  var node = {
    id: key,
    type: TurboTypeMap[type3],
    x,
    y,
    text,
    properties: {}
  };
  var excludeProperties = ["x", "y", "text"];
  Object.keys(element.properties).forEach(function(property) {
    if (excludeProperties.indexOf(property) === -1) {
      node.properties[property] = element.properties[property];
    }
  });
  return node;
}
function toLogicflowData(data) {
  var lfData = {
    // TODO: 定义类型
    nodes: [],
    edges: []
  };
  var list = data.flowElementList;
  list && list.length > 0 && list.forEach(function(element) {
    if (element.type === TurboType.SEQUENCE_FLOW) {
      var edge = convertFlowElementToEdge(element);
      lfData.edges.push(edge);
    } else {
      var node = convertFlowElementToNode(element);
      lfData.nodes.push(node);
    }
  });
  return lfData;
}
var TurboAdapter = (
  /** @class */
  function() {
    function TurboAdapter2(_a) {
      var lf = _a.lf;
      lf.adapterIn = this.adapterIn;
      lf.adapterOut = this.adapterOut;
    }
    TurboAdapter2.prototype.adapterOut = function(logicflowData) {
      if (logicflowData) {
        return toTurboData(logicflowData);
      }
    };
    TurboAdapter2.prototype.adapterIn = function(turboData) {
      if (turboData) {
        return toLogicflowData(turboData);
      }
    };
    TurboAdapter2.pluginName = "turboAdapter";
    return TurboAdapter2;
  }()
);

// node_modules/@logicflow/extension/es/insert-node-in-polyline/edge.js
var SegmentDirection;
(function(SegmentDirection2) {
  SegmentDirection2["HORIZONTAL"] = "horizontal";
  SegmentDirection2["VERTICAL"] = "vertical";
})(SegmentDirection || (SegmentDirection = {}));
var isInSegment = function(point, start, end, deviation) {
  if (deviation === void 0) {
    deviation = 0;
  }
  var distance = distToSegment(point, start, end);
  return distance <= deviation;
};
function sqr(x) {
  return x * x;
}
function dist2(v, w) {
  return sqr(v.x - w.x) + sqr(v.y - w.y);
}
var distToSegmentSquared = function(p, v, w) {
  var l2 = dist2(v, w);
  if (l2 === 0)
    return dist2(p, v);
  var t = ((p.x - v.x) * (w.x - v.x) + (p.y - v.y) * (w.y - v.y)) / l2;
  t = Math.max(0, Math.min(1, t));
  return dist2(p, {
    x: v.x + t * (w.x - v.x),
    y: v.y + t * (w.y - v.y)
  });
};
var distToSegment = function(point, start, end) {
  return Math.sqrt(distToSegmentSquared(point, start, end));
};
var getNodeBBox = function(node) {
  var x = node.x, y = node.y, width = node.width, height = node.height;
  var bBox = {
    minX: x - width / 2,
    minY: y - height / 2,
    maxX: x + width / 2,
    maxY: y + height / 2,
    x,
    y,
    width,
    height,
    centerX: x,
    centerY: y
  };
  return bBox;
};
var segmentDirection = function(start, end) {
  var direction;
  if (start.x === end.x) {
    direction = SegmentDirection.VERTICAL;
  } else if (start.y === end.y) {
    direction = SegmentDirection.HORIZONTAL;
  }
  return direction;
};
var crossPointInSegment = function(node, start, end) {
  var bBox = getNodeBBox(node);
  var direction = segmentDirection(start, end);
  var maxX = Math.max(start.x, end.x);
  var minX = Math.min(start.x, end.x);
  var maxY = Math.max(start.y, end.y);
  var minY = Math.min(start.y, end.y);
  var x = node.x, y = node.y, width = node.width, height = node.height;
  if (direction === SegmentDirection.HORIZONTAL) {
    if (maxX >= bBox.maxX && minX <= bBox.minX) {
      return {
        startCrossPoint: {
          x: start.x > end.x ? x + width / 2 : x - width / 2,
          y: start.y
        },
        endCrossPoint: {
          x: start.x > end.x ? x - width / 2 : x + width / 2,
          y: start.y
        }
      };
    }
  } else if (direction === SegmentDirection.VERTICAL) {
    if (maxY >= bBox.maxY && minY <= bBox.minY) {
      return {
        startCrossPoint: {
          x: start.x,
          y: start.y > end.y ? y + height / 2 : y - height / 2
        },
        endCrossPoint: {
          x: start.x,
          y: start.y > end.y ? y - height / 2 : y + height / 2
        }
      };
    }
  }
};
var isNodeInSegment = function(node, polyline, deviation) {
  if (deviation === void 0) {
    deviation = 0;
  }
  var x = node.x, y = node.y;
  var pointsList = polyline.pointsList;
  for (var i = 0; i < pointsList.length - 1; i++) {
    if (isInSegment({
      x,
      y
    }, pointsList[i], pointsList[i + 1], deviation)) {
      var bBoxCross = crossPointInSegment(node, pointsList[i], pointsList[i + 1]);
      if (bBoxCross) {
        return {
          crossIndex: i + 1,
          crossPoints: bBoxCross
        };
      }
    }
  }
  return {
    crossIndex: -1,
    crossPoints: {
      startCrossPoint: {
        x: 0,
        y: 0
      },
      endCrossPoint: {
        x: 0,
        y: 0
      }
    }
  };
};

// node_modules/@logicflow/extension/es/insert-node-in-polyline/index.js
var __read15 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray11 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var InsertNodeInPolyline = (
  /** @class */
  function() {
    function InsertNodeInPolyline2(_a) {
      var lf = _a.lf;
      this._lf = lf;
      this.deviation = 20;
      this.dndAdd = true;
      this.dropAdd = true;
      this.eventHandler();
    }
    InsertNodeInPolyline2.prototype.eventHandler = function() {
      var _this = this;
      if (this.dndAdd) {
        this._lf.on("node:dnd-add", function(_a) {
          var data = _a.data;
          _this.insetNode(data);
        });
      }
      if (this.dropAdd) {
        this._lf.on("node:drop", function(_a) {
          var data = _a.data;
          var edges = _this._lf.graphModel.edges;
          var id = data.id;
          var pureNode = true;
          for (var i = 0; i < edges.length; i++) {
            if (edges[i].sourceNodeId === id || edges[i].targetNodeId === id) {
              pureNode = false;
              break;
            }
          }
          if (pureNode) {
            _this.insetNode(data);
          }
        });
      }
    };
    InsertNodeInPolyline2.prototype.checkRuleBeforeInsetNode = function(sourceNodeId, targetNodeId, sourceAnchorId, targetAnchorId, nodeData) {
      var sourceNodeModel = this._lf.getNodeModelById(sourceNodeId);
      var targetNodeModel = this._lf.getNodeModelById(targetNodeId);
      var sourceAnchorInfo = sourceNodeModel.getAnchorInfo(sourceAnchorId);
      var targetAnchorInfo = targetNodeModel.getAnchorInfo(targetAnchorId);
      var sourceRuleResultData = sourceNodeModel.isAllowConnectedAsSource(nodeData, sourceAnchorInfo, targetAnchorInfo);
      var targetRuleResultData = targetNodeModel.isAllowConnectedAsTarget(nodeData, sourceAnchorInfo, targetAnchorInfo);
      var _a = formatAnchorConnectValidateData(sourceRuleResultData), isSourcePass = _a.isAllPass, sourceMsg = _a.msg;
      var _b = formatAnchorConnectValidateData(targetRuleResultData), isTargetPass = _b.isAllPass, targetMsg = _b.msg;
      return {
        isPass: isSourcePass && isTargetPass,
        sourceMsg,
        targetMsg
      };
    };
    InsertNodeInPolyline2.prototype.insetNode = function(nodeData) {
      var _this = this;
      var edges = this._lf.graphModel.edges;
      var nodeModel = this._lf.getNodeModelById(nodeData.id);
      var anchorArray = nodeModel === null || nodeModel === void 0 ? void 0 : nodeModel.getDefaultAnchor();
      var isNotAllowConnect = !anchorArray || anchorArray.length === 0;
      if (isNotAllowConnect) {
        this._lf.graphModel.eventCenter.emit(EventType.CONNECTION_NOT_ALLOWED, {
          data: nodeData,
          msg: "自定义类型节点不显示锚点，也不允许其他节点连接到此节点"
        });
        return;
      }
      if (!nodeModel)
        return;
      for (var i = 0; i < edges.length; i++) {
        var _a = isNodeInSegment(nodeModel, edges[i], this.deviation), crossIndex = _a.crossIndex, crossPoints = _a.crossPoints;
        if (crossIndex >= 0) {
          var _b = edges[i], sourceNodeId = _b.sourceNodeId, targetNodeId = _b.targetNodeId, id = _b.id, type3 = _b.type, pointsList = _b.pointsList, sourceAnchorId = _b.sourceAnchorId, targetAnchorId = _b.targetAnchorId;
          var startPoint = cloneDeep_default(pointsList[0]);
          var endPoint = cloneDeep_default(crossPoints.startCrossPoint);
          this._lf.deleteEdge(id);
          var checkResult = this.checkRuleBeforeInsetNode(sourceNodeId, targetNodeId, sourceAnchorId, targetAnchorId, nodeData);
          this._lf.addEdge({
            type: type3,
            sourceNodeId,
            targetNodeId: nodeData.id,
            startPoint,
            endPoint,
            pointsList: __spreadArray11(__spreadArray11([], __read15(pointsList.slice(0, crossIndex)), false), [
              crossPoints.startCrossPoint
            ], false)
          });
          this._lf.addEdge({
            type: type3,
            sourceNodeId: nodeData.id,
            targetNodeId,
            startPoint: cloneDeep_default(crossPoints.endCrossPoint),
            endPoint: cloneDeep_default(pointsList[pointsList.length - 1]),
            pointsList: __spreadArray11([
              crossPoints.endCrossPoint
            ], __read15(pointsList.slice(crossIndex)), false)
          });
          if (!checkResult.isPass) {
            this._lf.graphModel.eventCenter.emit(EventType.CONNECTION_NOT_ALLOWED, {
              data: nodeData,
              msg: checkResult.targetMsg || checkResult.sourceMsg
            });
            setTimeout(function() {
              _this._lf.undo();
            }, 200);
            break;
          } else {
            break;
          }
        }
      }
    };
    InsertNodeInPolyline2.pluginName = "insertNodeInPolyline";
    return InsertNodeInPolyline2;
  }()
);

// node_modules/@logicflow/extension/es/components/control/index.js
var __read16 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray12 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var Control2 = (
  /** @class */
  function() {
    function Control3(_a) {
      var lf = _a.lf;
      var _this = this;
      this.controlItems = [
        {
          key: "zoom-out",
          iconClass: "lf-control-zoomOut",
          title: "缩小流程图",
          text: "缩小",
          onClick: function() {
            _this.lf.zoom(false);
          }
        },
        {
          key: "zoom-in",
          iconClass: "lf-control-zoomIn",
          title: "放大流程图",
          text: "放大",
          onClick: function() {
            _this.lf.zoom(true);
          }
        },
        {
          key: "reset",
          iconClass: "lf-control-fit",
          title: "恢复流程原有尺寸",
          text: "适应",
          onClick: function() {
            _this.lf.resetZoom();
          }
        },
        {
          key: "undo",
          iconClass: "lf-control-undo",
          title: "回到上一步",
          text: "上一步",
          onClick: function() {
            _this.lf.undo();
          }
        },
        {
          key: "redo",
          iconClass: "lf-control-redo",
          title: "移到下一步",
          text: "下一步",
          onClick: function() {
            _this.lf.redo();
          }
        }
      ];
      this.lf = lf;
    }
    Control3.prototype.render = function(_2, domContainer) {
      this.destroy();
      var toolEl = this.getControlTool();
      this.toolEl = toolEl;
      domContainer.appendChild(toolEl);
      this.domContainer = domContainer;
    };
    Control3.prototype.destroy = function() {
      if (this.domContainer && this.toolEl && this.domContainer.contains(this.toolEl)) {
        this.domContainer.removeChild(this.toolEl);
      }
    };
    Control3.prototype.addItem = function(item) {
      this.controlItems.push(item);
    };
    Control3.prototype.removeItem = function(key) {
      var index = this.controlItems.findIndex(function(item) {
        return item.key === key;
      });
      return index == -1 ? null : this.controlItems.splice(index, 1)[0];
    };
    Control3.prototype.getControlTool = function() {
      var _this = this;
      var NORMAL = "lf-control-item";
      var DISABLED = "lf-control-item disabled";
      var controlTool = document.createElement("div");
      var controlElements = [];
      controlTool.className = "lf-control";
      this.controlItems.forEach(function(item) {
        var itemContainer = document.createElement("div");
        var icon = document.createElement("i");
        var text = document.createElement("span");
        itemContainer.className = DISABLED;
        item.onClick && (itemContainer.onclick = item.onClick.bind(null, _this.lf));
        item.onMouseEnter && (itemContainer.onmouseenter = item.onMouseEnter.bind(null, _this.lf));
        item.onMouseLeave && (itemContainer.onmouseleave = item.onMouseLeave.bind(null, _this.lf));
        icon.className = item.iconClass;
        text.className = "lf-control-text";
        text.title = item.title;
        text.innerText = item.text;
        itemContainer.append(icon, text);
        switch (item.text) {
          case "上一步":
            _this.lf.on("history:change", function(_a) {
              var undoAble = _a.data.undoAble;
              itemContainer.className = undoAble ? NORMAL : DISABLED;
            });
            break;
          case "下一步":
            _this.lf.on("history:change", function(_a) {
              var redoAble = _a.data.redoAble;
              itemContainer.className = redoAble ? NORMAL : DISABLED;
            });
            break;
          default:
            itemContainer.className = NORMAL;
            break;
        }
        controlElements.push(itemContainer);
      });
      controlTool.append.apply(controlTool, __spreadArray12([], __read16(controlElements), false));
      return controlTool;
    };
    Control3.pluginName = "control";
    return Control3;
  }()
);

// node_modules/@logicflow/extension/es/components/menu/index.js
var __read17 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray13 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var DefaultNodeMenuKey = "lf:defaultNodeMenu";
var DefaultEdgeMenuKey = "lf:defaultEdgeMenu";
var DefaultGraphMenuKey = "lf:defaultGraphMenu";
var DefaultSelectionMenuKey = "lf:defaultSelectionMenu";
var Menu = (
  /** @class */
  function() {
    function Menu2(_a) {
      var lf = _a.lf;
      var _this = this;
      this.__currentData = null;
      this.lf = lf;
      var isSilentMode = lf.options.isSilentMode;
      if (!isSilentMode) {
        this.__menuDOM = document.createElement("ul");
        this.menuTypeMap = /* @__PURE__ */ new Map();
        this.init();
        this.lf.setMenuConfig = function(config) {
          _this.setMenuConfig(config);
        };
        this.lf.addMenuConfig = function(config) {
          _this.addMenuConfig(config);
        };
        this.lf.setMenuByType = function(config) {
          _this.setMenuByType(config);
        };
      }
    }
    Menu2.prototype.init = function() {
      var _this = this;
      var _a, _b, _c, _d;
      var defaultNodeMenu = [
        {
          text: "删除",
          callback: function(node) {
            _this.lf.deleteNode(node.id);
          }
        },
        {
          text: "编辑文本",
          callback: function(node) {
            _this.lf.graphModel.editText(node.id);
          }
        },
        {
          text: "复制",
          callback: function(node) {
            _this.lf.cloneNode(node.id);
          }
        }
      ];
      (_a = this.menuTypeMap) === null || _a === void 0 ? void 0 : _a.set(DefaultNodeMenuKey, defaultNodeMenu);
      var defaultEdgeMenu = [
        {
          text: "删除",
          callback: function(edge) {
            _this.lf.deleteEdge(edge.id);
          }
        },
        {
          text: "编辑文本",
          callback: function(edge) {
            _this.lf.graphModel.editText(edge.id);
          }
        }
      ];
      (_b = this.menuTypeMap) === null || _b === void 0 ? void 0 : _b.set(DefaultEdgeMenuKey, defaultEdgeMenu);
      (_c = this.menuTypeMap) === null || _c === void 0 ? void 0 : _c.set(DefaultGraphMenuKey, []);
      var DefaultSelectionMenu = [
        {
          text: "删除",
          callback: function(elements) {
            _this.lf.clearSelectElements();
            elements.edges.forEach(function(edge) {
              return _this.lf.deleteEdge(edge.id);
            });
            elements.nodes.forEach(function(node) {
              return _this.lf.deleteNode(node.id);
            });
          }
        }
      ];
      (_d = this.menuTypeMap) === null || _d === void 0 ? void 0 : _d.set(DefaultSelectionMenuKey, DefaultSelectionMenu);
    };
    Menu2.prototype.render = function(lf, container) {
      var _this = this;
      if (lf.options.isSilentMode)
        return;
      this.__container = container;
      this.__currentData = null;
      if (this.__menuDOM) {
        this.__menuDOM.className = "lf-menu";
        container.appendChild(this.__menuDOM);
        this.__menuDOM.addEventListener("click", function(event) {
          event.stopPropagation();
          var target = event.target;
          while (Array.from(target.classList).indexOf("lf-menu-item") === -1 && Array.from(target.classList).indexOf("lf-menu") === -1) {
            target = target === null || target === void 0 ? void 0 : target.parentElement;
          }
          if (Array.from(target.classList).indexOf("lf-menu-item") > -1) {
            ;
            target.onclickCallback(_this.__currentData);
            if (_this.__menuDOM) {
              _this.__menuDOM.style.display = "none";
            }
            _this.__currentData = null;
          } else {
            console.warn("点击区域不在菜单项内，请检查代码！");
          }
        }, true);
      }
      this.lf.on("node:contextmenu", function(_a) {
        var _b, _c;
        var data = _a.data, position = _a.position, e = _a.e;
        var _d = position.domOverlayPosition, x = _d.x, y = _d.y;
        var id = data.id;
        var model = _this.lf.graphModel.getNodeModelById(id);
        if (!model)
          return;
        var menuList = [];
        var typeMenus = (_b = _this.menuTypeMap) === null || _b === void 0 ? void 0 : _b.get(model.type);
        if (model && model.menu && Array.isArray(model.menu)) {
          menuList = model.menu;
        } else if (typeMenus) {
          menuList = typeMenus;
        } else {
          menuList = (_c = _this.menuTypeMap) === null || _c === void 0 ? void 0 : _c.get(DefaultNodeMenuKey);
        }
        _this.__currentData = data;
        _this.showMenu(x, y, menuList, {
          width: model.width,
          height: model.height,
          clientX: e.clientX,
          clientY: e.clientY
        });
      });
      this.lf.on("edge:contextmenu", function(_a) {
        var _b, _c, _d;
        var data = _a.data, position = _a.position, e = _a.e;
        var _e = position.domOverlayPosition, x = _e.x, y = _e.y;
        var id = data.id;
        var model = _this.lf.graphModel.getEdgeModelById(id);
        if (!model)
          return;
        var menuList = [];
        var typeMenus = (_b = _this.menuTypeMap) === null || _b === void 0 ? void 0 : _b.get(model.type);
        if (model && model.menu && Array.isArray(model.menu)) {
          menuList = model.menu;
        } else if (typeMenus) {
          menuList = typeMenus;
        } else {
          menuList = (_d = (_c = _this.menuTypeMap) === null || _c === void 0 ? void 0 : _c.get(DefaultEdgeMenuKey)) !== null && _d !== void 0 ? _d : [];
        }
        _this.__currentData = data;
        _this.showMenu(x, y, menuList, {
          width: model.width,
          height: model.height,
          clientX: e.clientX,
          clientY: e.clientY
        });
      });
      this.lf.on("blank:contextmenu", function(_a) {
        var _b, _c;
        var position = _a.position;
        var menuList = (_c = (_b = _this.menuTypeMap) === null || _b === void 0 ? void 0 : _b.get(DefaultGraphMenuKey)) !== null && _c !== void 0 ? _c : [];
        var _d = position.domOverlayPosition, x = _d.x, y = _d.y;
        _this.showMenu(x, y, menuList);
      });
      this.lf.on("selection:contextmenu", function(_a) {
        var _b;
        var data = _a.data, position = _a.position;
        var menuList = (_b = _this.menuTypeMap) === null || _b === void 0 ? void 0 : _b.get(DefaultSelectionMenuKey);
        var _c = position.domOverlayPosition, x = _c.x, y = _c.y;
        _this.__currentData = data;
        _this.showMenu(x, y, menuList);
      });
      this.lf.on("node:mousedown", function() {
        _this.__menuDOM.style.display = "none";
      });
      this.lf.on("edge:click", function() {
        _this.__menuDOM.style.display = "none";
      });
      this.lf.on("blank:click", function() {
        _this.__menuDOM.style.display = "none";
      });
    };
    Menu2.prototype.destroy = function() {
      var _a;
      if (this.__menuDOM) {
        (_a = this === null || this === void 0 ? void 0 : this.__container) === null || _a === void 0 ? void 0 : _a.removeChild(this.__menuDOM);
        this.__menuDOM = void 0;
      }
    };
    Menu2.prototype.showMenu = function(x, y, menuList, options) {
      if (!menuList || !menuList.length)
        return;
      var menu = this.__menuDOM;
      if (menu) {
        menu.innerHTML = "";
        menu.append.apply(menu, __spreadArray13([], __read17(this.__getMenuDom(menuList)), false));
        if (!menu.children.length)
          return;
        menu.style.display = "block";
        if (!options) {
          menu.style.top = "".concat(y, "px");
          menu.style.left = "".concat(x, "px");
          return;
        }
        var width = options.width, height = options.height, clientX = options.clientX, clientY = options.clientY;
        var graphModel = this.lf.graphModel;
        var menuWidth = menu.offsetWidth;
        var menuIsRightShow = true;
        var windowMaxX = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
        var rightDistance = windowMaxX - clientX;
        var graphRect = graphModel.rootEl.getBoundingClientRect();
        var graphMaxX = graphRect.left + graphRect.width;
        if (graphMaxX < windowMaxX) {
          rightDistance = graphMaxX - clientX;
        }
        if (rightDistance < menuWidth) {
          menuIsRightShow = false;
        }
        if (menuIsRightShow) {
          menu.style.left = "".concat(x, "px");
        } else {
          menu.style.left = "".concat(x - width, "px");
        }
        var menuHeight = menu.offsetHeight;
        var menuIsBottomShow = true;
        var windowMaxY = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
        var bottomDistance = windowMaxY - clientY;
        var graphMaxY = graphRect.top + graphRect.height;
        if (graphMaxY < windowMaxY) {
          bottomDistance = graphMaxY - clientY;
        }
        if (bottomDistance < menuHeight) {
          menuIsBottomShow = false;
        }
        if (menuIsBottomShow) {
          menu.style.top = "".concat(y, "px");
        } else {
          menu.style.top = "".concat(y - height, "px");
        }
      }
    };
    Menu2.prototype.setMenuByType = function(config) {
      var _a;
      if (!config.type || !config.menu) {
        return;
      }
      (_a = this.menuTypeMap) === null || _a === void 0 ? void 0 : _a.set(config.type, config.menu);
    };
    Menu2.prototype.__getMenuDom = function(list) {
      var menuList = [];
      list && list.length > 0 && list.forEach(function(item) {
        var element = document.createElement("li");
        if (item.className) {
          element.className = "lf-menu-item ".concat(item.className);
        } else {
          element.className = "lf-menu-item";
        }
        if (item.icon === true) {
          var icon = document.createElement("span");
          icon.className = "lf-menu-item-icon";
          element.appendChild(icon);
        }
        var text = document.createElement("span");
        text.className = "lf-menu-item-text";
        if (item.text) {
          text.innerText = item.text;
        }
        element.appendChild(text);
        element.onclickCallback = item.callback;
        menuList.push(element);
      });
      return menuList;
    };
    Menu2.prototype.setMenuConfig = function(config) {
      var _a, _b, _c;
      if (!config) {
        return;
      }
      config.nodeMenu !== void 0 && ((_a = this.menuTypeMap) === null || _a === void 0 ? void 0 : _a.set(DefaultNodeMenuKey, config.nodeMenu ? config.nodeMenu : []));
      config.edgeMenu !== void 0 && ((_b = this.menuTypeMap) === null || _b === void 0 ? void 0 : _b.set(DefaultEdgeMenuKey, config.edgeMenu ? config.edgeMenu : []));
      config.graphMenu !== void 0 && ((_c = this.menuTypeMap) === null || _c === void 0 ? void 0 : _c.set(DefaultGraphMenuKey, config.graphMenu ? config.graphMenu : []));
    };
    Menu2.prototype.addMenuConfig = function(config) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j;
      if (!config) {
        return;
      }
      if (Array.isArray(config.nodeMenu)) {
        var menuList = (_b = (_a = this.menuTypeMap) === null || _a === void 0 ? void 0 : _a.get(DefaultNodeMenuKey)) !== null && _b !== void 0 ? _b : [];
        (_c = this.menuTypeMap) === null || _c === void 0 ? void 0 : _c.set(DefaultNodeMenuKey, menuList.concat(config.nodeMenu));
      }
      if (Array.isArray(config.edgeMenu)) {
        var menuList = (_e = (_d = this.menuTypeMap) === null || _d === void 0 ? void 0 : _d.get(DefaultEdgeMenuKey)) !== null && _e !== void 0 ? _e : [];
        (_f = this.menuTypeMap) === null || _f === void 0 ? void 0 : _f.set(DefaultEdgeMenuKey, menuList.concat(config.edgeMenu));
      }
      if (Array.isArray(config.graphMenu)) {
        var menuList = (_h = (_g = this.menuTypeMap) === null || _g === void 0 ? void 0 : _g.get(DefaultGraphMenuKey)) !== null && _h !== void 0 ? _h : [];
        (_j = this.menuTypeMap) === null || _j === void 0 ? void 0 : _j.set(DefaultGraphMenuKey, menuList.concat(config.graphMenu));
      }
    };
    Menu2.prototype.changeMenuItem = function(type3, config) {
      if (type3 === "add") {
        this.addMenuConfig(config);
      } else if (type3 === "reset") {
        this.setMenuConfig(config);
      } else {
        throw new Error("The first parameter of changeMenuConfig should be 'add' or 'reset'");
      }
    };
    Menu2.pluginName = "menu";
    return Menu2;
  }()
);

// node_modules/@logicflow/extension/es/components/context-menu/index.js
var __read18 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray14 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var COMMON_TYPE_KEY = "menu-common";
var NEXT_X_DISTANCE = 200;
var NEXT_Y_DISTANCE = 100;
var ContextMenu = (
  /** @class */
  function() {
    function ContextMenu2(_a) {
      var lf = _a.lf;
      var _this = this;
      this.menuTypeMap = /* @__PURE__ */ new Map();
      this.listenDelete = function() {
        _this.hideContextMenu();
      };
      this.lf = lf;
      this.__menuDOM = document.createElement("div");
      this.__menuDOM.className = "lf-inner-context";
      this.menuTypeMap.set(COMMON_TYPE_KEY, []);
      this.lf.setContextMenuByType = function(type3, menus) {
        _this.setContextMenuByType(type3, menus);
      };
      this.lf.setContextMenuItems = function(menus) {
        _this.setContextMenuItems(menus);
      };
      this.lf.showContextMenu = function(data) {
        _this.showContextMenu(data);
      };
      this.lf.hideContextMenu = function() {
        _this.hideContextMenu();
      };
    }
    ContextMenu2.prototype.render = function(lf, container) {
      var _this = this;
      this.container = container;
      lf.on("node:click", function(_a) {
        var data = _a.data;
        _this._activeData = data;
        _this.createContextMenu();
      });
      lf.on("edge:click", function(_a) {
        var data = _a.data;
        _this._activeData = data;
        _this.createContextMenu();
      });
      lf.on("blank:click", function() {
        _this.hideContextMenu();
      });
    };
    ContextMenu2.prototype.setContextMenuByType = function(type3, menus) {
      this.menuTypeMap.set(type3, menus);
    };
    ContextMenu2.prototype.hideContextMenu = function() {
      this.__menuDOM.innerHTML = "";
      this.__menuDOM.style.display = "none";
      if (this.isShow) {
        this.container.removeChild(this.__menuDOM);
      }
      this.lf.off("node:delete,edge:delete,node:drag,graph:transform", this.listenDelete);
      this.isShow = false;
    };
    ContextMenu2.prototype.showContextMenu = function(data) {
      if (!data || !data.id) {
        console.warn("请检查传入的参数");
        return;
      }
      this._activeData = data;
      this.createContextMenu();
    };
    ContextMenu2.prototype.setContextMenuItems = function(menus) {
      this.menuTypeMap.set(COMMON_TYPE_KEY, menus);
    };
    ContextMenu2.prototype.getContextMenuPosition = function() {
      var data = this._activeData;
      var Model = this.lf.graphModel.getElement(data.id);
      if (Model) {
        var x_1;
        var y_1;
        if (Model.BaseType === "edge") {
          x_1 = Number.MIN_SAFE_INTEGER;
          y_1 = Number.MAX_SAFE_INTEGER;
          var edgeData = Model.getData();
          x_1 = Math.max(edgeData.startPoint.x, x_1);
          y_1 = Math.min(edgeData.startPoint.y, y_1);
          x_1 = Math.max(edgeData.endPoint.x, x_1);
          y_1 = Math.min(edgeData.endPoint.y, y_1);
          if (edgeData.pointsList) {
            edgeData.pointsList.forEach(function(point) {
              x_1 = Math.max(point.x, x_1);
              y_1 = Math.min(point.y, y_1);
            });
          }
        }
        if (Model.BaseType === "node") {
          x_1 = data.x + Model.width / 2;
          y_1 = data.y - Model.height / 2;
        }
        return this.lf.graphModel.transformModel.CanvasPointToHtmlPoint([x_1, y_1]);
      }
    };
    ContextMenu2.prototype.createContextMenu = function() {
      var _this = this;
      var isSilentMode = this.lf.options.isSilentMode;
      if (isSilentMode) {
        return;
      }
      var items = __spreadArray14(__spreadArray14([], __read18(this.menuTypeMap.get(this._activeData.type) || []), false), __read18(this.menuTypeMap.get(COMMON_TYPE_KEY) || []), false);
      var menus = document.createDocumentFragment();
      items.forEach(function(item) {
        var menuItem = document.createElement("div");
        menuItem.className = "lf-context-item";
        var img = document.createElement("img");
        img.src = item.icon;
        img.className = "lf-context-img";
        if (item.className) {
          menuItem.className = "".concat(menuItem.className, " ").concat(item.className);
        }
        img.addEventListener("click", function() {
          _this.hideContextMenu();
          if (item.callback) {
            item.callback(_this._activeData);
          } else {
            _this.addNode({
              sourceId: _this._activeData.id,
              x: _this._activeData.x,
              y: _this._activeData.y,
              properties: item.properties,
              type: item.type
            });
          }
        });
        menuItem.appendChild(img);
        menus.appendChild(menuItem);
      });
      this.__menuDOM.innerHTML = "";
      this.__menuDOM.appendChild(menus);
      this.showMenu();
    };
    ContextMenu2.prototype.addNode = function(node, y) {
      var isDeep = y !== void 0;
      if (y === void 0) {
        y = node.y;
      }
      var nodeModel = this.lf.getNodeModelById(node.sourceId);
      if (nodeModel) {
        var leftTopX = node.x - nodeModel.width + NEXT_X_DISTANCE;
        var leftTopY = y - node.y / 2 - 20;
        var rightBottomX = node.x + nodeModel.width + NEXT_X_DISTANCE;
        var rightBottomY = y + node.y / 2 + 20;
        var existElements = this.lf.getAreaElement([leftTopX, leftTopY], [rightBottomX, rightBottomY]);
        if (existElements.length) {
          y = y + NEXT_Y_DISTANCE;
          this.addNode(node, y);
          return;
        }
        if (node.type) {
          var newNode = this.lf.addNode({
            type: node.type,
            x: node.x + 200,
            y,
            properties: node.properties
          });
          var startPoint = void 0;
          var endPoint = void 0;
          if (isDeep) {
            startPoint = {
              x: node.x,
              y: node.y + nodeModel.height / 2
            };
            endPoint = {
              x: newNode.x - newNode.width / 2,
              y: newNode.y
            };
          }
          this.lf.addEdge({
            sourceNodeId: node.sourceId,
            targetNodeId: newNode.id,
            startPoint,
            endPoint
          });
        }
      }
    };
    ContextMenu2.prototype.showMenu = function() {
      var menuPosition = this.getContextMenuPosition();
      if (menuPosition) {
        var _a = __read18(menuPosition, 2), x = _a[0], y = _a[1];
        this.__menuDOM.style.display = "flex";
        this.__menuDOM.style.top = "".concat(y, "px");
        this.__menuDOM.style.left = "".concat(x + 10, "px");
        this.container.appendChild(this.__menuDOM);
        !this.isShow && this.lf.on("node:delete,edge:delete,node:drag,graph:transform", this.listenDelete);
        this.isShow = true;
      }
    };
    ContextMenu2.pluginName = "contextMenu";
    return ContextMenu2;
  }()
);

// node_modules/@logicflow/extension/es/components/dnd-panel/index.js
var DndPanel = (
  /** @class */
  function() {
    function DndPanel2(_a) {
      var lf = _a.lf;
      var _this = this;
      this.lf = lf;
      this.lf.setPatternItems = function(shapeList) {
        _this.setPatternItems(shapeList);
      };
    }
    DndPanel2.prototype.render = function(_lf, domContainer) {
      var _this = this;
      this.destroy();
      if (!this.shapeList || this.shapeList.length === 0) {
        this.domContainer = domContainer;
        return;
      }
      this.panelEl = document.createElement("div");
      this.panelEl.className = "lf-dndpanel";
      this.shapeList.forEach(function(shapeItem) {
        var _a;
        (_a = _this.panelEl) === null || _a === void 0 ? void 0 : _a.appendChild(_this.createDndItem(shapeItem));
      });
      domContainer.appendChild(this.panelEl);
      this.domContainer = domContainer;
    };
    DndPanel2.prototype.destroy = function() {
      if (this.domContainer && this.panelEl && this.domContainer.contains(this.panelEl)) {
        this.domContainer.removeChild(this.panelEl);
      }
    };
    DndPanel2.prototype.setPatternItems = function(shapeList) {
      this.shapeList = shapeList;
      if (this.domContainer) {
        this.render(this.lf, this.domContainer);
      }
    };
    DndPanel2.prototype.createDndItem = function(shapeItem) {
      var _this = this;
      var el = document.createElement("div");
      el.className = shapeItem.className ? "lf-dnd-item ".concat(shapeItem.className) : "lf-dnd-item";
      var shape = document.createElement("div");
      shape.className = "lf-dnd-shape";
      if (shapeItem.icon) {
        shape.style.backgroundImage = "url(".concat(shapeItem.icon, ")");
      }
      el.appendChild(shape);
      if (shapeItem.label) {
        var text = document.createElement("div");
        text.innerText = shapeItem.label;
        text.className = "lf-dnd-text";
        el.appendChild(text);
      }
      if (shapeItem.disabled) {
        el.classList.add("disabled");
        el.onmousedown = function() {
          if (shapeItem.callback) {
            shapeItem.callback(_this.lf, _this.domContainer);
          }
        };
        return el;
      }
      el.onmousedown = function() {
        if (shapeItem.type) {
          _this.lf.dnd.startDrag({
            type: shapeItem.type,
            properties: shapeItem.properties,
            text: shapeItem.text
          });
        }
        if (shapeItem.callback) {
          shapeItem.callback(_this.lf, _this.domContainer);
        }
      };
      el.ondblclick = function(e) {
        _this.lf.graphModel.eventCenter.emit("dnd:panel-dbclick", {
          e,
          data: shapeItem
        });
      };
      el.onclick = function(e) {
        _this.lf.graphModel.eventCenter.emit("dnd:panel-click", {
          e,
          data: shapeItem
        });
      };
      el.oncontextmenu = function(e) {
        _this.lf.graphModel.eventCenter.emit("dnd:panel-contextmenu", {
          e,
          data: shapeItem
        });
      };
      return el;
    };
    DndPanel2.pluginName = "dndPanel";
    return DndPanel2;
  }()
);

// node_modules/@logicflow/extension/es/components/selection-select/index.js
var SelectionSelect = (
  /** @class */
  function() {
    function SelectionSelect2(_a) {
      var lf = _a.lf;
      var _this = this;
      this.disabled = true;
      this.isDefaultStopMoveGraph = false;
      this.isWholeNode = true;
      this.isWholeEdge = true;
      this.draw = function(ev) {
        var _a2 = _this.lf.getPointByClient(ev.clientX, ev.clientY).domOverlayPosition, x1 = _a2.x, y1 = _a2.y;
        _this.endPoint = {
          x: x1,
          y: y1
        };
        if (_this.startPoint) {
          var _b = _this.startPoint, x = _b.x, y = _b.y;
          var left = x;
          var top_1 = y;
          var width = x1 - x;
          var height = y1 - y;
          if (x1 < x) {
            left = x1;
            width = x - x1;
          }
          if (y1 < y) {
            top_1 = y1;
            height = y - y1;
          }
          if (_this.wrapper) {
            _this.wrapper.style.left = "".concat(left, "px");
            _this.wrapper.style.top = "".concat(top_1, "px");
            _this.wrapper.style.width = "".concat(width, "px");
            _this.wrapper.style.height = "".concat(height, "px");
          }
        }
      };
      this.drawOff = function() {
        var _a2;
        document.removeEventListener("mousemove", _this.draw);
        document.removeEventListener("mouseup", _this.drawOff);
        if (_this.wrapper) {
          _this.wrapper.oncontextmenu = null;
          (_a2 = _this.container) === null || _a2 === void 0 ? void 0 : _a2.removeChild(_this.wrapper);
        }
        if (_this.startPoint && _this.endPoint) {
          var _b = _this.startPoint, x = _b.x, y = _b.y;
          var _c = _this.endPoint, x1 = _c.x, y1 = _c.y;
          var lt = [Math.min(x, x1), Math.min(y, y1)];
          var rt = [Math.max(x, x1), Math.max(y, y1)];
          _this.lf.emit("selection:selected-area", {
            topLeft: lt,
            bottomRight: rt
          });
          if (Math.abs(x1 - x) < 10 && Math.abs(y1 - y) < 10) {
            return;
          }
          var elements = _this.lf.graphModel.getAreaElement(lt, rt, _this.isWholeEdge, _this.isWholeNode, true);
          var group_1 = _this.lf.graphModel.group;
          elements.forEach(function(element) {
            if (!group_1 || !group_1.getNodeGroup(element.id)) {
              _this.lf.selectElementById(element.id, true);
            }
          });
          _this.lf.emit("selection:selected", elements);
        }
      };
      this.lf = lf;
      var stopMoveGraph = lf.getEditConfig().stopMoveGraph;
      this.isDefaultStopMoveGraph = stopMoveGraph;
      lf.openSelectionSelect = function() {
        _this.openSelectionSelect();
      };
      lf.closeSelectionSelect = function() {
        _this.closeSelectionSelect();
      };
    }
    SelectionSelect2.prototype.render = function(lf, domContainer) {
      var _this = this;
      this.container = domContainer;
      lf.on("blank:mousedown", function(_a) {
        var e = _a.e;
        var config = lf.getEditConfig();
        if (!config.stopMoveGraph || _this.disabled) {
          return;
        }
        var isRightClick = e.button === 2;
        if (isRightClick) {
          return;
        }
        var _b = lf.getPointByClient(e.clientX, e.clientY).domOverlayPosition, x = _b.x, y = _b.y;
        _this.startPoint = {
          x,
          y
        };
        _this.endPoint = {
          x,
          y
        };
        var wrapper = document.createElement("div");
        wrapper.className = "lf-selection-select";
        wrapper.oncontextmenu = function prevent(ev) {
          ev.preventDefault();
        };
        wrapper.style.top = "".concat(_this.startPoint.y, "px");
        wrapper.style.left = "".concat(_this.startPoint.x, "px");
        domContainer.appendChild(wrapper);
        _this.wrapper = wrapper;
        document.addEventListener("mousemove", _this.draw);
        document.addEventListener("mouseup", _this.drawOff);
      });
    };
    SelectionSelect2.prototype.setSelectionSense = function(isWholeEdge, isWholeNode) {
      if (isWholeEdge === void 0) {
        isWholeEdge = true;
      }
      if (isWholeNode === void 0) {
        isWholeNode = true;
      }
      this.isWholeEdge = isWholeEdge;
      this.isWholeNode = isWholeNode;
    };
    SelectionSelect2.prototype.openSelectionSelect = function() {
      var stopMoveGraph = this.lf.getEditConfig().stopMoveGraph;
      if (!stopMoveGraph) {
        this.isDefaultStopMoveGraph = false;
        this.lf.updateEditConfig({
          stopMoveGraph: true
        });
      }
      this.open();
    };
    SelectionSelect2.prototype.closeSelectionSelect = function() {
      if (!this.isDefaultStopMoveGraph) {
        this.lf.updateEditConfig({
          stopMoveGraph: false
        });
      }
      this.close();
    };
    SelectionSelect2.prototype.open = function() {
      this.disabled = false;
    };
    SelectionSelect2.prototype.close = function() {
      this.disabled = true;
    };
    SelectionSelect2.pluginName = "selectionSelect";
    return SelectionSelect2;
  }()
);

// node_modules/@logicflow/extension/es/components/mini-map/index.js
var __values3 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var MiniMap = (
  /** @class */
  function() {
    function MiniMap2(_a) {
      var lf = _a.lf, LogicFlow = _a.LogicFlow, options = _a.options;
      var _this = this;
      this.width = 200;
      this.height = 150;
      this.scale = 1;
      this.translateX = 0;
      this.translateY = 0;
      this.showEdge = false;
      this.viewPortTop = 0;
      this.viewPortLeft = 0;
      this.viewPortWidth = 150;
      this.viewPortHeight = 75;
      this.isShow = false;
      this.isShowHeader = false;
      this.isShowCloseIcon = false;
      this.headerTitle = "导航";
      this.disabledPlugins = ["miniMap", "control", "selectionSelect"];
      this.render = function(_2, container) {
        _this.container = container;
        _this.lf.on("history:change", function() {
          if (_this.isShow) {
            _this.setView();
          }
        });
        _this.lf.on("graph:transform", function() {
          if (_this.isShow) {
            _this.setView(false);
          }
        });
      };
      this.show = function(left, top) {
        if (!_this.isShow) {
          _this.createMiniMap(left, top);
          _this.setView();
        }
        _this.isShow = true;
      };
      this.hide = function() {
        if (_this.isShow) {
          _this.removeMiniMap();
          _this.lf.emit("miniMap:close", {});
        }
        _this.isShow = false;
      };
      this.updatePosition = function(position) {
        if (typeof position === "object") {
          if (position.left !== void 0 || position.right !== void 0) {
            _this.leftPosition = position.left;
            _this.rightPosition = position.right;
          }
          if (position.top !== void 0 || position.bottom !== void 0) {
            _this.topPosition = position.top;
            _this.bottomPosition = position.bottom;
          }
        } else {
          switch (position) {
            case "left-top":
              _this.leftPosition = 0;
              _this.rightPosition = void 0;
              _this.topPosition = 0;
              _this.bottomPosition = void 0;
              break;
            case "right-top":
              _this.leftPosition = void 0;
              _this.rightPosition = 0;
              _this.topPosition = 0;
              _this.bottomPosition = void 0;
              break;
            case "left-bottom":
              _this.leftPosition = 0;
              _this.rightPosition = void 0;
              _this.topPosition = void 0;
              _this.bottomPosition = 0;
              break;
            case "right-bottom":
              _this.leftPosition = void 0;
              _this.rightPosition = 0;
              _this.topPosition = void 0;
              _this.bottomPosition = 0;
              break;
          }
        }
        _this.updateMiniMapPosition();
      };
      this.reset = function() {
        _this.lf.resetTranslate();
        _this.lf.resetZoom();
      };
      this.setShowEdge = function(showEdge) {
        if (_this.showEdge !== showEdge) {
          _this.showEdge = showEdge;
          _this.setView();
        }
      };
      this.startDrag = function(e) {
        document.addEventListener("mousemove", _this.drag);
        document.addEventListener("mouseup", _this.drop);
        var x = e.x, y = e.y;
        _this.startPosition = { x, y };
      };
      this.drag = function(e) {
        var x = e.x, y = e.y;
        var translateX = (x - _this.startPosition.x) / _this.scale;
        var translateY = (y - _this.startPosition.y) / _this.scale;
        var centerX = _this.viewPortLeft + translateX + _this.viewPortWidth / _this.scale / 2;
        var centerY = _this.viewPortTop + translateY + _this.viewPortHeight / _this.scale / 2;
        _this.startPosition = { x, y };
        _this.lf.focusOn({
          coordinate: {
            x: centerX,
            y: centerY
          }
        });
      };
      this.drop = function() {
        document.removeEventListener("mousemove", _this.drag);
        document.removeEventListener("mouseup", _this.drop);
      };
      this.mapClick = function(e) {
        var offsetX = e.offsetX, offsetY = e.offsetY;
        var centerX = _this.translateX + offsetX / _this.scale;
        var centerY = _this.translateY + offsetY / _this.scale;
        _this.lf.focusOn({
          coordinate: {
            x: centerX,
            y: centerY
          }
        });
      };
      this.lf = lf;
      this.LFCtor = LogicFlow;
      if (options && options.MiniMap) {
        this.setOption(options.MiniMap);
      }
      this.viewPortWidth = lf.graphModel.width;
      this.viewPortHeight = lf.graphModel.height;
      var boundsInit = {
        left: 0,
        right: this.viewPortWidth,
        top: 0,
        bottom: this.viewPortHeight
      };
      this.bounds = boundsInit;
      this.elementAreaBounds = boundsInit;
      this.viewPortBounds = boundsInit;
      this.initMiniMap();
    }
    MiniMap2.prototype.setOption = function(options) {
      var _a = options.width, width = _a === void 0 ? 150 : _a, _b = options.height, height = _b === void 0 ? 220 : _b, _c = options.showEdge, showEdge = _c === void 0 ? false : _c, _d = options.isShowHeader, isShowHeader = _d === void 0 ? false : _d, _e = options.isShowCloseIcon, isShowCloseIcon = _e === void 0 ? false : _e, leftPosition = options.leftPosition, topPosition = options.topPosition, _f = options.rightPosition, rightPosition = _f === void 0 ? 0 : _f, _g = options.bottomPosition, bottomPosition = _g === void 0 ? 0 : _g, _h = options.headerTitle, headerTitle = _h === void 0 ? "导航" : _h;
      this.width = width;
      this.height = height;
      this.showEdge = showEdge;
      this.isShowHeader = isShowHeader;
      this.isShowCloseIcon = isShowCloseIcon;
      this.leftPosition = leftPosition;
      this.rightPosition = leftPosition !== void 0 ? void 0 : rightPosition;
      this.topPosition = topPosition;
      this.bottomPosition = topPosition !== void 0 ? void 0 : bottomPosition;
      this.headerTitle = headerTitle;
    };
    MiniMap2.prototype.initMiniMap = function() {
      var miniMapWrap = document.createElement("div");
      miniMapWrap.className = "lf-mini-map-graph";
      miniMapWrap.style.width = "".concat(this.width, "px");
      miniMapWrap.style.height = "".concat(this.height, "px");
      this.lfMap = new this.LFCtor({
        container: miniMapWrap,
        grid: false,
        isSilentMode: true,
        stopZoomGraph: true,
        stopScrollGraph: true,
        // 禁用画布移动会导致 transformModel.translate 无效，所以这里不禁用
        stopMoveGraph: false,
        history: false,
        snapline: false,
        disabledPlugins: this.disabledPlugins
      });
      this.miniMapWrap = miniMapWrap;
      this.createViewPort();
      miniMapWrap.addEventListener("click", this.mapClick);
    };
    MiniMap2.prototype.createMiniMap = function(left, top) {
      var _a;
      var miniMapContainer = document.createElement("div");
      this.miniMapContainer = miniMapContainer;
      miniMapContainer.appendChild(this.miniMapWrap);
      miniMapContainer.style.position = "absolute";
      if (left !== void 0 || top !== void 0) {
        this.leftPosition = left || 0;
        this.topPosition = top || 0;
        this.rightPosition = void 0;
        this.bottomPosition = void 0;
      }
      this.updateMiniMapPosition();
      miniMapContainer.className = "lf-mini-map";
      if (!this.isShowCloseIcon) {
        miniMapContainer.classList.add("lf-mini-map-no-close-icon");
      }
      if (!this.isShowHeader) {
        miniMapContainer.classList.add("lf-mini-map-no-header");
      }
      (_a = this.container) === null || _a === void 0 ? void 0 : _a.appendChild(miniMapContainer);
      this.miniMapWrap.appendChild(this.viewport);
      var header = document.createElement("div");
      header.className = "lf-mini-map-header";
      header.innerText = this.headerTitle;
      miniMapContainer.appendChild(header);
      var close = document.createElement("span");
      close.className = "lf-mini-map-close";
      close.addEventListener("click", this.hide);
      miniMapContainer.appendChild(close);
    };
    MiniMap2.prototype.updateMiniMapPosition = function() {
      if (this.miniMapContainer) {
        var style2 = this.miniMapContainer.style;
        if (this.rightPosition !== void 0) {
          style2.right = "".concat(this.rightPosition, "px");
          style2.left = "";
        } else {
          style2.left = "".concat(this.leftPosition, "px");
          style2.right = "";
        }
        if (this.bottomPosition !== void 0) {
          style2.bottom = "".concat(this.bottomPosition, "px");
          style2.top = "";
        } else {
          style2.top = "".concat(this.topPosition, "px");
          style2.bottom = "";
        }
      }
    };
    MiniMap2.prototype.removeMiniMap = function() {
      var _a;
      if (this.miniMapContainer) {
        (_a = this.container) === null || _a === void 0 ? void 0 : _a.removeChild(this.miniMapContainer);
      }
    };
    MiniMap2.prototype.updateBounds = function(data) {
      if (data) {
        this.updateElementAreaBounds(data);
      }
      this.updateViewPortBounds();
      this.bounds = {
        left: Math.min(this.elementAreaBounds.left, this.viewPortBounds.left),
        right: Math.max(this.elementAreaBounds.right, this.viewPortBounds.right),
        top: Math.min(this.elementAreaBounds.top, this.viewPortBounds.top),
        bottom: Math.max(this.elementAreaBounds.bottom, this.viewPortBounds.bottom)
      };
    };
    MiniMap2.prototype.updateElementAreaBounds = function(data) {
      var elementAreaBounds = {
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      };
      var nodes = data.nodes;
      if (nodes && nodes.length > 0) {
        nodes.forEach(function(node) {
          var _a, _b;
          var x = node.x, y = node.y;
          var width = (_a = node.width) !== null && _a !== void 0 ? _a : 200;
          var height = (_b = node.height) !== null && _b !== void 0 ? _b : 200;
          var nodeLeft = x - width / 2;
          var nodeRight = x + width / 2;
          var nodeTop = y - height / 2;
          var nodeBottom = y + height / 2;
          elementAreaBounds.left = Math.min(nodeLeft, elementAreaBounds.left);
          elementAreaBounds.right = Math.max(nodeRight, elementAreaBounds.right);
          elementAreaBounds.top = Math.min(nodeTop, elementAreaBounds.top);
          elementAreaBounds.bottom = Math.max(nodeBottom, elementAreaBounds.bottom);
        });
      }
      this.elementAreaBounds = elementAreaBounds;
    };
    MiniMap2.prototype.updateViewPortBounds = function() {
      var _a = this.lf.getTransform(), TRANSLATE_X = _a.TRANSLATE_X, TRANSLATE_Y = _a.TRANSLATE_Y, SCALE_X = _a.SCALE_X, SCALE_Y = _a.SCALE_Y;
      var _b = this.lf.graphModel, width = _b.width, height = _b.height;
      this.viewPortBounds = {
        left: -TRANSLATE_X / SCALE_X,
        right: (-TRANSLATE_X + width) / SCALE_X,
        top: -TRANSLATE_Y / SCALE_Y,
        bottom: (-TRANSLATE_Y + height) / SCALE_Y
      };
    };
    MiniMap2.prototype.resetData = function(data) {
      var nodes = data.nodes, edges = data.edges;
      nodes.forEach(function(node) {
        node.text = void 0;
      });
      if (this.showEdge) {
        edges.forEach(function(edge) {
          edge.text = void 0;
        });
      }
      return {
        nodes,
        // 是否渲染边
        edges: this.showEdge ? edges : []
      };
    };
    MiniMap2.prototype.setView = function(reRender) {
      var e_1, _a;
      if (reRender === void 0) {
        reRender = true;
      }
      if (reRender) {
        var graphData = this.lf.getGraphRawData();
        var data = this.resetData(graphData);
        var viewMap = this.lf.viewMap;
        var modelMap = this.lf.graphModel.modelMap;
        var minimapViewMap = this.lfMap.viewMap;
        try {
          for (var _b = __values3(viewMap.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            if (!minimapViewMap.has(key)) {
              this.lfMap.register({
                type: key,
                view: viewMap.get(key),
                model: modelMap.get(key)
              });
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        this.lfMap.render(data);
        this.updateBounds(data);
      } else {
        this.updateBounds();
      }
      var _d = this.bounds, left = _d.left, top = _d.top, right = _d.right, bottom = _d.bottom;
      var realWidth = right - left;
      var realHeight = bottom - top;
      var realWidthScale = this.width / realWidth;
      var realHeightScale = this.height / realHeight;
      var scale = Math.min(realWidthScale, realHeightScale);
      this.scale = scale;
      var translateX = left - (this.width / scale - realWidth) / 2;
      var translateY = top - (this.height / scale - realHeight) / 2;
      this.lfMap.graphModel.transformModel.translate(-translateX + this.translateX, -translateY + this.translateY);
      this.translateX = translateX;
      this.translateY = translateY;
      if (this.miniMapWrap.firstChild) {
        var innerStyle = this.miniMapWrap.firstChild.style;
        innerStyle.pointerEvents = "none";
        innerStyle.transform = "matrix(".concat(scale, ", 0, 0, ").concat(scale, ", 0, 0)");
        innerStyle.transformOrigin = "left top";
        innerStyle.height = "".concat(this.height / scale, "px");
        innerStyle.width = "".concat(this.width / scale, "px");
        this.updateViewPort();
      }
    };
    MiniMap2.prototype.updateViewPort = function() {
      var viewStyle = this.viewport.style;
      var _a = this.lf.getTransform(), TRANSLATE_X = _a.TRANSLATE_X, TRANSLATE_Y = _a.TRANSLATE_Y, SCALE_X = _a.SCALE_X, SCALE_Y = _a.SCALE_Y;
      var _b = this.lf.graphModel, width = _b.width, height = _b.height;
      this.viewPortLeft = -TRANSLATE_X / SCALE_X;
      this.viewPortTop = -TRANSLATE_Y / SCALE_Y;
      this.viewPortWidth = width / SCALE_X * this.scale;
      this.viewPortHeight = height / SCALE_Y * this.scale;
      viewStyle.width = "".concat(this.viewPortWidth, "px");
      viewStyle.height = "".concat(this.viewPortHeight, "px");
      viewStyle.left = "".concat((this.viewPortLeft - this.translateX) * this.scale, "px");
      viewStyle.top = "".concat((this.viewPortTop - this.translateY) * this.scale, "px");
    };
    MiniMap2.prototype.createViewPort = function() {
      var div = document.createElement("div");
      div.className = "lf-minimap-viewport";
      div.addEventListener("mousedown", this.startDrag);
      div.addEventListener("click", function(e) {
        e.stopPropagation();
      });
      this.viewport = div;
    };
    MiniMap2.pluginName = "miniMap";
    return MiniMap2;
  }()
);

// node_modules/@logicflow/extension/es/materials/curved-edge/index.js
var __extends25 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign22 = function() {
  __assign22 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign22.apply(this, arguments);
};
var __read19 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var directionMap = {
  tr: "tl",
  lb: "tl",
  tl: "tr",
  rb: "tr",
  br: "bl",
  lt: "bl",
  bl: "br",
  rt: "br"
};
function pointFilter(points) {
  var all = points;
  var i = 1;
  while (i < all.length - 1) {
    var _a = __read19(all[i - 1], 2), x = _a[0], y = _a[1];
    var _b = __read19(all[i], 2), x1 = _b[0], y1 = _b[1];
    var _c = __read19(all[i + 1], 2), x2 = _c[0], y2 = _c[1];
    if (x === x1 && x1 === x2 || y === y1 && y1 === y2) {
      all.splice(i, 1);
    } else {
      i++;
    }
  }
  return all;
}
function getMidPoints(cur, key, orientation, radius) {
  var mid1 = [cur[0], cur[1]];
  var mid2 = [cur[0], cur[1]];
  switch (orientation) {
    case "tl": {
      if (key === "tr") {
        mid1[1] += radius;
        mid2[0] += radius;
      } else if (key === "lb") {
        mid1[0] += radius;
        mid2[1] += radius;
      }
      return [mid1, mid2];
    }
    case "tr": {
      if (key === "tl") {
        mid1[1] += radius;
        mid2[0] -= radius;
      } else if (key === "rb") {
        mid1[0] -= radius;
        mid2[1] += radius;
      }
      return [mid1, mid2];
    }
    case "bl": {
      if (key === "br") {
        mid1[1] -= radius;
        mid2[0] += radius;
      } else if (key === "lt") {
        mid1[0] += radius;
        mid2[1] -= radius;
      }
      return [mid1, mid2];
    }
    case "br": {
      if (key === "bl") {
        mid1[1] -= radius;
        mid2[0] -= radius;
      } else if (key === "rt") {
        mid1[0] -= radius;
        mid2[1] -= radius;
      }
      return [mid1, mid2];
    }
    default:
      return [];
  }
}
function getPartialPath(prev, cur, next, radius) {
  var _a;
  var dir1 = "";
  var dir2 = "";
  if (prev[0] === cur[0]) {
    dir1 = prev[1] > cur[1] ? "t" : "b";
  } else if (prev[1] === cur[1]) {
    dir1 = prev[0] > cur[0] ? "l" : "r";
  }
  if (cur[0] === next[0]) {
    dir2 = cur[1] > next[1] ? "t" : "b";
  } else if (cur[1] === next[1]) {
    dir2 = cur[0] > next[0] ? "l" : "r";
  }
  var r = Math.min(Math.hypot(cur[0] - prev[0], cur[1] - prev[1]) / 2, Math.hypot(next[0] - cur[0], next[1] - cur[1]) / 2, radius) || 1 / 5 * radius;
  var key = "".concat(dir1).concat(dir2);
  var orientation = directionMap[key] || "-";
  var path = "L ".concat(prev[0], " ").concat(prev[1]);
  if (orientation === "-") {
    path += "L ".concat(cur[0], " ").concat(cur[1], " L ").concat(next[0], " ").concat(next[1]);
  } else {
    var _b = __read19(getMidPoints(cur, key, orientation, r), 2), mid1 = _b[0], mid2 = _b[1];
    if (mid1 && mid2) {
      path += "L ".concat(mid1[0], " ").concat(mid1[1], " Q ").concat(cur[0], " ").concat(cur[1], " ").concat(mid2[0], " ").concat(mid2[1]);
      _a = __read19(mid2, 2), cur[0] = _a[0], cur[1] = _a[1];
    }
  }
  return path;
}
function getCurvedEdgePath(points, radius) {
  var i = 0;
  var d = "";
  if (points.length === 2) {
    d += "M".concat(points[i][0], " ").concat(points[i++][1], " L ").concat(points[i][0], " ").concat(points[i][1]);
  } else {
    d += "M".concat(points[i][0], " ").concat(points[i++][1]);
    for (; i + 1 < points.length; ) {
      var prev = points[i - 1];
      var cur = points[i];
      var next = points[i++ + 1];
      d += getPartialPath(prev, cur, next, radius);
    }
    d += "L ".concat(points[i][0], " ").concat(points[i][1]);
  }
  return d;
}
var CurvedEdge = (
  /** @class */
  function(_super) {
    __extends25(CurvedEdge2, _super);
    function CurvedEdge2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    CurvedEdge2.prototype.getEdge = function() {
      var model = this.props.model;
      var pointsStr = model.points, isAnimation = model.isAnimation, arrowConfig = model.arrowConfig, _a = model.radius, radius = _a === void 0 ? 5 : _a;
      var style2 = model.getEdgeStyle();
      var animationStyle = model.getEdgeAnimationStyle();
      var points = pointFilter(pointsStr.split(" ").map(function(p) {
        return p.split(",").map(function(a) {
          return +a;
        });
      }));
      var d = getCurvedEdgePath(points, radius);
      var attrs = __assign22(__assign22(__assign22({ style: isAnimation ? animationStyle : {} }, style2), arrowConfig), { fill: "none" });
      return _("path", __assign22({ d }, attrs));
    };
    return CurvedEdge2;
  }(PolylineEdge)
);
var CurvedEdgeModel = (
  /** @class */
  function(_super) {
    __extends25(CurvedEdgeModel2, _super);
    function CurvedEdgeModel2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return CurvedEdgeModel2;
  }(PolylineEdgeModel)
);

// node_modules/@logicflow/extension/es/materials/node-selection/index.js
var __extends26 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign23 = function() {
  __assign23 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign23.apply(this, arguments);
};
var __read20 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray15 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var NodeSelectionView = (
  /** @class */
  function(_super) {
    __extends26(NodeSelectionView2, _super);
    function NodeSelectionView2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    NodeSelectionView2.prototype.getLabelShape = function() {
      var _a = this.props.model, id = _a.id, x = _a.x, y = _a.y, width = _a.width, height = _a.height, properties = _a.properties;
      var style2 = this.props.model.getNodeStyle();
      return _("svg", {
        x: x - width / 2,
        y: y - height / 2,
        width: 50,
        height: 24,
        style: "z-index: 0; background: none; overflow: auto;"
      }, [
        properties.labelText ? _("text", {
          x: 0,
          y: -5,
          fontSize: "16px",
          fill: style2.stroke
        }, properties.labelText) : "",
        properties.disabledDelete ? "" : _("text", {
          x: properties.labelText ? 50 : 0,
          y: -5,
          fontSize: "24px",
          cursor: "pointer",
          fill: style2.stroke,
          onclick: this.handleCustomDeleteIconClick.bind(this, id)
        }, "x")
      ]);
    };
    NodeSelectionView2.prototype.getShape = function() {
      var _a = this.props.model, x = _a.x, y = _a.y, width = _a.width, height = _a.height, id = _a.id;
      var style2 = this.props.model.getNodeStyle();
      return _("g", {}, [
        _("rect", __assign23(__assign23({}, style2), { x: x - width / 2, y: y - height / 2, width, height, id })),
        this.getLabelShape()
      ]);
    };
    NodeSelectionView2.prototype.toFront = function() {
    };
    NodeSelectionView2.prototype.handleCustomDeleteIconClick = function(id) {
      var graphModel = this.props.graphModel;
      graphModel.deleteNode(id);
    };
    return NodeSelectionView2;
  }(PolygonNode)
);
var NodeSelectionModel = (
  /** @class */
  function(_super) {
    __extends26(NodeSelectionModel2, _super);
    function NodeSelectionModel2() {
      var _this = _super.apply(this, __spreadArray15([], __read20(arguments), false)) || this;
      _this.d = 10;
      return _this;
    }
    NodeSelectionModel2.prototype.initNodeData = function(data) {
      data.text = {
        value: "",
        x: data.x,
        y: data.y,
        draggable: false,
        editable: false
      };
      _super.prototype.initNodeData.call(this, data);
      this.zIndex = 0;
      this.draggable = true;
    };
    NodeSelectionModel2.prototype.setAttributes = function() {
      var _this = this;
      var _a;
      this.points = [];
      if (((_a = this.properties) === null || _a === void 0 ? void 0 : _a.node_selection_ids).length > 1) {
        setTimeout(function() {
          var _a2;
          _this.updatePointsByNodes(((_a2 = _this.properties) === null || _a2 === void 0 ? void 0 : _a2.node_selection_ids) || []);
        });
      }
    };
    NodeSelectionModel2.prototype.getNodeStyle = function() {
      var style2 = _super.prototype.getNodeStyle.call(this);
      style2.stroke = this.properties.strokeColor || "#008000";
      style2.strokeDasharray = "10 5";
      return style2;
    };
    NodeSelectionModel2.prototype.getDefaultAnchor = function() {
      return [];
    };
    NodeSelectionModel2.prototype.updatePoints = function(points) {
      this.points = points;
    };
    NodeSelectionModel2.prototype.updateCoordinate = function(_a) {
      var x = _a.x, y = _a.y;
      this.x = x;
      this.y = y;
    };
    NodeSelectionModel2.prototype.updatePointsByNodes = function(nodesIds) {
      var _this = this;
      var points = [];
      var minX = Infinity;
      var minY = Infinity;
      var maxX = -Infinity;
      var maxY = -Infinity;
      nodesIds.forEach(function(id) {
        var model = _this.graphModel.getNodeModelById(id);
        if (!model)
          return;
        var width = model.width, height = model.height, x = model.x, y = model.y;
        minX = Math.min(minX, x - width / 2 - _this.d);
        minY = Math.min(minY, y - height / 2 - _this.d);
        maxX = Math.max(maxX, x + width / 2 + _this.d);
        maxY = Math.max(maxY, y + height / 2 + _this.d);
      });
      points.push([minX, minY], [maxX, minY], [maxX, maxY], [minX, maxY]);
      if ([minX, minY, maxX, maxY].some(function(n) {
        return Math.abs(n) === Infinity;
      }))
        return;
      this.updatePoints(points);
      this.updateCoordinate({
        x: (maxX + minX) / 2,
        y: (maxY + minY) / 2
      });
    };
    return NodeSelectionModel2;
  }(PolygonNodeModel)
);
var NodeSelection = (
  /** @class */
  function() {
    function NodeSelection2(_a) {
      var lf = _a.lf;
      this.selectNodes = [];
      this.d = 10;
      lf.register({
        type: "node-selection",
        view: NodeSelectionView,
        model: NodeSelectionModel
      });
    }
    Object.defineProperty(NodeSelection2.prototype, "selectNodesIds", {
      /**
       * 获取所选node的id数组
       */
      get: function() {
        return this.selectNodes.map(function(node) {
          return node.id;
        });
      },
      enumerable: false,
      configurable: true
    });
    NodeSelection2.prototype.addNodeSelection = function() {
      var node = this.lf.addNode({
        type: "node-selection",
        text: "",
        properties: {
          node_selection_ids: this.selectNodesIds
        }
      });
      node.updatePointsByNodes(this.selectNodesIds);
    };
    NodeSelection2.prototype.updateNodeSelection = function() {
      var nodeSelection = this.getNodeSelection();
      if (!nodeSelection)
        return;
      this.lf.setProperties(nodeSelection.id, {
        node_selection_ids: this.selectNodesIds
      });
      this.lf.getNodeModelById(nodeSelection.id).updatePointsByNodes(this.selectNodesIds);
    };
    NodeSelection2.prototype.getNodeSelection = function() {
      var _this = this;
      var ids4 = this.selectNodesIds;
      var rawData = this.lf.getGraphRawData();
      var oldIds = ids4.filter(function(id) {
        return id !== _this.currentClickNode.id;
      });
      return rawData.nodes.find(function(node) {
        if (node.type === "node-selection") {
          var nodeSelectionIds_1 = get_default(node, "properties.node_selection_ids", []);
          return oldIds.every(function(id) {
            return nodeSelectionIds_1.includes(id);
          });
        }
        return false;
      });
    };
    NodeSelection2.prototype.render = function(lf) {
      var _this = this;
      this.lf = lf;
      lf.on("node:click", function(val) {
        if (!val.e.shiftKey || val.data.type === "node-selection")
          return;
        _this.currentClickNode = val.data;
        var hasExists = false;
        if (_this.selectNodesIds.includes(val.data.id)) {
          _this.lf.getNodeModelById(val.data.id).setSelected(false);
          hasExists = true;
        }
        var nodes = lf.getSelectElements(true).nodes;
        _this.selectNodes = nodes;
        if (_this.selectNodes.length === 1) {
          if (!hasExists) {
            _this.addNodeSelection();
          } else {
            _this.updateNodeSelection();
          }
        } else if (_this.selectNodes.length > 1) {
          _this.updateNodeSelection();
        }
      });
      lf.graphModel.addNodeMoveRules(function(model, deltaX, deltaY) {
        if (model.type === "node-selection") {
          var nodeIds = model.properties.node_selection_ids;
          lf.graphModel.moveNodes(nodeIds, deltaX, deltaY, true);
          return true;
        }
        return true;
      });
    };
    NodeSelection2.pluginName = "node-selection";
    return NodeSelection2;
  }()
);

// node_modules/@logicflow/extension/es/tools/flow-path/index.js
var __read21 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray16 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var FlowPath = (
  /** @class */
  function() {
    function FlowPath2(_a) {
      var lf = _a.lf;
      var _this = this;
      this.lf = lf;
      this.paths = [];
      lf.getPathes = function() {
        if (!_this.startNodeType) {
          throw new Error("需要预先指定开始节点类型");
        }
        return _this.getPathes();
      };
      lf.setRawPaths = function(paths) {
        _this.setPathes(paths);
      };
      lf.getRawPathes = function() {
        return _this.paths;
      };
      lf.setStartNodeType = function(type3) {
        _this.startNodeType = type3;
      };
    }
    FlowPath2.prototype.setPathes = function(paths) {
      this.paths = paths.map(function(_a) {
        var routeId = _a.routeId, name = _a.name, elements = _a.elements, type3 = _a.type;
        return {
          routeId,
          name,
          elements,
          type: type3,
          similarElement: null,
          weight: 0
        };
      });
    };
    FlowPath2.prototype.getPathes = function() {
      var _this = this;
      var graphData = this.lf.getGraphRawData();
      var nodesMap = /* @__PURE__ */ new Map();
      var startNodeIds = [];
      graphData.nodes.forEach(function(node) {
        nodesMap.set(node.id, {
          id: node.id,
          data: node,
          nextNodes: []
        });
        if (node.type === _this.startNodeType) {
          startNodeIds.push(node.id);
        }
      });
      graphData.edges.forEach(function(edge) {
        var node = nodesMap.get(edge.sourceNodeId);
        node === null || node === void 0 ? void 0 : node.nextNodes.push(edge.targetNodeId);
      });
      var pathElements = [];
      startNodeIds.forEach(function(id) {
        var node = nodesMap.get(id);
        if (node) {
          pathElements = pathElements.concat(_this.findPathElements(node, nodesMap, []));
        }
      });
      return this.getNewPathes(pathElements);
    };
    FlowPath2.prototype.findPathElements = function(node, nodesMap, elements) {
      if (elements === void 0) {
        elements = [];
      }
      var newPaths = __spreadArray16([], __read21(elements), false);
      newPaths.push(node.id);
      if (node.nextNodes.length === 0) {
        return [newPaths];
      }
      var subPath = [];
      for (var i = 0; i < node.nextNodes.length; i++) {
        var n = nodesMap.get(node.nextNodes[i]);
        var p = void 0;
        if (n) {
          var idx = newPaths.indexOf(n.id);
          if (idx !== -1) {
            p = [__spreadArray16(__spreadArray16([], __read21(newPaths.slice(idx)), false), [n.id], false)];
          } else {
            p = this.findPathElements(n, nodesMap, __spreadArray16([], __read21(newPaths), false));
          }
          subPath = subPath.concat(p);
        }
      }
      return subPath;
    };
    FlowPath2.prototype.getNewPathes = function(pathElements) {
      var _this = this;
      var paths = [];
      var LoopSet = /* @__PURE__ */ new Set();
      pathElements.forEach(function(elements) {
        console.log("elements", elements);
        var routeId = _this.getNewId("path");
        var name = _this.getNewId("路径");
        var isLoop = _this.isLoopPath(elements);
        var elementStr = elements.join(",");
        if (!LoopSet.has(elementStr)) {
          LoopSet.add(elementStr);
          paths.push({
            routeId,
            name,
            elements,
            type: isLoop,
            weight: 0,
            similarElement: ""
          });
        }
      });
      var oldPaths = JSON.parse(JSON.stringify(this.paths));
      paths.forEach(function(newPath) {
        for (var i = 0; i < oldPaths.length; i++) {
          var oldPath = oldPaths[i];
          var weight = _this.similar2Path(__spreadArray16([], __read21(newPath.elements), false), __spreadArray16([], __read21(oldPath.elements), false));
          if (weight > newPath.weight && oldPath.weight <= weight) {
            newPath.weight = weight;
            newPath.similarElement = oldPath;
            if (weight === oldPath.weight && oldPath.similarElement) {
              oldPath.similarElement.similarElement = null;
              oldPath.similarElement.weight = 0;
              oldPath.similarElement = null;
              oldPath.weight = 0;
            } else {
              oldPath.similarElement = newPath;
              oldPath.weight = weight;
            }
          }
        }
      });
      paths.forEach(function(newPath) {
        if (newPath.similarElement && newPath.similarElement.similarElement === newPath) {
          newPath.routeId = newPath.similarElement.routeId;
          newPath.name = newPath.similarElement.name;
        }
        delete newPath.similarElement;
        delete newPath.weight;
      });
      this.setPathes(paths);
      return paths;
    };
    FlowPath2.prototype.similar2Path = function(x, y) {
      var z = 0;
      var s = x.length + y.length;
      x.sort();
      y.sort();
      var a = x.shift();
      var b2 = y.shift();
      while (a !== void 0 && b2 !== void 0) {
        if (a === b2) {
          z++;
          a = x.shift();
          b2 = y.shift();
        } else if (a < b2) {
          a = x.shift();
        } else if (a > b2) {
          b2 = y.shift();
        }
      }
      return z / s * 200;
    };
    FlowPath2.prototype.getNewId = function(prefix) {
      return "".concat(prefix, "_").concat(getBpmnId());
    };
    FlowPath2.prototype.isLoopPath = function(elements) {
      var length = elements.length;
      return elements.indexOf(elements[length - 1]) !== length - 1 ? 1 : 0;
    };
    FlowPath2.pluginName = "flowPath";
    return FlowPath2;
  }()
);

// node_modules/@logicflow/extension/es/tools/auto-layout/index.js
var __assign24 = function() {
  __assign24 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign24.apply(this, arguments);
};
var POSITION_TYPE = {
  LEFT_TOP: -1,
  LEFT: 0,
  LEFT_BOTTOM: 1
};
var AutoLayout = (
  /** @class */
  function() {
    function AutoLayout2(_a) {
      var lf = _a.lf;
      var _this = this;
      this.levelHeight = [];
      this.newNodeMap = /* @__PURE__ */ new Map();
      this.lf = lf;
      this.trunk = [];
      lf.layout = function(startNodeType) {
        var data = _this.lf.getGraphRawData();
        _this.lf.setStartNodeType(startNodeType);
        var path = _this.lf.getPathes();
        _this.levelHeight = [];
        _this.newNodeMap = /* @__PURE__ */ new Map();
        return _this.layout(data, path);
      };
    }
    AutoLayout2.prototype.layout = function(data, path) {
      var _this = this;
      var trunk = [];
      path.forEach(function(p) {
        var elements = p.elements;
        if (elements.length > trunk.length) {
          trunk = elements;
        } else if (elements.length === trunk.length) {
          if (JSON.stringify(elements) === JSON.stringify(_this.trunk)) {
            trunk = _this.trunk;
          }
        }
      });
      this.trunk = trunk;
      var nodeMap = this.formatData(data);
      var newGraphData = {
        nodes: [],
        edges: []
      };
      for (var i = trunk.length - 1; i >= 0; i--) {
        this.setNodePosition(trunk[i], nodeMap, newGraphData, i, 1);
      }
      this.lf.graphModel.graphDataToModel(newGraphData);
    };
    AutoLayout2.prototype.setNodePosition = function(nodeId, nodeMap, newGraphData, xLevel, yLevel) {
      var _this = this;
      var n = nodeMap[nodeId];
      var text = n.text, type3 = n.type, next = n.next, properties = n.properties;
      var x = xLevel * 160 + 40;
      var y = yLevel * 120;
      var nodeData = {
        id: nodeId,
        x,
        text,
        y,
        type: type3,
        properties
      };
      if (text && typeof text === "object") {
        nodeData.text = __assign24(__assign24({}, text), { x: x + text.x, y: y + text.y });
      }
      this.newNodeMap.set(nodeData.id, {
        x: nodeData.x,
        y: nodeData.y,
        type: type3
      });
      newGraphData.nodes.push(nodeData);
      n.isFixed = true;
      this.addLevelHeight(xLevel, 1);
      if (next && next.length > 0) {
        next.forEach(function(nextInfo) {
          var n1 = nodeMap[nextInfo.nodeId];
          if (!n1.isFixed) {
            var nextYLevel = _this.getLevelHeight(xLevel + 1);
            _this.addLevelHeight(xLevel, 1);
            _this.setNodePosition(nextInfo.nodeId, nodeMap, newGraphData, xLevel + 1, nextYLevel + 1);
          } else {
          }
          newGraphData.edges.push(__assign24({ id: nextInfo.edgeId, type: nextInfo.edgeType, sourceNodeId: nodeId, targetNodeId: nextInfo.nodeId, properties: nextInfo.properties, text: nextInfo.text }, _this.getEdgeDataPoints(nodeId, nextInfo.nodeId)));
        });
      }
      return nodeData;
    };
    AutoLayout2.prototype.getEdgeDataPoints = function(sourceNodeId, targetNodeId) {
      var source = this.newNodeMap.get(sourceNodeId);
      var target = this.newNodeMap.get(targetNodeId);
      var _a = this.getShape(sourceNodeId), width = _a.width, height = _a.height;
      var _b = this.getShape(targetNodeId), targetWidth = _b.width, targetHeight = _b.height;
      var positionType = this.getRelativePosition(source, target);
      var startPoint = {
        x: source.x,
        y: source.y
      };
      var endPoint = {
        x: target.x,
        y: target.y
      };
      switch (positionType) {
        case POSITION_TYPE.LEFT:
          startPoint.x = source.x + width / 2;
          endPoint.x = target.x - targetWidth / 2;
          break;
        case POSITION_TYPE.LEFT_TOP:
          startPoint.y = source.y + height / 2;
          endPoint.x = target.x - targetWidth / 2;
          break;
        case POSITION_TYPE.LEFT_BOTTOM:
          startPoint.x = source.x + width / 2;
          endPoint.y = target.y + targetHeight / 2;
          break;
        default:
          break;
      }
      return {
        startPoint,
        endPoint
      };
    };
    AutoLayout2.prototype.getRelativePosition = function(source, target) {
      var y = source.y;
      var y1 = target.y;
      var positionType;
      if (y < y1) {
        positionType = -1;
      } else if (y === y1) {
        positionType = 0;
      } else {
        positionType = 1;
      }
      return positionType;
    };
    AutoLayout2.prototype.getShape = function(nodeId) {
      var _a, _b;
      var nodeModel = this.lf.getNodeModelById(nodeId);
      return {
        height: (_a = nodeModel === null || nodeModel === void 0 ? void 0 : nodeModel.height) !== null && _a !== void 0 ? _a : 0,
        width: (_b = nodeModel === null || nodeModel === void 0 ? void 0 : nodeModel.width) !== null && _b !== void 0 ? _b : 0
      };
    };
    AutoLayout2.prototype.formatData = function(data) {
      var nodeMap = data.nodes.reduce(function(nMap, node) {
        var type3 = node.type, properties = node.properties, text = node.text, x = node.x, y = node.y;
        if (text && typeof text === "object") {
          text.x = text.x - x;
          text.y = text.y - y;
        }
        nMap[node.id] = {
          type: type3,
          properties,
          text,
          prev: [],
          next: []
        };
        return nMap;
      }, {});
      data.edges.forEach(function(edge) {
        var sourceNodeId = edge.sourceNodeId, targetNodeId = edge.targetNodeId, id = edge.id, properties = edge.properties, text = edge.text;
        var newText = text;
        if (typeof text === "object") {
          newText = text.value;
        }
        nodeMap[sourceNodeId].next.push({
          edgeId: id,
          nodeId: targetNodeId,
          edgeType: edge.type,
          properties,
          text: newText
        });
        nodeMap[targetNodeId].prev.push({
          edgeId: id,
          nodeId: sourceNodeId,
          properties,
          text: newText
        });
      });
      return nodeMap;
    };
    AutoLayout2.prototype.addLevelHeight = function(level, height, isNegative) {
      if (height === void 0) {
        height = 1;
      }
      if (isNegative === void 0) {
        isNegative = false;
      }
      var l = this.levelHeight[level];
      if (!l) {
        l = {
          positiveHeight: 0,
          negativeHeight: 0
        };
        this.levelHeight[level] = l;
      }
      isNegative ? l.negativeHeight -= height : l.positiveHeight += height;
    };
    AutoLayout2.prototype.getLevelHeight = function(level, isNegative) {
      if (isNegative === void 0) {
        isNegative = false;
      }
      var val = this.levelHeight[level];
      if (!val) {
        return 0;
      }
      return isNegative ? val.negativeHeight : val.positiveHeight;
    };
    AutoLayout2.pluginName = "AutoLayout";
    return AutoLayout2;
  }()
);

// node_modules/@logicflow/extension/es/components/highlight/index.js
var __assign25 = function() {
  __assign25 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign25.apply(this, arguments);
};
var __read22 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray17 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var getPath = function(id, lf) {
  var el = lf.getModelById(id);
  return getNodePath((el === null || el === void 0 ? void 0 : el.BaseType) === "node" ? el : el === null || el === void 0 ? void 0 : el.targetNode, lf);
};
var getNodePath = function(node, lf) {
  var incomingPaths = [];
  var outgoingPaths = [];
  var getIncomingPaths = function(curNode, path, prevNode) {
    if (prevNode) {
      path.unshift.apply(path, __spreadArray17([], __read22(lf.getEdgeModels({
        sourceNodeId: curNode.id,
        targetNodeId: prevNode === null || prevNode === void 0 ? void 0 : prevNode.id
      }).map(function(item) {
        return item.id;
      })), false));
    }
    if (path.includes(curNode.id)) {
      incomingPaths.push(path);
      return;
    }
    path.unshift(curNode.id);
    if (!curNode.incoming.nodes.length) {
      incomingPaths.push(path);
      return;
    }
    curNode.incoming.nodes.forEach(function(nextNode) {
      getIncomingPaths(nextNode, path.slice(), curNode);
    });
  };
  var getOutgoingPaths = function(curNode, path, prevNode) {
    if (prevNode) {
      path.push.apply(path, __spreadArray17([], __read22(lf.getEdgeModels({
        sourceNodeId: prevNode === null || prevNode === void 0 ? void 0 : prevNode.id,
        targetNodeId: curNode.id
      }).map(function(item) {
        return item.id;
      })), false));
    }
    if (path.includes(curNode.id)) {
      outgoingPaths.push(path);
      return;
    }
    path.push(curNode.id);
    if (!curNode.outgoing.nodes.length) {
      outgoingPaths.push(path);
      return;
    }
    curNode.outgoing.nodes.forEach(function(nextNode) {
      getOutgoingPaths(nextNode, path.slice(), curNode);
    });
  };
  getIncomingPaths(node, []);
  getOutgoingPaths(node, []);
  return __spreadArray17([], __read22(new Set(__spreadArray17(__spreadArray17([], __read22(incomingPaths.flat()), false), __read22(outgoingPaths.flat()), false))), false);
};
var Highlight = (
  /** @class */
  function() {
    function Highlight2(_a) {
      var lf = _a.lf;
      this.mode = "path";
      this.manual = false;
      this.tempStyles = {};
      this.lf = lf;
    }
    Highlight2.prototype.setMode = function(mode) {
      this.mode = mode;
    };
    Highlight2.prototype.setManual = function(manual) {
      this.manual = manual;
    };
    Highlight2.prototype.highlightSingle = function(id) {
      var model = this.lf.getModelById(id);
      if ((model === null || model === void 0 ? void 0 : model.BaseType) === "node") {
        model.updateStyles(this.tempStyles[id]);
      } else if ((model === null || model === void 0 ? void 0 : model.BaseType) === "edge") {
        model.updateStyles(this.tempStyles[id]);
        model.sourceNode.updateStyles(this.tempStyles[model.sourceNode.id]);
        model.targetNode.updateStyles(this.tempStyles[model.targetNode.id]);
      }
    };
    Highlight2.prototype.highlightPath = function(id) {
      var _this = this;
      var path = getPath(id, this.lf);
      path.forEach(function(_id) {
        var _a;
        (_a = _this.lf.getModelById(_id)) === null || _a === void 0 ? void 0 : _a.updateStyles(_this.tempStyles[_id]);
      });
    };
    Highlight2.prototype.highlight = function(id, mode) {
      var _this = this;
      if (mode === void 0) {
        mode = this.mode;
      }
      if (this.manual)
        return;
      if (Object.keys(this.tempStyles).length) {
        this.restoreHighlight();
      }
      Object.values(this.lf.graphModel.modelsMap).forEach(function(item) {
        var oStyle = item.BaseType === "node" ? item.getNodeStyle() : item.getEdgeStyle();
        _this.tempStyles[item.id] = __assign25({}, oStyle);
        item.setStyles({ opacity: 0.1 });
      });
      var modeTrigger = {
        single: this.highlightSingle.bind(this),
        path: this.highlightPath.bind(this)
      };
      modeTrigger[mode](id);
    };
    Highlight2.prototype.restoreHighlight = function() {
      var _this = this;
      if (!Object.keys(this.tempStyles).length)
        return;
      Object.values(this.lf.graphModel.modelsMap).forEach(function(item) {
        var _a;
        var oStyle = (_a = _this.tempStyles[item.id]) !== null && _a !== void 0 ? _a : {};
        item.updateStyles(__assign25({}, oStyle));
      });
      this.tempStyles = {};
    };
    Highlight2.prototype.render = function() {
      var _this = this;
      this.lf.on("node:mouseenter", function(_a) {
        var data = _a.data;
        return _this.highlight(data.id);
      });
      this.lf.on("edge:mouseenter", function(_a) {
        var data = _a.data;
        return _this.highlight(data.id);
      });
      this.lf.on("node:mouseleave", this.restoreHighlight.bind(this));
      this.lf.on("edge:mouseleave", this.restoreHighlight.bind(this));
      this.lf.on("history:change", this.restoreHighlight.bind(this));
    };
    Highlight2.prototype.destroy = function() {
    };
    Highlight2.pluginName = "highlight";
    return Highlight2;
  }()
);
export {
  AutoLayout,
  BPMNAdapter,
  BPMNBaseAdapter,
  BPMNElements,
  BoundaryEventFactory,
  BpmnAdapter,
  BpmnElement,
  BpmnXmlAdapter,
  ContextMenu,
  Control2 as Control,
  CurvedEdge,
  CurvedEdgeModel,
  DiamondResize,
  DiamondResizeModel,
  DiamondResizeView,
  DndPanel,
  EllipseResize,
  EllipseResizeModel,
  EllipseResizeView,
  EndEventFactory,
  EndEventModel,
  EndEventView,
  ExclusiveGatewayModel,
  ExclusiveGatewayView,
  FlowPath,
  GatewayNodeFactory,
  Group,
  GroupNode,
  GroupNodeModel,
  Highlight,
  HtmlResize,
  HtmlResizeModel,
  HtmlResizeView,
  InsertNodeInPolyline,
  IntermediateCatchEventFactory,
  IntermediateThrowEventFactory,
  Menu,
  MiniMap,
  NodeResize,
  NodeSelection,
  RectResize,
  RectResizeModel,
  RectResizeView,
  SelectionSelect,
  SequenceFlowModel,
  SequenceFlowView,
  ServiceTaskModel,
  ServiceTaskView,
  Snapshot,
  StartEventFactory,
  StartEventModel,
  StartEventView,
  SubProcessFactory,
  TaskNodeFactory,
  UserTaskModel,
  UserTaskView,
  utils_exports as bpmnUtils,
  convertNormalToXml,
  convertXmlToNormal,
  gateway,
  gatewayComposable,
  getCurvedEdgePath,
  handleAttributes,
  icons_exports as icons,
  lfJson2Xml,
  lfXml2Json,
  multiInstanceIcon,
  sequenceFlowFactory,
  toLogicflowData,
  toNormalJson,
  toTurboData,
  toXmlJson,
  useDefinition
};
//# sourceMappingURL=@logicflow_extension.js.map
