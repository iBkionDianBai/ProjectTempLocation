// src/core/defineMock.ts
import { isArray } from "@pengzhanbo/utils";
function defineMock(config) {
  return config;
}
function createDefineMock(transformer) {
  const define = (config) => {
    if (isArray(config))
      config = config.map((item) => transformer(item) || item);
    else
      config = transformer(config) || config;
    return config;
  };
  return define;
}

// src/core/defineMockData.ts
import { deepClone, deepEqual, isFunction } from "@pengzhanbo/utils";
var mockDataCache = /* @__PURE__ */ new Map();
var responseCache = /* @__PURE__ */ new WeakMap();
var staleInterval = 70;
var CacheImpl = class {
  value;
  // 初始化数据的备份，用于 判断 传入的初始化数据是否发生变更
  #initialValue;
  #lastUpdate;
  constructor(value) {
    this.value = value;
    this.#initialValue = deepClone(value);
    this.#lastUpdate = Date.now();
  }
  hotUpdate(value) {
    if (Date.now() - this.#lastUpdate < staleInterval)
      return;
    if (!deepEqual(value, this.#initialValue)) {
      this.value = value;
      this.#initialValue = deepClone(value);
      this.#lastUpdate = Date.now();
    }
  }
};
function defineMockData(key, initialData) {
  if (!mockDataCache.has(key))
    mockDataCache.set(key, new CacheImpl(initialData));
  const cache = mockDataCache.get(key);
  cache.hotUpdate(initialData);
  if (responseCache.has(cache))
    return responseCache.get(cache);
  const res = [
    () => cache.value,
    (val) => {
      if (isFunction(val))
        val = val(cache.value) ?? cache.value;
      cache.value = val;
    }
  ];
  Object.defineProperty(res, "value", {
    get() {
      return cache.value;
    },
    set(val) {
      cache.value = val;
    }
  });
  responseCache.set(cache, res);
  return res;
}

export {
  defineMock,
  createDefineMock,
  defineMockData
};
