"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } }// src/core/defineMock.ts
var _utils = require('@pengzhanbo/utils');
function defineMock(config) {
  return config;
}
function createDefineMock(transformer) {
  const define = (config) => {
    if (_utils.isArray.call(void 0, config))
      config = config.map((item) => transformer(item) || item);
    else
      config = transformer(config) || config;
    return config;
  };
  return define;
}

// src/core/defineMockData.ts

var mockDataCache = /* @__PURE__ */ new Map();
var responseCache = /* @__PURE__ */ new WeakMap();
var staleInterval = 70;
var CacheImpl = class {
  
  // 初始化数据的备份，用于 判断 传入的初始化数据是否发生变更
  #initialValue;
  #lastUpdate;
  constructor(value) {
    this.value = value;
    this.#initialValue = _utils.deepClone.call(void 0, value);
    this.#lastUpdate = Date.now();
  }
  hotUpdate(value) {
    if (Date.now() - this.#lastUpdate < staleInterval)
      return;
    if (!_utils.deepEqual.call(void 0, value, this.#initialValue)) {
      this.value = value;
      this.#initialValue = _utils.deepClone.call(void 0, value);
      this.#lastUpdate = Date.now();
    }
  }
};
function defineMockData(key, initialData) {
  if (!mockDataCache.has(key))
    mockDataCache.set(key, new CacheImpl(initialData));
  const cache = mockDataCache.get(key);
  cache.hotUpdate(initialData);
  if (responseCache.has(cache))
    return responseCache.get(cache);
  const res = [
    () => cache.value,
    (val) => {
      if (_utils.isFunction.call(void 0, val))
        val = _nullishCoalesce(val(cache.value), () => ( cache.value));
      cache.value = val;
    }
  ];
  Object.defineProperty(res, "value", {
    get() {
      return cache.value;
    },
    set(val) {
      cache.value = val;
    }
  });
  responseCache.set(cache, res);
  return res;
}





exports.defineMock = defineMock; exports.createDefineMock = createDefineMock; exports.defineMockData = defineMockData;
